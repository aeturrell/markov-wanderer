<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Markov Wanderer</title>
<link>https://aeturrell.github.io/markov-wanderer/index.html</link>
<atom:link href="https://aeturrell.github.io/markov-wanderer/index.xml" rel="self" type="application/rss+xml"/>
<description>A blog on economics, coding, and data science. Views are my own.</description>
<generator>quarto-1.3.361</generator>
<lastBuildDate>Wed, 01 Mar 2023 00:00:00 GMT</lastBuildDate>
<item>
  <title>Data science maturity and the cloud</title>
  <dc:creator>Arthur Turrell</dc:creator>
  <link>https://aeturrell.github.io/markov-wanderer/posts/data-science-maturity/data-science-maturity.html</link>
  <description><![CDATA[ 




<p>Data science has enormous potential to do good in the public sector. The efficiencies that are possible from automation and reproducible analytical pipelines alone are huge—if you like this is improvement at <em>existing</em> tasks. Throw machine learning and advanced analytics into the mix and data science can also complete entirely new tasks, <em>expanding the horizon of what’s possible</em>. It’s an exciting time to be a data scientist.</p>
<p>And yet I regularly speak to data scientists who are frustrated in their roles because the tech in their organisation simply does not give them the ability to do their job in the best way possible; or, even worse, they do not have the <em>agency</em> to do their job well. Data science, and data scientists, need the right conditions to flourish.</p>
<p>So, if you’re looking at your own organisation’s data science offering, what are the key things you should be able to do? And how can we ensure that data scientists have them?</p>
<section id="how-to-check-an-organisations-data-science-maturity" class="level2">
<h2 class="anchored" data-anchor-id="how-to-check-an-organisations-data-science-maturity">How to check an organisation’s data science maturity</h2>
<p>This is a highly personal, non-empirical, experience-based list of what the essentials are for data scientists to be productive. To some extent, subsequent elements build upon previous ones.</p>
<ol type="1">
<li><strong>First of all, data scientists need an <em>integrated development environment</em> (IDE) to write their code in.</strong> No, this isn’t just a Jupyter Notebook, though vendors seem to think that’s all data scientists ever use (it’s great to have notebooks but they’re not enough on their own). It looks more like <em>Visual Studio Code</em> for most languages, or perhaps <em>RStudio</em> for R (though you can use <em>Visual Studio Code</em> for R too, as covered in <a href="../../posts/setting-up-r-in-vscode/index.html">this blog post</a>).</li>
<li><strong>Packages for the integrated development environment</strong>. Before you’re even writing code, you need the right extensions (aka packages) for your IDE to allow you to work effectively. For example, the <a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python">Python extension</a> is critical for using Python in Visual Studio Code. But there’s a bunch of others for markdown, automatically writing docstrings, colourising hex colour codes, integrating with github, sorting your package imports, writing latex, and on and on… These are essential to a (productive) data science workflow.</li>
<li><strong>A way to manage installations of programming languages that can execute code.</strong> This means installations of Python and R, but not just having a single version of those on a machine : data scientists need a way to manage <em>multiple</em> environments, usually on a per project basis. This might mean one project is on Python 3.8.8, while another is using Python 3.10. Data scientists need control of this, and tools such as <a href="https://python-poetry.org/">poetry</a> or <a href="https://www.anaconda.com/products/distribution">Anaconda</a> give it to them. With this, data scientists can execute their code.</li>
<li><strong>A way to install packages and libraries for base installations of programming languages.</strong> Python and R alone aren’t much good. Their power comes from extending them with, in the case of Python, 100s of thousands of extra code libraries. These libraries come from repositories such as PyPI and CRAN. In the case of Python, they are installed via an instruction on the command line that triggers dependency resolution and then a download over the internet. Both poetry and Anaconda can act as intermediaries to the Python repositories, and can be used as command line tools to install packages in specific coding environments.</li>
<li><strong>Access to the command line</strong>. A command line is a way to write instructions directly to a computer. Data scientists need it for all kinds of things, from install packages (see above) to renaming and moving files, to managing code environments (see 3). On some enterprise IT solutions, access to the command line is blocked. Windows doesn’t have a conventional command line (well, it does, but it uses a different set of commands, and has fewer useful tools).</li>
<li><strong>A way to put code under version control.</strong> It’s best practice for data scientists to put code under version control and it’s absolutely essential for collaboration and audit. In practice, this means an installation of git, the most popular version control tool. You can use git either through an integrated development environment (see 1) or through the command line (see above). Data scientists will also need a central repository service to share code with each other, usually Gitlab or Github</li>
<li><strong>The ability to create efficient stores of data, and to access data programmatically</strong>. It might seem like an absolute basic, but many organisations struggle with where to keep their data. There are infamous examples of public sector operations going wrong because of errors in spreadsheets and the bottom line is that neither data nor computations should be in spreadsheets. Data scientists need to be able to flexibly create stores of data on servers; putting data on a shared network drive does not suffice. For example, most data scientists will need to be able to create databases that their colleagues can also access. They also need to be able to access stored data programmatically (ie through analytical tools such as R and Python). Without efficient read and write options like these, data scientists are going to be slowed right down.</li>
<li><strong>A unix-like computing environment, for example Linux or MacOS.</strong> Microsoft’s Windows operating system has its strong points, (and, despite its cost, it’s a popular solution for public sector IT) but it’s not at all geared toward coding or automation. So much so that some modern data science libraries don’t work at all on Windows. There are a host of reasons behind this. They don’t matter, the point is the same: for data scientists, working on unix-like environments is just going to be a lot easier.</li>
<li><strong>Tooling around reproducibility.</strong> A key tenet of good data science, not to mention good analysis, is that it should be reproducible. Clearly this is important for reproducible analytical pipelines too. We’ve already met a few of the tools that can reproduce code environments (eg poetry and Anaconda), but data scientists also need tools to run pipelines (eg Make and Dagster), and even to reproduce entire operating systems (eg Docker). So these tools need to be available and usable, and a good test of an organisation is whether it can support the deployment of <a href="https://www.docker.com/">Docker</a> images.</li>
<li><strong>Continuous integration / continuous deployment, and the ability to schedule code execution.</strong> If we’re serious about getting data science solutions deployed in operation areas, it’s absolutely critical that data scientists can test code on the fly as part of pull requests, one element of continuous integration. And that, before deployment, a series of checks take place before something goes live. Far from having the ability to do these, many organisations would struggle to have a script that is executed at a regular frequency. Without the ability to schedule events and scripts, what data science can do is going to be severely limited to having a human in the loop—missing out on a lot of the potential benefits.</li>
<li><strong>The cloud.</strong> The reality of data science in 2023 is that much more can be achieved on the cloud than using a single laptop or on an on-prem machine (say a server sat in the basement). For example, if you’re working with data at enormous scales, you probably want to put it in something like Google’s BigQuery. I’m not even sure how you would deploy a machine learning model if not on the cloud—and asking how many models have been deployed to production is another good one for assessing an organisation’s data science maturity. There are emerging cloud services such as <a href="https://cloud.google.com/workstations">Google Cloud Workstation</a> and <a href="https://github.com/features/codespaces">Github Codespaces</a> that make getting started on cloud easier than ever, too. You may hear arguments that cloud isn’t safe. While I’m not sure I buy those arguments given the plausible alternatives, the policy of the UK government is cloud-first anyway—and <a href="https://www.gov.uk/guidance/government-cloud-first-policy">it has been since 2013</a>. Increasingly, the best practice principle is to <em>not</em> code <a href="../../posts/why-you-shouldnt-code/why-you-shouldnt-code.html">directly on your work laptop</a>. So if you encounter an organisation that is entirely on-prem for “security” reasons, I’d really question whether they have a comparative advantage in providing secure computing services and what trade-off with efficiency and functionality they’re implicitly making.</li>
<li><strong>The ability to compile code and install code-adjacent tools</strong>. While Python, R, and SQL do not need compiling in the same way that C++ does, they do sometimes write their own code that needs compiling. The packages that are front-ends to the Bayesian library Stan are great examples of this—even though you write a Python or R code, somewhere in the background code in another language needs to be compiled. Enterprise Windows laptops will block that compilation. Another example would be the popular Python geospatial data science package <a href="https://geopandas.org"><strong>geopandas</strong></a> which has a bunch of dependencies that aren’t in Python at all, but still need to be installed.</li>
</ol>
<p>Perhaps surprisingly, many organisations, even those with data scientists, struggle to provide 1—4.</p>
</section>
<section id="how-to-create-the-right-environment-for-data-science-to-flourish" class="level2">
<h2 class="anchored" data-anchor-id="how-to-create-the-right-environment-for-data-science-to-flourish">How to create the right environment for data science to flourish</h2>
<p>You’re probably interested in how an organisation can effectively achieve the environment that data scientists need to flourish. Looking at the list above, it might seem like a lot. But it’s actually not hard. Basically, an account with AWS (Amazon Web Services), GCP (Google Cloud Platform), or Azure (Microsoft’s cloud platform) will open up all of this. A lot of organisations get that far (though not all).</p>
<p>Where organisations then fall down is putting a barrier that stops data scientists provisioning their own specific services from these cloud providers: instead of giving data scientists a budget and telling them to do what they need to, individual cloud services are often managed by an intermediate layer: usually the IT department and sometimes an external vendor that aims to provide a complete solution.</p>
<p>On the face of it, this model makes sense: IT already provision and manage work laptops (plus all the programmes on them), why shouldn’t they also provision specific cloud services for data scientists? There are a few good reasons I personally don’t believe they should:</p>
<ul>
<li>the time of people in IT departments is usually extremely precious; we can save their time as much as possible by allowing data scientists to self-provision the services they need.</li>
<li>workers in IT departments are technical experts but are unlikely to be huge users of data science tools themselves—leading to a gap between data scientists’ needs and what is provisioned. The example of external vendors thinking data scientists just use Jupyter Notebooks for everything is classic. I have had (extremely helpful) colleagues in IT who were surprised that data scientists needed to use the command line.</li>
<li>having data scientists own the budget and directly provision their own services makes for a tighter feedback loop between costs and services. If that link is broken, people can unwittingly run up huge bills.</li>
<li>having data scientists be able to self-provision means they feel empowered and are faster at getting what they need. I heard of one public sector organisation where it takes two weeks and numerous forms and emails to set up a (basic) SQL database: the result is that no-one sets up a SQL database, even if that would be the best solution. In general, I think it’s a good principle to give experts a brief, a budget, an accountability framework, and then let them get on with the job—and this applies to data scientists here.</li>
<li>work laptops are typically used by all staff, and so they need to be fairly fool proof, which is why IT specialists are needed to manage the fleet of work laptops and to triage any issues. Data scientists are themselves technical experts, so do not actually need this level of service.</li>
<li>by introducing a threshold or barrier to the process (eg you have to use a service desk request to try something), you discourage innovation of the kind that may not work, but just might, if someone could just try something quickly.</li>
</ul>
<p>I’m not talking about data scientists choosing whether it’s GCP or AWS or whoever providing the cloud services here; the IT department or similar doing that makes a lot of sense. But within that outer wrapper, I think it makes much more sense for data scientists to choose the specific services they need without going through a middle layer.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://aeturrell.github.io/markov-wanderer/posts/data-science-maturity/dallas-reedy-H83_BXx3ChY-unsplash.jpg" class="img-fluid figure-img" alt="A heart-shaped cloud floating by."></p>
<figcaption class="figure-caption">Avoid the wrong sort of cloud provision</figcaption>
</figure>
</div>
<p>If you stop to think about it, the model we usually use is the one where enabling functions determine a service provider then let people choose the specific products or services according to their local budget. The Chief Operating Office might choose which firm serves up food in the canteen, but the COO isn’t going to actually come to the canteen and force you to eat the salad; you get to choose within your budget. Similarly, back when organisations actually needed stationary, there was usually a high-level agreement with a supplier but local business areas would then decide what their area needed within their budget. Why should it be different for specific cloud services for experts like data scientists?</p>
<p>Some might say there are risks with this approach. For example, IT specialists are trained in security practices, or can build in security practices, that prevent data leaks or other things that keep Chief Information Officers up at night. I think data scientists could cover this just as well, though I think that we might need more training in it. I would also say that this apparently risky counter-factual is better than where we are right now: we have data leaks and errors because people are using the wrong tools and tech (cf the problems with Excel spreadsheets and people being forced to email data rather than programmatically access it because they cannot create databases or APIs). So I don’t really buy that there’s even a trade-off here. But even if there was we undervalue innovation because risks are tangible and apparent but the improvements we <em>could</em> achieve if we were to make a slightly different trade-off are not. Innovation may still be worth doing.</p>
<p>As noted by <a href="https://www.ft.com/content/5a4cf5b1-56ef-4445-bda3-20b81d1ef752">Tim Harford</a>, it’s quite telling that such a lot of innovation happened in the public sector during the pandemic when the usual rules (and, I must say, barriers) were temporarily suspended. I believe there’s a win-win-win here where data scientists are empowered to innovate and improve public services, budget holders can get accountability from those who are actually spending the money on cloud services, and ever-busy IT departments don’t have to manage cloud services on top of everything else.</p>


</section>

 ]]></description>
  <category>code</category>
  <category>python</category>
  <category>rstats</category>
  <category>data science</category>
  <category>cloud</category>
  <category>work chat</category>
  <category>public sector</category>
  <guid>https://aeturrell.github.io/markov-wanderer/posts/data-science-maturity/data-science-maturity.html</guid>
  <pubDate>Wed, 01 Mar 2023 00:00:00 GMT</pubDate>
  <media:content url="https://aeturrell.github.io/markov-wanderer/posts/data-science-maturity/dallas-reedy-H83_BXx3ChY-unsplash.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>The public sector could be better at managing knowledge ‘data’: what can we do?</title>
  <dc:creator>Arthur Turrell</dc:creator>
  <link>https://aeturrell.github.io/markov-wanderer/posts/managing-public-sector-knowledge/managing-public-sector-knowledge.html</link>
  <description><![CDATA[ 




<p>Who thinks the public sector is good enough at managing its stock of knowledge; the ideas, strategies, processes, and decisions that go into the efficient provision of public goods and services? Not many, I’d wager. Which is odd, given the reputation for bureaucracy! In this post, I look at how good knowledge management could make public sector organisations more efficient and how that change might be effected–at least in the case of knowledge that is digitally recorded (aka knowledge data).</p>
<p>There are lots of reasons for poor knowledge management. The churn rate of staff in the public sector is high. This is anecdotal but it seems like the holder of most public sector jobs in the UK turns over every 18–24 months or so (tenures may be longer outside central government), taking with them a huge amount of knowledge about how to do the job. And what knowledge has been built-up in that time is very rarely transmitted by a handover note. There are also frequent enough re-organisations that the role may change, meaning a new role is a combination of several previous ones that, ideally, a newly hired member of staff would learn about by drawing on the experiences of multiple former staff.</p>
<p>Even if everyone writes down every little piece of information about their role, it can be hard for subsequent staff doing similar jobs to actually <em>find</em> that information. Some public sector organisations have no way of storing the stock of knowledge as data–they work entirely on flow, with emails carrying files. Others use a shared file system (aka a network drive) to store documents and, usually, it’s hard to properly search these for relevant documents–anyone who has used Window’s file search function over a network will know exactly what I mean. If you’re lucky enough to have a solution in place, that solution may be very limited too: a few organisations use Microsoft’s Sharepoint, but the filtering and search options are byzantine.</p>
<p>Perhaps most worryingly of all, there just isn’t always the bandwidth or culture behind good record managment. The public sector organisations of many countries have been under pressure to do more with less for a long time, and it’s very easy for “flow” to crowd out “stock”: that is, keeping good records and managing the stock of knowledge suffers because everyone is fighting the latest crisis or otherwise putting out 1001 small fires. Culturally, meetings, which are by their very nature ephemeral, are the primary unit of decision-making, idea discussion, and strategy making.</p>
<p>This is not to say that public sector organisations do not come up with lengthy strategies–there are numerous examples of those. But they tend to be outward looking and paint on a wide canvas. It’s the smaller, internal workings and ideas that don’t get recorded sufficiently to be later searchable and indeed (re-)usable.</p>
<section id="why-not-managing-the-stock-of-knowledge-data-makes-the-public-sector-less-effective" class="level2">
<h2 class="anchored" data-anchor-id="why-not-managing-the-stock-of-knowledge-data-makes-the-public-sector-less-effective">Why not managing the stock of knowledge data makes the public sector less effective</h2>
<p>There’s always a balance, but failing to manage the stock of knowledge data well is likely to lead to organisations being far less effective. To steal a phrase from history, those who fail to learn from the past are doomed to repeat its mistakes.</p>
<p>The problems facing public sector organisations that are structural are not easily remedied. Someone arriving in a new role might wonder why such and such a thing has not been tried, and plunge into trying out solutions. But, because of the stubbornness of the problem and the lack of record-keeping, it’s extremely likely that similar solutions have been tried before–so, at best, the new person isn’t able to build on where their predeccesors got to and, at worst, what they are pursuing is a complete waste of time.</p>
<p>It’s not just about steering away from what’s been tried (and has failed) before though; by having an easily searchable record of what was thought, reasoned, and decided, the possibility that someone can come along and synthesise a better solution is greatly raised. And even for the times when everyone has agreed a way forward, a new hire who can easily see what has gone before is going to be more effective more quickly. No-one should be having to start from scratch.</p>
<p>You might think that it would be unusual for someone to start from scratch. It isn’t. There’s a great story I’ve heard about a Civil Servant who had spent many years in a single large and important department. Every time there was a sudden desire for a policy that did this or that, instead of working up something new, he would simply walk over to his filing cabinet, flick through to the right section, and pull out all of the documents detailing the last time the policy had been discussed or even tried. We don’t use filing cabinets anymore, but we do still benefit when we can avoid repeating effort, so we must create digital filing cabinets from which we can pull out ideas whose time is right.</p>
<p>I also believe that simply knowing that every word you put down in a note is going to be searchable and available for posterity will encourage clarity of thought too. Any writing that’s going to a wider audience forces you to think more about how it will be read, and what to make clear. It may make you question whether what you’re doing is even the right priority.</p>
<p>There’s another nice efficiency that can be had from seeing the sweep of ideas that, say, an individual has laid out before: lancing BS. I’m sorry to say it, but, in large organisations, you do sometimes come across those who talk a lot of gibberish-filled nonsense while also delivering very little and, worst of all, wasting everyone else’s time. The vast majority of people are not like this, but there are some. They obfuscate and complicate, slowing down delivery. You have to work so hard to understand them, most sane people give up and move on–which is also how these particular individuals get away with it. Because we’re all talking in jargon a lot of the time, these tactics can be hard to spot straight away–but being able to search through the recorded content that a person has created is a quick way to find out if they are simply a convincing waffle-generator or someone trying to make progress happen.</p>
<p>Finally, there are often times when the wider public need to peek into the internal workings of the state, to understand how a particular decision was taken (or not taken), who was involved, and whether the risks were known. The UK’s Coronavirus Enquiry is a good example. Decent record keeping can be a huge boon for such public scrutiny when it happens–everyone will get clearer answers faster. (Of course, in the UK, constructive ambiguity has long been used to help fudge a way into a good outcome but I have no fear that this can continue whether good records are kept and are searchable or not.) The public will rightly expect that good records are being kept.</p>
</section>
<section id="what-can-we-do-about-it" class="level2">
<h2 class="anchored" data-anchor-id="what-can-we-do-about-it">What can we do about it?</h2>
<p>Changing culture is always about leadership and setting norms–that one is obvious. And creating the bandwidth for record-keeping may also be partly cultural. We probably all need to argue that the benefits outweigh the costs too (if we agree that they do). You could write entire blog posts about these two issues.</p>
<p>But I’m going to focus on the challenges around knowledge <em>data</em> that can be solved technology and infrastructure.</p>
<p>So, here’s what I think might help.</p>
<section id="make-sure-the-flow-of-information-is-good" class="level3">
<h3 class="anchored" data-anchor-id="make-sure-the-flow-of-information-is-good">Make sure the flow of information is good</h3>
<p>“Garbage in, garbage out,” goes the saying. If we’re not putting the right records in, we’re unlikely to benefit from them when we look at them again later.</p>
<p>Overall, I’m less worried about this because (as noted right at the start), large organisations do tend to be bureaucratic and are in general good at creating boards, taking minutes, and having all of the other accoutrements that come with a good secretariat. But it’s important that this infrastructure does exist everywhere that a large group (say a board) are coming together to hear information and make decisions. Papers presented should be informative and have clear recommendations, and of course any decisions and salient comments should be recorded.</p>
<p>Clear records can also help show which meetings are effective and which are not worth the time they take.</p>
</section>
<section id="notes-should-be-the-default-with-microsoft-powerpoint-presentations-only-by-exception" class="level3">
<h3 class="anchored" data-anchor-id="notes-should-be-the-default-with-microsoft-powerpoint-presentations-only-by-exception">“Notes” should be the default, with (Microsoft Powerpoint) presentations only by exception</h3>
<p>Notes–usually documents of up to 6 pages that can have figures in but are written in full sentences–should be the default way to capture ideas, strategies, processes, and decisions.</p>
<p>At the risk of over-generalising, presentations tend to hide woolly thinking. Writing notes in sentences and paragraphs (bullets allowed) forces more clarity. Of course one can obfuscate in prose too, but it’s harder to hide that obfuscation behind full sentences than it is in a shiny presentation (or, let’s be honest, a bad presentation, which most of them are). I know of one large, important public sector organisation in particular that is absolutely addicted to Microsoft Powerpoint slides–but fills them to the brim with text.</p>
<p>Sometimes elected policymakers will prefer a snazzy slide deck. That’s fine; if you’re in the public sector, you’re there to serve elected officials. But there’s a whole ton of work that goes on that <em>doesn’t</em> go to elected representatives that could be better articulated as a note. And, even if you’re ultimately going to put a slide deck together, I bet that it’s a <em>lot</em> better for having been born of a note first.</p>
<p>Amazon has done some interesting thinking on this that the public sector (and any large organisation) could potentially learn from. Jeff Bezos described it as <a href="https://www.cnbc.com/2019/10/14/jeff-bezos-this-is-the-smartest-thing-we-ever-did-at-amazon.html">the smartest thing they ever did at Amazon</a>. Amazon banned slide decks altogether! This is too far, for a few reasons, but it shows just how seriously they take the time-wasting Powerpoint problem to be. They replaced them with “Memos”, essentially what I’ve called “Notes”.</p>
<p>Perhaps the most interesting addition that the Amazon model brings to what I’ve already suggested here is that meetings begin with a quiet period of around 30 minutes in which participants read the memo before engaging in discussion. I think this is a terrific idea, with big potential benefits. If you’re a senior leader in the public sector then, well, your diary is going to be <em>full</em>. Somehow, you’re expected to squeeze in reading important documents around a bulging-at-the-seams schedule–on most days, it’s going to be gone 11pm before you get to it. I can’t tell you how many meetings I’ve been to where many people, including myself, simply haven’t had time to read the paper, note, or memo ahead of time. That can lead to a poorer discussion, and poorer outcomes. Creating time within meetings to read memos ensures–quite literally–that everyone is on the same page, which will likely lead to <em>better</em> outcomes.</p>
<p>Another feature of Amazon-like memo models is that the participants in the decision that was reached co-sign the document and record why a particular decision was reached. This is really important for accountability and moving forward with clear agreement. (Verbal agreements are not as binding as you might hope, especially if people haven’t actually read the paper–encouraging people to put their name to a decision gives them more skin in the game and gives them incentives to ensure that it is a good decision.)</p>
</section>
<section id="knowledge-data-should-be-findable-accessible-interoperable-and-re-usable" class="level3">
<h3 class="anchored" data-anchor-id="knowledge-data-should-be-findable-accessible-interoperable-and-re-usable">Knowledge data should be findable, accessible, interoperable, and re-usable</h3>
<p>An organisation’s stock of knowledge should follow the FAIR principles: findable, accessible, interoperable, and re-usable. We’ll look at each of these and see how they suggest a database of Markdown documents as a likely back-end solution (a solution that happens to be free).</p>
<section id="fair-requirements" class="level4">
<h4 class="anchored" data-anchor-id="fair-requirements">FAIR requirements</h4>
<p>All of those benefits that come with standing on the shoulders of giants will only be available if knowledge is <strong>findable</strong>. In practice, this means ensuring staff have powerful search capabilities on hand. Sharepoint, with its very limited search capabilities (and its lack of full support for file types not covered by Microsoft Office products), will not do. Staff must be able to look for notes or documents within a certain date range. They need to be able to find all documents with specific words or phrases in. They should be able to browse documents using (preferably automatically generated) tags.</p>
<p>Of course, these documents must be <strong>accessible</strong>, both today and in the future. This means that they should be in a database that can be accessed easily from their computer, and which can be queried in milliseconds. There should be backups and system redundancy.</p>
<p><strong>Interoperability</strong> is more important than it first appears. One public sector organisation I know of had terrible trouble because many of its documents were written in a propriety file format for a piece of software that has fallen out of favour. For new staff to use them, either the documents would have had to be converted (with potential information loss on the way), or the software contract renewed at considerable cost–even though no-one would be using it to write new documents! I put the Microsoft Office suite of file formats in this bucket as, to get the most from those types of files (eg .docx, .pptx), you really need to purchase Microsoft’s proprietary software. As an example of this lack of interoperability, there is no Microsoft Office support for Linux, the popular free and open source operating system. Interoperability prevents vendor lock-in too.</p>
<p><strong>Re-usability</strong> is about people being able to dive in to the historical archive, grab what they need, and put it to work on a contemporary project. This rules out anything that doesn’t allow for easy copy and paste. So PDFs and similar are out. PDFs do have their uses <em>because</em> they do not change once created, but we don’t want to tap into that here. Re-usability once again pushes us toward a solution that looks a lot like plain text files because–no matter what whizzy developments there are in the future–it’s extremely likely that people will still be able to copy and paste from plain text files.<sup>1</sup> You might think this causes a problem for slide decks, in the cases where they are warranted: it doesn’t. You can write slide decks in plain text files too, using Markdown. To make images re-usable, you will want to either provide reproducible code to recreate a particular image or figure or to include the image as a separate asset. And, if your stock of knowledge is just plain text files and some image files, moving your entire stock of knowledge to a new system is as easy as copying and pasting everything.</p>
<p>It would also be nice if the technology behind all of this was free and open source. Note that free software does <em>not</em> mean totally free–you always need someone to maintain the software and database. But you’d need that with proprietary software too, so there’s still potentially a big pecuniary cost saving here if the tech is free.</p>
</section>
</section>
<section id="solutions-to-the-knowledge-data-management-problem" class="level3">
<h3 class="anchored" data-anchor-id="solutions-to-the-knowledge-data-management-problem">Solutions to the knowledge data management problem</h3>
<p>Taking all of these needs together, the solution looks a lot like a searchable database of plain text files with a friendly front-end. The most obvious candidate file format is <a href="https://en.wikipedia.org/wiki/Markdown">Markdown</a>. Markdown is written in plain text, which will never go out of style. It supports the inclusion of tables (written in plain text) and images provided as separate files, which helps with re-usability. Plain text Markdown files can also be used to generate slide decks, so this approach has that output type covered too. And of course Markdown is completely free, there are plenty of free editors for it, and almost all of the tooling you might need around it is free too. A slight variant on Markdown, Quarto Markdown, can support executable code chunks too–but don’t worry, it’s still all written in plain text.</p>
<p>Note that the solution <em>doesn’t</em> look like Google docs or Microsoft Office. These mix images and text. Their formats may change over time. They are proprietary. It’s not easy to throw them into a really flexible database (at least not with their current forms). There is vendor lock-in as it’s not easy to move them to a new system.</p>
<p>Markdown seems great, then, but there are some challenges with it that we should be aware of. We’ll examine the major ones:</p>
<ol type="1">
<li>editing Markdown documents will be alien to many, as will the way what you put in doesn’t look like you get out (ie it is not a <a href="https://en.wikipedia.org/wiki/WYSIWYG">WYSIWYG approach</a> to text editing). Today, one of the best Markdown editors is Visual Studio Code, which is going to be overwhelming for staff unfamiliar with coding because it does a <em>lot</em> more than just edit Markdown and is really geared to coders. <strong>There needs to be a very friendly way to edit Markdown for people unfamiliar with coding.</strong></li>
<li>one of the most useful aspects of the Microsoft Office suite, particularly the Powerpoint and Word products relevant to this blog post, is that you can collaborate on the same document (including with tracked changes). Git is one option for sharing and collaboration–and coders would be fine with this, but git from the command line is going to be too complex for any staff not <em>au fait</em> with coding. Furthermore, when editing a document with colleagues, the ability to provide comments (not in the doc itself) is incredibly useful. <strong>There needs to be a way to collaboratively edit documents and track changes in Markdown, possibly in real time, and ideally with the ability to provide comments.</strong> Ideally this should come with a way to set granular permissions.</li>
<li><strong>there needs to be a searchable database of the existing stock of Markdown files</strong> and, preferably, a way to launch complex queries on them.</li>
</ol>
<p>Under 1., there are a variety of paid and free markdown editors available. Perhaps I’m too pessimistic about people using Visual Studio Code to write Markdown. <a href="https://ghostwriter.kde.org/">Ghostwriter</a> is a cross-platform, free and open source alternative that is solely focused on Markdown so may be more user friendly. Other free and open source options include <a href="https://remarkableapp.github.io/">remarkable</a> and <a href="https://abricotine.brrd.fr/">abricotine</a>. There are a couple of more snazzy looking paid versions, including <a href="https://typora.io/">typora</a> and <a href="https://obsidian.md/">Obsidian</a> (personal use is free, but commercial is not). One of these solutions seems like it would roundly knock out 1.</p>
<p>It’s likely that 2 and 3 could be solved together with subscription to a proprietary service. <a href="https://hackmd.io/">HackMD</a> is a service that provides “real-time collaboration on markdown documents” that includes “granular note permission settings and private image storage”. It includes an editor (which would also help with 1) <em>and</em> it provides an ability to comment on docs too. It also supports tags that can be added via YAML header data–helping with long-term usability. It looks like a really good solution to 2. and 1., but like it does a bit less than would be ideal for 3; there is a free text search but it’s a “prime” feature and it seems like the other filters might be limited. It also seems like all the notes are in the vendor’s cloud, which makes building a custom search solution, and running compilation to other derivative file types (eg markdown to pdf, quarto markdown to slides), difficult–though there’s an ability to sync with Github. An alternative to HackMD is <a href="https://obsidian.md/">Obsidian</a>, but it seems less feature rich–it doesn’t have real-time collaboration (or so it seems) and it introduces non-standard syntax, which is a threat to interoperability. Overall, HackMD seems like the best solution to 2.</p>
<p>While a service like HackMD can help with 3., it’s interesting to ask what else is out there that would work on a big ol’ pile of markdown (and image) data. Ideally, we would want a flexible, fast, comprehensive search on a bunch of markdown files and images. The free, open source version of <a href="https://www.elastic.co/elasticsearch/">ElasticSearch</a> would be one potential solution–though note that the vendors are <em>very</em> keen for you to use their paid hosting service. An alternative that is also geared toward text files is <a href="https://lucene.apache.org/core/">Apache Lucene</a>. Both of these would have to be hosted somewhere. One nice aspect of these purpose-built seach tools is that they can store logs of what people looked for, itself of use to the organisation. The query functionality of tools like Apache Lucene and ElasticSearch looks to be pretty good too. For example, <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/sql-search-api.html">ElasticSearch supports a SQL-like API</a> and <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html">other complex query types</a>. The most important aspect of 3 would be addressed by both of these open source solutions.</p>
<p>As an aside, advanced users could also pull out data more systematically from knowledge stored in a series of Markdown files. In that case, advanced users might pop everything into a tabular structure (eg a parquet file) and then query all rows with a high performance SQL query engine like <a href="https://duckdb.org/">DuckDB</a>. Although working with text is always going to be tricky, DuckDB is <a href="https://h2oai.github.io/db-benchmark/">astonishingly fast</a> (check out <a href="https://www.pola.rs/">polars</a> too though). There is an extension for <a href="https://duckdb.org/docs/extensions/full_text_search.html">full text search</a> for DuckDB.</p>
<p>If you want to get really fancy, you could also run something that would find connections between documents, displaying them as a graph. This could be useful to find inconsistencies, or links, in the way that topics are being dealt with across the organisation.</p>
</section>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>Good management of knowledge data is important to the success and efficiency of public sector organisations. The ideal is that all of the ideas, strategies, processes, and decisions relevant to an organisation and generated by its staff are available to search and to re-use in perpetuity. Although there are doubtless pros and cons to every approach, using “notes” (and not slide decks) as the unit of account for an organisation’s recorded knowledge is a very strong option. And storing those notes in a cloud-hosted database of Markdown files (plus assets, like images, that are used by those Markdown files) will have benefits such as avoiding vendor lock-in, ensuring content is re-usable far into the future, and ensuring that knowledge is easily searchable.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Though you do need to be careful about something called encoding. The TL;DR is that all text should be encoded as UTF-8.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>economics</category>
  <category>productivity</category>
  <category>public sector</category>
  <guid>https://aeturrell.github.io/markov-wanderer/posts/managing-public-sector-knowledge/managing-public-sector-knowledge.html</guid>
  <pubDate>Wed, 08 Feb 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Why you shouldn’t code on your work laptop</title>
  <dc:creator>Arthur Turrell</dc:creator>
  <link>https://aeturrell.github.io/markov-wanderer/posts/why-you-shouldnt-code/why-you-shouldnt-code.html</link>
  <description><![CDATA[ 




<p>“Nobody ever got fired for buying Microsoft” goes an old saying. Actually, it was probably first said in the 1980s in reference to IBM <span class="citation" data-cites="1983school">(<em>School Microcomputing Bulletin</em> 1983)</span>, but the meaning remains the same: as the Chief Technology Officer, or similar, you’re not going to get in trouble for buying the boring old thing that everyone else is buying. (But you <em>might</em> get in trouble if you bought something that many of your staff <em>weren’t</em> comfortable with.) The attraction to what is considered safe, known, and widely-used is especially strong for large public institutions because they tend to be risk averse, subject to intense scrutiny, and responsible for statutatory processes that simply <em>cannot</em> go wrong.</p>
<section id="enterprise-it-can-sacrifice-productivity-for-safety" class="level2">
<h2 class="anchored" data-anchor-id="enterprise-it-can-sacrifice-productivity-for-safety">Enterprise IT can sacrifice productivity for safety</h2>
<p>There’s a trade-off though; when it comes to software and hardware, what is widely used and known may not be at the cutting-edge and, if it’s made endlessly safe, it can actively stifle innovation. To create, at least, a sense of safety, the “nobody ever got fired for buying …” type of software tends to be locked down. In the case of Microsoft’s popular operating system, Windows, which is endemic in large organisations, you may not even be able to change the screen saver: large, otherwise proud organisations humbly display whatever screensaver Microsoft has deemed appropriate rather than anything to do with the firm. Of course, screensavers don’t matter much: it’s when you want to automate the start-up of the computer, or edit a particular type of file, or create a reproducible analytical pipeline, that the locked-down nature of enterprise IT starts to preserve safety at the cost of producitivity. It isn’t just control either; the quality of laptop needed by different employees will vary enormously, but enterprise IT will often see everyone landed with the same kit.</p>
<p>Why is this such a problem in large organisations? You can’t imagine a tech start-up stopping its staff from installing whatever is needed to get the job done. The assumption that CTOs have made is that giving <em>all</em> users the power to change their screensaver or execute scripts will mean someone will eventually harm the organisation (for example, through unintentionally deleting someone else’s data or releasing something publicly that should have been private). Or perhaps it’s just that enterprise IT doesn’t give the fine-grained control needed to empower staff to be productive—perhaps it’s that the systems that CTOs of large organisations can buy are either locked down, or they are not; there’s no customisability. In any case, the fact that large organisations harbour a very large and heterogeneous set of IT users is behind the need for policies and processes that stop people installing the software they need or changing settings to get things done. One size fits all, and the system is crafted around minimising risk rather than maximising productivity. What makes the trade-off much harder is that safety breaches and computing accidents are very countable and discoverable, but lost productivity from innovations that didn’t happen are not.</p>
<p>The locked down nature of enterprise IT presents a real challenge for anyone trying to make their organisation more efficient using data science (or any other innovation for that matter). Want to deploy a dashboard? Hard. Want to deploy a machine learning model? Very hard. Want to ensure everyone has the same code environment for a training course? Tricky, especially if you’ve got people who have different ‘home’ IT because they’re drawn from different units from across the enterprise, each with their own variant of the IT. Even downloading the software to build a machine learning model is nigh on impossible in a locked-down Windows ecosystem: installing Python is often blocked or requires a call to a service desk; installing packages is often blocked and, even when a package delivery solution is in place, it may not work as intended; some packages are frequently blocked from running because they require on-the-fly compilation (<a href="https://www.pymc.io">PyMC</a>, for example); and then many frameworks do not work on Windows itself. (Windows Subsystem for Linux is not a silver bullet for these problems.) Even the basic automation of scripts and so on is more tricky on Windows, assuming that you are able to run scripts. As the final cherry on the cake, Microsoft Outlook blocks <code>.py</code> files as they might be harmful (though please put your code under version control rather than emailing it around).</p>
<p>You might think I’m picking on Microsoft here. I am. Because, even though they make some fantastic software (Visual Studio Code is genuinely incredible), they are so dominant in the marketplace. A typical day at a large firm will often involve logging on to a Microsoft Windows computer, opening up Microsoft Outlook to read emails, having calls on Microsoft Teams, surfing the internet via Microsoft Edge, writing a note on Microsoft Word, creating a slide deck on Microsoft Powerpoint, taking notes on Microsoft OneNote, entering a discussion on Microsoft’s Yammer network, and sharing files on the dreaded Microsoft Sharepoint. I simply do not believe that Microsoft produces the best tools for email, calendar, operating system, word processing, data analysis, file sharing, internet browsing, presentations, community discussion, <em>and</em> video conferencing. (Do you think there might be a competition problem here?) I’ll allow that OneNote is pretty good though.</p>
<p>You might also think that enterprise IT solutions mean that everything that works on one computer will work on another. You’d be wrong! Updates are applied at different times for different people, hardware is rolled out gradually rather than all at once, and people can still change their own systems through choosing to install extras from a provided ‘Software Centre’. So, for all that enterprise IT is controlled, it still suffers from the “it works on my computer” problem.</p>
</section>
<section id="from-problems-to-solutions" class="level2">
<h2 class="anchored" data-anchor-id="from-problems-to-solutions">From problems to solutions</h2>
<p>There are a lot of issues to sort here, and something as drastic as competition policy may be needed to unleash productivity from better software for most firms. But I do think there is a potential solution for data scientists and people working on automation, and one that the CTO and CDO can happily support.</p>
<p>The problem we’re really trying to solve for data scientists who want to improve their organisation is: how can we run the latest, greatest packages on the same infrastructure without dealing with locked-down IT? And while also retaining as much of the safety that large organisations hanker for? Switching everyone to Linux might help, sure; it could save some money as the operating system is free (though human support isn’t), and there’s evidence that some firms using (free versions of) Linux are more productive <span class="citation" data-cites="nagle2019open">(Nagle 2019)</span>. But this would require organisation-level change and mass upskilling, and is unlikely to happen due to proprietary software lock-in. Fortunately, there’s a simpler way.</p>
<p>My proposal is that we should simply stop coding on work laptops. Just stop. It is simply too difficult to get enterprise IT Windows laptops that are locked down to do everything we really need to improve an organisation while still satisfying the security constraints.</p>
</section>
<section id="where-can-i-code" class="level2">
<h2 class="anchored" data-anchor-id="where-can-i-code">Where <em>can</em> I code?</h2>
<p>So, if I’m saying do not code on your work Windows laptop, where <em>should</em> you code? The answer, in short, is the cloud. At its best, this provides an isolated, reproducible, environment. It completely solves the “it doesn’t work on my computer” problem. It solves the operating system problem too, because cloud computing can be on any operating system—including ones that are specified in code (“infrastructure as code”). It better integrates with (and even encourages) version control and Continuous Integration and Continuous Deployment (CI/CD). Best of all, these isolated environments aren’t subject to the vagaries of enterprise IT because they are separate, and accessed (typically) only through a browser window.</p>
<p>I want to be clear: this does not mean that doing your coding via cloud computing is unsafe. It’s almost certainly safer, and in many ways: whatever you are doing on the cloud should not go anywhere near your email application. If your IT department has cloud expertise, they can do things that will greatly reduce the risk of any kind of cloud-based data leak. Best practice for sensitive data is considered to be holding them in a secure cloud environment anyway. And, with asset-level control, you can grant access only to the users who need it—quite a contrast to having a writeable file on a network drive (yes, this still happens in 2023). Of course, someone actively trying to do harm still can, but this is true on any system.</p>
<p>There are a number of services now out there that provide these reproducible coding environments at low or even no cost, depending on the number of hours used per month. The big players are Google Cloud Compute, Amazon Web Services, and Microsoft Azure. These require a bit more expertise to set up, and typically have to be used with buy-in and help from architecture experts. But there are increasingly off the shelf reproducible code environments that you can use for all but very sensitive and or confidential data. These include:</p>
<ul>
<li><a href="https://github.com/features/codespaces">Github Codespaces</a>, which has a free tier, uses Visual Studio Code by default, and can be accessed in browser or via Visual Studio Code desktop. It works at the level of a GitHub repo so has particularly good integration with version control.</li>
<li><a href="https://www.gitpod.io/">Gitpod</a>, which has a free tier, uses Visual Studio Code by default, and can be accessed in browser or via Visual Studio Code desktop.</li>
<li><a href="https://cloud.google.com/workstations">Google Cloud Workstations</a>, which takes more set up and uses Code-OSS (the open source version of Visual Studio Code).</li>
</ul>
<p>Github Codespaces is probably the easiest service to access if your IT department has no real expertise in cloud computing. It only requires that each person has a GitHub account, that your IT department has unblocked Github’s website, and that you have some billing in place if you go over the free tier hours. Of course, Github is actually owned by Microsoft, and your firm is probably already buying Microsoft (“Nobody ever got fired for buying Microsoft”!) so all you need to do is to convince IT to pay for an extra service from a firm they already have a relationship with. (If you’re lucky, your IT department will already know a lot about cloud computing and have arranged empowered access to it for you—but a large number of firms are unlikely to be able to provide this.)</p>
<p>Now, you will still need to think carefully about where any data you are using will live and how you get it into your codespace (or similar). But having a (secure) connection to some sort of cloud storage bucket is a good default if there isn’t an API around that you can consume directly.</p>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>In short, if you’re looking to get a reproducible, working code environment that is consistent across users and you have an IT department that doesn’t have much expertise in coding or cloud computing, my recommendation is that you:</p>
<ul>
<li>do not try and get your IT dept to put analytical programming languages on work laptops;</li>
<li>instead, get them to unblock GitHub and have any users create an account on it (with billing if necessary);</li>
<li>use GitHub for version control; and</li>
<li>use <a href="https://github.com/features/codespaces">Github Codespaces</a> for your coding environment (with optional docker containers for reproducible environments)</li>
</ul>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent">
<div id="ref-nagle2019open" class="csl-entry">
Nagle, Frank. 2019. <span>“Open Source Software and Firm Productivity.”</span> <em>Management Science</em> 65 (3): 1191–1215.
</div>
<div id="ref-1983school" class="csl-entry">
<em>School Microcomputing Bulletin</em>. 1983. v. 2-5. Learning Publications. <a href="https://books.google.co.uk/books?id=hVdRAAAAYAAJ">https://books.google.co.uk/books?id=hVdRAAAAYAAJ</a>.
</div>
</div></section></div> ]]></description>
  <category>code</category>
  <category>open-source</category>
  <category>cloud</category>
  <category>data science</category>
  <category>work chat</category>
  <guid>https://aeturrell.github.io/markov-wanderer/posts/why-you-shouldnt-code/why-you-shouldnt-code.html</guid>
  <pubDate>Fri, 13 Jan 2023 00:00:00 GMT</pubDate>
  <media:content url="https://aeturrell.github.io/markov-wanderer/posts/why-you-shouldnt-code/elisa-ventur-bmJAXAz6ads-unsplash.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>In praise of APIs (application programming interfaces)</title>
  <dc:creator>Arthur Turrell</dc:creator>
  <link>https://aeturrell.github.io/markov-wanderer/posts/the-prize-with-apis/the-prize-with-apis.html</link>
  <description><![CDATA[ 




<p>In this blog, I look at some of reasons why APIs are such a great way to share data.</p>
<p>APIs make it possible for users to plug data directly into software, dashboards, websites, reports, and analysis in a consistent, machine readable format that favours automation. They are the best practice way to share data between expert users and organisations, and are an important intermediary for enabling data to reach a wider audience—giving a path to significantly increased impact for data that anyone has decided to share. Leading statistical institutes provide their data via APIs, and UK government departments increasingly <a href="https://www.api.gov.uk/#uk-government-apis">share</a> data through APIs too.</p>
<p>In a previous post, I looked at one API in particular—the <a href="../../posts/ons-api/index.html">ONS API</a>.</p>
<section id="what-is-an-api" class="level2">
<h2 class="anchored" data-anchor-id="what-is-an-api">What is an API?</h2>
<p>APIs, or application programming interfaces, are a set of rules and protocols that enable communication between different software systems. They allow different systems to exchange data and functionality programmatically. They are programming language agnostic, and sometimes make data available in several formats.</p>
<p>In the context of data and statistics, APIs are particularly useful because they allow organisations to access and use data from a variety of sources in a consistent and controlled manner. For example, a government department might wish to use APIs to reproducibly and reliably access data from a national statistical office.</p>
<p>It’s easiest to show how APIs work with an example. Let’s pull down CO2 emissions per capita by country from the World Bank using the <a href="https://pandas-datareader.readthedocs.io/"><strong>pandas_datareader</strong></a> package in Python. <strong>pandas_datareader</strong> provides convenient access to a wide range of APIs including those serving up data from the <a href="https://fred.stlouisfed.org/docs/api/fred/">US Federal Reserve (FRED)</a>, the <a href="https://datahelpdesk.worldbank.org/knowledgebase/articles/889392-about-the-indicators-api-documentation">World Bank</a>, the <a href="https://data.oecd.org/api/">OECD</a>, the <a href="https://www.bankofcanada.ca/valet/docs">Bank of Canada</a>, <a href="https://ec.europa.eu/eurostat/data/web-services">Eurostat</a>, and more.</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> textwrap</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pandas_datareader <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> wb</span>
<span id="cb1-3"></span>
<span id="cb1-4">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> wb.download(                              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># download the data from the world bank</span></span>
<span id="cb1-5">    indicator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EN.ATM.CO2E.PC"</span>,                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># indicator code</span></span>
<span id="cb1-6">    country<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"US"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CHN"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IND"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Z4"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Z7"</span>],  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># country codes</span></span>
<span id="cb1-7">    start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2019</span>,                                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># start year</span></span>
<span id="cb1-8">    end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2019</span>,                                  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># end year</span></span>
<span id="cb1-9">)</span>
<span id="cb1-10">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.reset_index()                          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove country as index</span></span>
<span id="cb1-11">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x: textwrap.fill(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wrap long names</span></span>
<span id="cb1-12">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.sort_values(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EN.ATM.CO2E.PC"</span>)          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># re-order</span></span>
<span id="cb1-13">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">country</th>
<th data-quarto-table-cell-role="th">year</th>
<th data-quarto-table-cell-role="th">EN.ATM.CO2E.PC</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">3</td>
<td>India</td>
<td>2019</td>
<td>1.797620</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>East Asia\n&amp; Pacific</td>
<td>2019</td>
<td>6.497258</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Europe &amp;\nCentral\nAsia</td>
<td>2019</td>
<td>6.576734</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">0</td>
<td>China</td>
<td>2019</td>
<td>7.605937</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>United\nStates</td>
<td>2019</td>
<td>14.673411</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>There are several features of note:</p>
<ul>
<li>we only pulled down the data we needed</li>
<li>we were able to get data straight into our analytical tool (here, Python)</li>
<li>getting the data for the period we want is as simple as changing the year</li>
</ul>
<p>Having downloaded the data, let’s now plot it:</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb2-2"></span>
<span id="cb2-3">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb2-4">sns.barplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country"</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EN.ATM.CO2E.PC"</span>, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df.reset_index(), ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax)</span>
<span id="cb2-5">ax.set_title(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"CO$_2$ (metric tons per capita)"</span>, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span>)</span>
<span id="cb2-6">plt.suptitle(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The USA leads the world on per-capita emissions"</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.01</span>)</span>
<span id="cb2-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> key, spine <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> ax.spines.items():</span>
<span id="cb2-8">    spine.set_visible(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb2-9">ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb2-10">ax.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb2-11">ax.yaxis.tick_right()</span>
<span id="cb2-12">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://aeturrell.github.io/markov-wanderer/posts/the-prize-with-apis/the-prize-with-apis_files/figure-html/cell-4-output-1.svg" class="img-fluid"></p>
</div>
</div>
<p>This shows how data can be pulled straight down into analytical tools, reports, forecasts, and so on; any output or analysis you can think of.</p>
</section>
<section id="why-are-apis-brilliant" class="level2">
<h2 class="anchored" data-anchor-id="why-are-apis-brilliant">Why are APIs brilliant?</h2>
<p>Programmatic access to data has a number of clear benefits:</p>
<ul>
<li>Data are provided in a consistent, machine readable format—this can save hours of work for each file and enables automation</li>
<li>users can build other tools on top of APIs and APIs integrate directly into analytical tools</li>
<li>APIs are accessible by a range of open source (and free) software</li>
<li>APIs can provide only the data that the user needs (they enable filtering)</li>
<li>APIs can provide a data provider with more granular information on what data have been requested than a bulk download can</li>
<li>an organisation can provide data to itself (eg across teams) without one team having to bother another; teams within the organisation can also consume the API</li>
<li>the date of the ingestion of data can be easily including in the metadata that the API send—this is really useful to anyone working with real-time data applications (eg nowcasting) or if a mistake is subsequently found in a series</li>
<li>using APIs to serve data encourages the use of consistent taxonomies (eg country names) that will ultimately aid end-users by enabling them to more easily link data</li>
<li>secure APIs allow organisations to share sensitive data in a programmatic way and, while no method of data transfer can ever be 100% secure, APIs that follow the best practices for security are thought to involve less risk than emailing files</li>
</ul>
<p>Directly integrating with analytical tools has a number of benefits for auditability and accountability given that analytical tools can be used with code, and code can be put under version control—which means to-the-second, to-the-line auditing of who changed what when and easy-to-reverse changes should errors be discovered.</p>
<p>Additionally, when data are shared only as files, it’s so often as Microsoft Excel files, which can go wrong in some pretty serious ways:</p>
<ul>
<li>Excel is a proprietary format that is harder to use without buying software from a particular vendor</li>
<li>Excel mixes analysis and data storage (which is bad practice)</li>
<li>Excel changes data</li>
<li>Excel is limited in storage size and file-types it can handle</li>
<li>Excel is not easily auditable (code-first approaches allow for to-the-second, to-the-line audit).</li>
</ul>
<p>That said, you can improve the provision of data through Excel by making it machine readable or by making it consistent, perhaps making use of the excellent <a href="https://gptables.readthedocs.io/">GPTables</a> (good practice tables) package created by the UK’s Office for National Statistics (full disclosure: I didn’t work on this package, but some colleagues did).</p>
<p>It’s also important to note that providing a downloadable file and an API is not mutually exclusive—to serve the widest range of users, it’s a good idea to provide both. But it’s important that they feed off the same underlying database in the same way and so are 100% consistent.</p>
<p>The main downside of APIs is that they are more difficult to use for all but expert users (though this category has expanded in recent years as the world becomes more code-savvy and it now arguably includes everyone from academics to data journalists to data enthusiasts). This is why it’s important to make APIs available <em>alongside</em> other ways to access the data.</p>
<p>To lower the barrier to using an API, there are a couple of options. They can be integrated into easier-to-use tools (like the <strong>pandas_datareader</strong> package) or they can be provided alongside an API ‘query builder’ that gives rapid feedback on whether a query is valid or not (<a href="https://overpass-turbo.eu/">open street map API’s ‘overpass turbo’ is a good example</a>).</p>
</section>
<section id="api-best-practice" class="level2">
<h2 class="anchored" data-anchor-id="api-best-practice">API Best Practice</h2>
<p>There are a number of API standards out there, and the best one depends on the context. In the UK, there is <a href="https://www.gov.uk/guidance/gds-api-technical-and-data-standards">gov.uk guidance</a> on APIs.</p>
<p>The approach followed for open data APIs across a <a href="https://sdmx.org/?page_id=2705">wide range of international and national statistical organisations</a><sup>1</sup> is a standard called SDMX: <a href="https://sdmx.org/?page_id=2555">Statistical Data and Metadata eXchange</a>. It’s an ISO (International Organization for Standardization) standard designed to describe statistical data and metadata, normalise their exchange, and improve their efficient sharing across statistical and similar organisations.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>The BIS (Bank for International Settlements), ECB (European Central Bank), EUROSTAT (Statistical Office of the European Union), IMF (International Monetary Fund), OECD (Organisation for Economic Co-operation and Development), UN (United Nations), and the World Bank.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>code</category>
  <category>data</category>
  <guid>https://aeturrell.github.io/markov-wanderer/posts/the-prize-with-apis/the-prize-with-apis.html</guid>
  <pubDate>Sun, 18 Dec 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>TIL: How to break RSS feeds</title>
  <dc:creator>Arthur Turrell</dc:creator>
  <link>https://aeturrell.github.io/markov-wanderer/posts/til-how-to-break-xml/index.html</link>
  <description><![CDATA[ 




<blockquote class="blockquote">
<p>Note: this is the first post under a new tag called TIL or “today I learned”. These are shorter format posts that lower the barrier to blogging and capture a mini piece of learning. The idea for TILs has been inspired by Simon Willison’s own <a href="https://til.simonwillison.net/">TIL posts</a>.</p>
</blockquote>
<p>It’s really useful to have an RSS feed associated with a blog so that people can automatically pick up new posts. A lot of blogging technology (including Quarto and Jekyll) automatically creates these feeds at a URL called <code>&lt;website name&gt;/index.xml</code>, or similar, relative to the root of your website.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://aeturrell.github.io/markov-wanderer/posts/til-how-to-break-xml/https:/upload.wikimedia.org/wikipedia/en/thumb/4/43/Feed-icon.svg/256px-Feed-icon.svg.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">The RSS feed icon (Image: Wikipedia)</figcaption>
</figure>
</div>
<p>But I kept finding a problem with generating these feeds: either they did not generate at all or they were corrupted and unreadable.</p>
<p>I use a lot of latex in my blog posts. You can do this inline using dollar signs or as a display equation using double dollar signs in a separate paragraph. So</p>
<pre class="text"><code>$$
{\displaystyle F_{ij}=G\cdot {\frac {M_{i}M_{j}}{D_{ij}}}.}
$$</code></pre>
<p>becomes</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%7B%5Cdisplaystyle%20F_%7Bij%7D=G%5Ccdot%20%7B%5Cfrac%20%7BM_%7Bi%7DM_%7Bj%7D%7D%7BD_%7Bij%7D%7D%7D.%7D%0A"></p>
<p>So far so good. But, when you’re putting latex in a code block—for example, when you’re demonstrating how to add an equation to a chart in <strong>matplotlib</strong> in code—the string with latex in can crash the automatic blog RSS feed generator.</p>
<p>An example of the kind of string in a blog post that causes the problem is:</p>
<pre class="text"><code>```python
ax.set_xlabel(r"$e^\frac{-x^2}{2}$")
```</code></pre>
<p>except with the <code>"</code> characters replaced with <code>'</code> because, ironically, I can’t write this string without breaking the feed again.</p>
<p>The solution—as you can probably guess by now—is to use <code>"</code> instead of <code>'</code> for literal strings with latex in them in code blocks.</p>
<p>And, if you’re digesting this via an RSS feed, you’ll know it’s worked!</p>



 ]]></description>
  <category>blogging</category>
  <category>code</category>
  <category>writing</category>
  <category>TIL</category>
  <guid>https://aeturrell.github.io/markov-wanderer/posts/til-how-to-break-xml/index.html</guid>
  <pubDate>Wed, 02 Nov 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Welcome To The New Home for My Blog</title>
  <dc:creator>Arthur Turrell</dc:creator>
  <link>https://aeturrell.github.io/markov-wanderer/posts/welcome/index.html</link>
  <description><![CDATA[ 




<p>This is the first post on a brand new blog site: welcome!</p>
<p><img src="https://aeturrell.github.io/markov-wanderer/posts/welcome/thumbnail.jpg" class="img-fluid"></p>
<p>After a while of getting (minorly) frustrated with the code-integration available for a Jekyll-based blog, I’m making the switch to one that’s based on <a href="https://quarto.org/">Quarto</a>, the document and website preparation software tool that supports executable chunks in Python, R, and other-languages.</p>
<p>In getting this setup, <a href="https://albert-rapp.de/posts/13_quarto_blog_writing_guide/13_quarto_blog_writing_guide.html">this post</a> by Albert Rapp has been especially useful. A while ago, I did a post on <a href="../../posts/three-ways-to-blog-with-code/index.html">three ways to blog</a>, which at that time were Jupyter (with <a href="https://nbconvert.readthedocs.io/">nbconvert</a> to markdown with execution), <a href="https://github.com/gpoore/codebraid">codebraid</a>, and R markdown–none of which were perfect. Quarto takes what was good about R markdown and makes it cross-language plus a bit better.<sup>1</sup></p>
<p>There are <em>tons</em> of nice features of blogging with Quarto, but one that’s particularly useful for me is being able to have proper citations, like <span class="citation" data-cites="turrell2013monte">Turrell, Sherlock, and Rose (2013)</span>. And the support for executable code plus output figures–in multiple languages–is more or less unparalled.</p>





<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent">
<div id="ref-turrell2013monte" class="csl-entry">
Turrell, Arthur E, Mark Sherlock, and Steven J Rose. 2013. <span>“A Monte Carlo Algorithm for Degenerate Plasmas.”</span> <em>Journal of Computational Physics</em> 249: 13–21.
</div>
</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Though it’s still based on the fantastic <a href="https://pandoc.org/">pandoc</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>news</category>
  <guid>https://aeturrell.github.io/markov-wanderer/posts/welcome/index.html</guid>
  <pubDate>Sat, 15 Oct 2022 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Visual Studio Code on the Cloud</title>
  <dc:creator>Arthur Turrell</dc:creator>
  <link>https://aeturrell.github.io/markov-wanderer/posts/visual-studio-code-in-the-cloud/index.html</link>
  <description><![CDATA[ 




<p>Visual Studio Code is incredibly powerful, whether it’s for writing <a href="https://aeturrell.github.io/coding-for-economists/wrkflow-markdown.html">markdown</a>, writing <a href="https://aeturrell.github.io/coding-for-economists/wrkflow-quarto.html">quarto</a> (.qmd) files, getting syntax highlighting and peerless language support (eg auto-completion), getting peerless git support, working with a <a href="https://github.com/features/copilot">co-pilot</a>, <a href="https://visualstudio.microsoft.com/services/live-share/">working with collaborators in real-time</a>, or even running <a href="../../posts/setting-up-r-in-vscode/index.html">R code in a modern REPL</a>. For me, it’s the best IDE by some way. One of its strongest features for data science is its ability to do interactive window coding with scripts <em>and</em> notebooks. Yet most online or cloud-based data science services focus only on notebooks. Wouldn’t it be great if there was a reliable way to use all of Visual Studio Code’s features in the cloud?<sup>1</sup></p>
<p>In this blog post, I’ll show you how to set up Visual Studio Code on your desktop so that it connects remotely to a cloud virtual machine. This will allow you to code on the cloud as if you were developing locally.<sup>2</sup></p>
<p>Why should you care? Because having a reproducible environment on the cloud that you can use with your cutting-edge tools is pretty nifty!</p>
<p>There are pre-made resources out there that do this already such as <a href="https://github.com/features/codespaces">Github Codespaces</a> and <a href="https://www.gitpod.io/">Gitpod</a>, which even has a free tier. They are incredible and well worth checking out for, more or less, a one click solution for fully-featued Visual Studio Code in the cloud. But they’re probably a bit more pricey than a roll your own version, clearly have less flexibility in terms of virtual machines, and don’t come with the nice data backends that are provided by a huge cloud provider (yet).</p>
<section id="interactive-window-coding" class="level2">
<h2 class="anchored" data-anchor-id="interactive-window-coding">Interactive Window Coding</h2>
<p>If you’re not familiar with it, the <em>interactive window</em><sup>3</sup> is a convenient and flexible way to run code that you have open in a script or that you type directly into the interactive window code box. It allows you to remix, explore, and try out code one line at a time or in chunks or as a whole script–which makes it perfect for analysis and data science on those occassions when you don’t need text alongside code. You can find out more about <a href="https://aeturrell.github.io/python4DS/introduction.html#installing-visual-studio-code-to-run-python">how to set up interactive window coding in Python with Visual Studio Code here</a> (and R <a href="http://aeturrell.com//2021/11/04/setting-up-r-in-vscode/">here</a>). More generally, Visual Studio Code is a fantastic environment for doing data science in and many of its features eventually got adopted by other tools.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://aeturrell.github.io/markov-wanderer/posts/visual-studio-code-in-the-cloud/https:/github.com/aeturrell/coding-for-economists/blob/main/img/vscode_layout.png?raw=true" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Typical layout of Visual Studio Code</figcaption>
</figure>
</div>
<p>The figure above shows the typical layout of Visual Studio Code. Number 5 is the interactive Python window, which is where code and code outputs appear after you select and execute them from a script (number 3) or just by writing in the box ‘Type code here’ box.</p>
</section>
<section id="setting-up" class="level2">
<h2 class="anchored" data-anchor-id="setting-up">Setting Up</h2>
<p>There are two pieces to this puzzle: Visual Studio Code and Google Cloud.</p>
<p>First, grab Visual Studio Code for your local computer (ie your non-cloud computer) and whatever extensions you fancy, but you’ll need <a href="https://code.visualstudio.com/docs/remote/ssh">the remote explorer (SSH)</a> at a minimum.</p>
<p>You’ll also need to install the <a href="https://cloud.google.com/sdk">Google Cloud SDK</a> (a command line tool for interacting with GCP; SDK stands for ‘software development kit’) on your computer. Once you have downloaded and installed it, run <code>gcloud init</code> to set it up. This is the point at which your computer becomes trusted to do things to your GCP account.</p>
<p>Anything the Google Cloud SDK can do, Python (and C, C++, C#, Go, Java, Node.js, PHP, and Ruby) can do too, if you’d rather work with them. (R isn’t supported by the SDK yet.) However, here we’ll follow the instructions for doing this all in the command line.</p>
</section>
<section id="creating-a-cloud-vm-instance" class="level2">
<h2 class="anchored" data-anchor-id="creating-a-cloud-vm-instance">Creating a Cloud VM Instance</h2>
<p>You’ll need a Google Cloud Platform (GCP) account. New accounts get some free credit but you’ll typically need to add some billing information. Set up a new project on the Google Cloud Console, and enable the ‘Google Cloud Compute API’ (found under VM Instances).</p>
<p>Now you will set up a virtual machine. You can do this either through the set of menus or via the command line. For the menu options, go to the VM instances page and click ‘Create Instance’, then fill in the form with info on the computer you want.</p>
<p>If you’re going for the command line approach, you can do this all in one fell swoop by running</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gcloud</span> compute instances create instance-name <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--project</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>PROJECT-NAME <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--zone</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>europe-west2-c <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--machine-type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>e2-standard-2 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--network-interface</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>network-tier=PREMIUM,subnet=default <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--maintenance-policy</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>MIGRATE <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--provisioning-model</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>STANDARD <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--service-account</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>PROJECT-NUMBER-compute@developer.gserviceaccount.com <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--scopes</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>https://www.googleapis.com/auth/devstorage.read_only,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.write,https://www.googleapis.com/auth/servicecontrol,https://www.googleapis.com/auth/service.management.readonly,https://www.googleapis.com/auth/trace.append <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--create-disk</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>auto-delete=yes,boot=yes,device-name=instance-1,image=projects/debian-cloud/global/images/debian-11-bullseye-v20220920,mode=rw,size=10,type=projects/chipshop/zones/us-central1-a/diskTypes/pd-balanced <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--no-shielded-secure-boot</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--shielded-vtpm</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--shielded-integrity-monitoring</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--reservation-affinity</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>any</span></code></pre></div>
<p>where <code>instance-name</code> is the name you give the instance (you need to choose this now), <code>PROJECT-NAME</code> is the name of the project you’ve created, and <code>PROJECT-NUMBER</code> is the project number of that project. Note that these are fairly default settings with a London-based e2 machine running Bullseye Debian (a type of Linux).</p>
<p>If you did the above and all has worked you should now be able to see a new line in the VM instances page on the GCP pages that has a ‘running’ symbol under ‘Status’; yes, your VM is already running! (And racking up costs but this is a small machine so not much cost per hour–but you may wish to turn on billing alerts at this point!)</p>
<p>You can jump straight to your new VM’s command line using Google’s simple approach by clicking on their ‘SSH’ button on the line where your running VM instance appears on the VM instances page. But this only gets a command line, not Visual Studio Code…</p>
</section>
<section id="connecting-to-a-running-gcp-virtual-machine-instance-from-visual-studio-code" class="level2">
<h2 class="anchored" data-anchor-id="connecting-to-a-running-gcp-virtual-machine-instance-from-visual-studio-code">Connecting to a running GCP Virtual Machine Instance from Visual Studio Code</h2>
<p>Okay, so your GCP VM instance is running and now you’re going to connect to it with Visual Studio Code.</p>
<p>First, we need to set up the SSH connection between your computer and your running cloud VM; essentially a way for them to talk to each other. You can find out more about SSH authentication <a href="https://www.ssh.com/academy/ssh/protocol">here</a>. Open up VS Code and its integrated terminal (<kbd>ctrl</kbd>+<kbd>`</kbd> shortcut on a Mac). Make sure you are in the correct GCP project by running</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gcloud</span> config set project PROJECT-NAME</span></code></pre></div>
<p>on the command line. If you already tried this process and aborted it, you may need to remove your existing Google keys; they’re stored in the directory <code>~/.ssh/</code>. Now create the SSH settings for your new instance using</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gcloud</span> compute config-ssh</span></code></pre></div>
<p>You’ll get a message like</p>
<pre class="text"><code>WARNING: The private SSH key file for gcloud does not exist.
WARNING: The public SSH key file for gcloud does not exist.
WARNING: You do not have an SSH key for gcloud.
WARNING: SSH keygen will be executed to generate a key.
Generating public/private rsa key pair.
Enter passphrase (empty for no passphrase): [can enter one here]
Enter same passphrase again: [can enter one here]
Your identification has been saved in /Users/USERNAME/.ssh/google_compute_engine
Your public key has been saved in /Users/USERNAME/.ssh/google_compute_engine.pub
The key fingerprint is:
SHA256:YOUR-FINGERPRINT USERNAME@LOCAL-COMPUTER-NAME
The key's randomart image is:
+---[RSA 3072]----+
|                 |
| TEXT-ART-IMAGE  |
|                 |
+----[SHA256]-----+
Updating project ssh metadata...⠼Updated [https://www.googleapis.com/compute/v1/projects/PROJECT-NAME].  
Updating project ssh metadata...done.
You should now be able to use ssh/scp with your instances.
For example, try running:

  $ ssh INSTANCE-NAME.europe-west2-c.PROJECT-NAME</code></pre>
<p>Okay, this means your connection configurations have been set up successfuly. (Note: don’t run <code>ssh INSTANCE-NAME.europe-west2-c.PROJECT-NAME</code> directly on your command line, as you will just ssh into the cloud instance’s command line rather than open Visual Studio Code in the VM.)</p>
<p>Within Visual Studio Code on your local computer, go to the remote explorer tab, which you can find on the left hand side (you’ll need to have installed the remote explorer package for SSH). Choose ‘SSH Targets’ from the drop-down menu at the top. Then you should see an entry listed for INSTANCE-NAME.europe-west2-c.PROJECT-NAME. Right-click on it and choose ‘connect to host in new window’.</p>
<p>A new Visual Studio Code window will open and you will be asked whether you recognise the VM. Then you will be asked for a passphrase, if you chose to create one earlier.</p>
<p>Congratulations, you should now be on your VM instance using Code! You can check because the green text in the bottom left-hand corner of Visual Studio Code should read</p>
<blockquote class="blockquote">
<p>SSH: INSTANCE-NAME.europe-west2-c.PROJECT-NAME</p>
</blockquote>
<p>First, you’ll want to open up a folder to work in. Perhaps you want to git clone a repository and then open that? Git doesn’t come pre-installed so you’ll need to run <code>sudo apt-get install git</code> first. You can just open the home directory too. Either way, open up a folder.</p>
</section>
<section id="using-python-on-your-cloud-vm-instance" class="level2">
<h2 class="anchored" data-anchor-id="using-python-on-your-cloud-vm-instance">Using Python on your Cloud VM Instance</h2>
<p>If you used Google’s image “debian-11-bullseye-v20220920” then it will come with a version of Python already installed (Python 3.9.12) and you can check the version with <code>python -V</code> on the command line. Note that <strong>pip</strong> (used for installing Python packages) may not itself be installed–you can install it on Debian linux by running <code>sudo apt-get install pip</code> on the command line.</p>
<p>Next, you will need to install the Visual Studio Code <a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python">Python extension</a> (65 million installs and counting) on <em>the cloud instance</em>. Do that, then open up a Python script (you can run <code>echo "print('hello world')" &gt; hello.py</code> if you need inspiration for a simple script).</p>
<p>The interactive window depends on one package, <code>ipykernel</code>, that you probably don’t have already. Once you’ve installed <strong>pip</strong>, you’ll need to run <code>pip install ipykernel</code> on the command line.</p>
<p>Now, select the code you’d like to run in your Python script, right-click, and select ‘Run Selection/Line in Interactive Window’. You can also hit <kbd>shift</kbd> + <kbd>enter</kbd> with the code selected.</p>
<p>You should find that a Visual Studio Code interactive window launches and runs your code on the cloud!</p>
<p>And notebooks work too–try <code>touch notebook.ipynb</code> on the command line, opening the file in Visual Studio Code, and then add <code>print("hello world")</code> to the first cell and run it.</p>
<section id="setting-up-conda" class="level3">
<h3 class="anchored" data-anchor-id="setting-up-conda">Setting up conda</h3>
<p>Lots of data scientists use the Anaconda distribution of Python. It’s not on the base image we’re using, “debian-11-bullseye-v20220920”, by default, though of course you could choose an image that does have it if you want, or roll your own, when you create your VM instance. If you’re using this Debian option though, and you want to install Anaconda after the fact, the instructions are below. (We’ll work with the light-weight Anaconda version called ‘miniconda’.)</p>
<p>First you’ll need the <code>wget</code> Linux programme. Run</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt-get install wget</span></code></pre></div>
<p>to grab that. Next, let’s get the install script for Miniconda and run it:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wget</span> https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bash</span> Miniconda3-latest-Linux-x86_64.sh</span></code></pre></div>
<p>This will install Miniconda. Relaunch the terminal and you should see the familiar <code>(base)</code> prompt appearing so that your VM command line prompt now looks like</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">base</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">USERNAME@INSTANCE-NAME:~$</span></span></code></pre></div>
<p>Another way to check is to run <code>conda info</code>, which will tell you all about your conda installation.</p>
<p>Now, due to the license on Anaconda, you may wish to set <code>conda install</code> to only grab packages from the <code>conda-forge</code> channel. You can do that with a couple of commands:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> config <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--add</span> channels conda-forge</span></code></pre></div>
<p>to add conda forge as a channel for package downloads and put it first, and</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> config <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--set</span> channel_priority strict</span></code></pre></div>
<p>to get strict channel priority of conda forge, ie to always prefer that channel no matter what package is being installed. (It’s a bad idea to mix the conda forge and default channels.)</p>
</section>
</section>
<section id="moving-data-in-and-out-of-your-vm" class="level2">
<h2 class="anchored" data-anchor-id="moving-data-in-and-out-of-your-vm">Moving Data In and Out of Your VM</h2>
<p>Data scientists can’t data science without data.</p>
<section id="putting-data-on-the-cloud" class="level3">
<h3 class="anchored" data-anchor-id="putting-data-on-the-cloud">Putting Data on the Cloud</h3>
<p>There are many types of cloud data storage; here, we’ll just use the most popular (but perhaps not the best for your particular use case so worth reading up on what would best serve your requirements).</p>
<p>To create a new cloud data bucket, which persists separately to any VM instances, the command is</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gcloud</span> storage buckets create gs://BUCKET_NAME <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--project</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>PROJECT_ID <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--location</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>BUCKET_LOCATION</span></code></pre></div>
<p>For this project, we’ll accept the defaults except for setting the location to “europe-west2”. To upload data, it’s</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gcloud</span> storage cp OBJECT_LOCATION gs://DESTINATION_BUCKET_NAME/</span></code></pre></div>
<p>For example, to move a csv file called “glue.csv” that is in the working directory of the terminal,</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">glcoud</span> storage cp glue.csv gs://DESTINATION_BUCKET_NAME/</span></code></pre></div>
<p>After running this, you should be able to see the data appear in your bucket. The link to view it in the Google Cloud Console will be</p>
<pre class="text"><code>https://console.cloud.google.com/storage/browser?project=PROJECT-NAME&amp;prefix=</code></pre>
<p>and then click on the name you gave your bucket.</p>
</section>
<section id="moving-data-from-a-bucket-to-your-vm-and-back" class="level3">
<h3 class="anchored" data-anchor-id="moving-data-from-a-bucket-to-your-vm-and-back">Moving Data from a Bucket to Your VM (and back)</h3>
<p>Okay, so now your data is on the cloud–but it’s not on your VM! We’re back in Visual Studio Code on the VM, and using the integrated terminal. To copy data from the bucket to the VM, the command to use <em>on the terminal in the VM</em> is</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gcloud</span> storage cp <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> gs://BUCKET-NAME/ DESTINATION-FOLDER/</span></code></pre></div>
<p>The <code>-r</code> flag makes this recursive, while <code>cp</code> means copy. So, following our example you could make a directory data <code>mkdir data</code> and then run</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gcloud</span> storage cp <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> gs://BUCKET-NAME/ data/</span></code></pre></div>
<p>To move any data back to the bucket when you are done is the same command you used for moving data onto the bucket in the first place, ie</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb16-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">glcoud</span> storage cp FILE-NAME gs://DESTINATION_BUCKET_NAME/</span></code></pre></div>
</section>
</section>
<section id="finishing" class="level2">
<h2 class="anchored" data-anchor-id="finishing">Finishing</h2>
<p>Remember: best practice is to treat a cloud instance as temporary. Shunt data you want to save in and out when you use it, and use version control for code. And most of all, <strong>don’t forget to turn your VM instance off when you’ve finished using it!</strong></p>
<p>Hopefully this has been a useful summary of how to use Visual Studio Code in the cloud, especially using the interactive window for Python coding. Happy coding!</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>If you have a GitHub account you can just press ‘.’ on a repo and it will load up something that looks a lot like Visual Studio Code but this can’t run code, it’s only a text editor.↩︎</p></li>
<li id="fn2"><p>We’ll be using Google Cloud Compute but the concepts will be similar for other cloud services. You should also note that using cloud services is usually charged though free credits are often available for new accounts. Also, this has only been tested on MacOS.↩︎</p></li>
<li id="fn3"><p>This is actually a special kind of ipython console.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>code</category>
  <category>research</category>
  <category>cloud</category>
  <category>python</category>
  <category>rstats</category>
  <guid>https://aeturrell.github.io/markov-wanderer/posts/visual-studio-code-in-the-cloud/index.html</guid>
  <pubDate>Tue, 27 Sep 2022 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Writing a Research Blog Post</title>
  <dc:creator>Arthur Turrell</dc:creator>
  <link>https://aeturrell.github.io/markov-wanderer/posts/research-blogs/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In this post, you will find hints and tips for writing impactful blog posts that summarise research or analysis. This is a cross-post with a new page on <em>Coding for Economists</em> titled <a href="https://aeturrell.github.io/coding-for-economists/craft-research-blogs.html">Research Blog Posts</a>.</p>
<p>To make the distinction with blogging more generally, the chapter is called ‘research blog posts’, but the advice could apply to any complete analytical project. As in other chapters on craft, although the text below may say ‘do this’ or ‘don’t do that’, there are few universal rules in writing and what’s appropriate for your project may be something completely different. But following these guidelines should give you a solid place to start if you need one.</p>
<p>Your first question is likely to be “why blog about my research?”, and it’s a good one. Blogs are a really useful way of getting your work to a wider audience, including the general public—either directly or via journalists and aggregators. They will drive people to your research, make your research findings more shareable, and, as a side benefit, help you improve your communication skills too. The rest of the chapter will, hopefully, take some of the pain out of blogging.</p>
<p>This chapter has benefitted from numerous sources, including conversations with John Lewis at the Bank of England, this LSE <a href="https://blogs.lse.ac.uk/impactofsocialsciences/2016/01/25/how-to-write-a-blogpost-from-your-journal-article/">blog</a> on writing blogposts, and another <a href="https://www.transient-spaces.org/blog/blog-how-to-write-a-great-blog-post-on-your-research-topic-a-brief-guide-in-9-steps/">blog</a> with tips on research blog posts from the transient spaces and cities group at Innsbruck.</p>
</section>
<section id="dissemination" class="level2">
<h2 class="anchored" data-anchor-id="dissemination">Dissemination</h2>
<p>The reason most people take the trouble to present and summarise their analytical work in the form of a research blog post is to help find a wider audience for it.</p>
<p>It’s helpful to think of how many people will engage with the dissemination outputs you create as following the <em>inverted pyramid of research dissemination</em>. Note that these are outputs you create and control, so media articles or newsletters that others have written don’t appear in this model.</p>
<p>At the top layer of the pyramid, you can draw a large number of people in via social media, including people who might not otherwise have ever thought about or seen what you’re doing. This is quite unusual; for a blog post, they might have at least decided to visit a related website, but for social media they could just be scrolling through Twitter or TikTok.</p>
<p>At the next level down in the pyramid, you get another opportunity to pull probably slightly fewer people into somewhat more detail with a blog post, the subject of this chapter.</p>
<p>Below the blog post layer is the paper and, given a large number of papers go uncited, you may be lucky if tens of people read that front-to-back. Finally, right at the bottom—though no less useless for being so—is the code and/or replication packet, to be seen by a small number.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://aeturrell.github.io/markov-wanderer/posts/research-blogs/res_blog_pyramid.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Dissemination and blogs follow an inverted pyramid structure</figcaption>
</figure>
</div>
<p>Each stage of the inverted pyramid is valuable, but it’s important to recognise that:</p>
<ul>
<li>without the bottom layers, the top layers might not be very solid, so be wary of putting out arguments and conclusions that don’t rest on deeper analysis</li>
<li>most people will only ever engage with the upper layers; they don’t have time to read your paper but they might read a thread or blog post</li>
<li>more people will know about your work if those upper laters exist, and they will push more people down to lower layers</li>
<li>most people doing analysis or research want people to read it and be influenced by it</li>
</ul>
<p>In this view of dissemination, you can think of a research blog post as a poster for your deeper analysis: it is a punchier, shorter, and likely more exciting version that can also signposts people to your paper should you catch their attention. Popular blog site VoxEU uses the description “research-based policy analysis and commentary”.</p>
</section>
<section id="tips-for-writing-a-research-blog-post" class="level2">
<h2 class="anchored" data-anchor-id="tips-for-writing-a-research-blog-post">Tips for Writing a Research Blog Post</h2>
<p>Alongside the inverted pyramid of dissemination, above, there is another inverted pyramid that gives a suggested structure for research blog posts. This following the classic inverted pyramid of news as used by journalists. Just as with dissemination of research more broadly, more eyeballs will reach the top layer than the bottom, and more of the detail will emerge in the bottom layers.</p>
<p>If it is to effective, your blog post cannot be too long; 800 words a good target, and definitely no more than 1500. Many places that you would want to publish the blog will have limits anyway, but even if it’s on your own website, if you’re summarising a research project you probably want to make it <em>substantially</em> shorter than the paper.</p>
<p>Let’s run over some other general tips for writing good research blog posts:</p>
<ul>
<li><p>Don’t just repeat your paper; for a start, there’s not space to do this! You need to pick out one key feature and focus on it.</p></li>
<li><p>Think about your audience. It’s going to be a lot wider than your paper, and it’s going to depend a lot on the venue where the post appears; likewise, the platform you choose to put out your post will determine what audience you will reach.</p></li>
<li><p>Motivate the piece for a wider audience. While for a paper or deep and detailed piece of analysis, you may be able to rely on others as passionate about the topic or question as you are to get into it of their own volition, you will need to link your work to broader issues and bigger debates if you want to get readers.</p></li>
<li><p>If someone is reading an economics or coding or even analysis blog, then you probably <em>can</em> assume they have some analytical training: so keep the motivation crisp, specific, and short.</p></li>
<li><p>Good blogs tell a story. Craft the post into a narrative that puts the spotlight on the main finding that you want to communicate.</p></li>
<li><p>While many use a more formal style of writing for papers, it’s good to use a more punchy and relaxed style when writing a blog.</p></li>
<li><p>Keep it concise.</p></li>
<li><p>Mostly use the active voice, so that the subject of the verb performs the action (rather than the subject receiving the action). An example of the difference is “The dog chased the economist” versus “The economist was chased by the dog” for active and passive respectively.</p></li>
<li><p>There are many ways to make your paragraphs lead a reader clearly through your post, but a solid and reliable way to do this is to ensure that the whole piece would make sense, and follow logically, if you only read the first sentence of each paragraph.</p></li>
<li><p>Link to other blogs and research freely.</p></li>
<li><p>Don’t use jargon or acronyms! Be really strict with your prose; you may not even realise that some words you write frequently <em>are</em> jargon.</p></li>
<li><p>Well-written and engaging blogs will have a much bigger impact. Writing concise, punchy pieces does take time and practice.</p></li>
<li><p>Figures and tables (floats) should be used sparingly, be really clear, and should tell the story. Take a look at the chapter on narrative data visualisation to get a sense of what works. Any floats should be able to stand alone without the text too. If re-using floats from a paper or report, strip out elements that are superfluous to the narrative of the post.</p></li>
<li><p>Some blogs require that references to other work only appear as hyperlinks—something to bear in mind as you’re drafting.</p></li>
<li><p>Just as with papers, readers of your blog post will want to know what is different today, now you’ve done this work, as compared to yesterday, when you hadn’t. Is what you discovered a big effect? Does it have big implications?</p></li>
<li><p>The threshold is a lot lower than you think! A blog post that isn’t perfect will still drive more traffic to your work than one that wins a Pulitzer. Also, experience is easily the best way to improve for next time.</p></li>
</ul>
<p>Finally, two extremely good general resources on writing are<sup>1</sup> and<sup>2</sup>.</p>
</section>
<section id="structuring-a-research-blog-post" class="level2">
<h2 class="anchored" data-anchor-id="structuring-a-research-blog-post">Structuring a Research Blog Post</h2>
<p>The blog post pyramid in the figure above gives a good structure to work from, although experienced writers may want to get more creative.</p>
<p>Let’s run through the parts:</p>
<ul>
<li><p>Inviting title: this needs to strike a balance between being total clickbait and accurately reflecting the content of the post. Clickbait titles would include purposefully controversial opinions or lists along the lines of “Here are 9 things you never knew about central bank reserves; number 7 will shock you”. In the internet age, it’s also a good idea if it contains keywords that will help the post be picked up by a Google search: what would <em>you</em> search for to find blog posts on this topic?</p></li>
<li><p>Punchy intro: reel the reader in within the first few sentences and then get straight onto the main message and headlines. A three or four sentence summary opening paragraph works well; use it like a shop window for the rest of your piece, covering everything the reader is likely to find inside. Another way to think about it is as a trailer for the rest of the piece. Of course, your opening needs to naturally lead into the rest of the blog post too.</p></li>
<li><p>Core story: this is where you can relay what you did, found out, or changed in more detail. This is where you might have a sentence or two about the methodology, unless the methodology <em>is</em> the story. It’s also where the results and evidence that support the argument or narrative of the overall piece will appear.</p></li>
<li><p>Caveats: there are limitations to any study or analysis, and sometimes they’re important, and need to be included. Journalists read and notice blogs so, if you don’t want your work to be misunderstood, you do need to be careful about what you’re <em>not</em> saying or where there are obvious leaps in reasoning that can <em>not</em> be justified by the evidence presented. You should be frank about the shortcomings; you don’t want the economics equivalent of the <a href="https://twitter.com/justsaysinmice?lang=en">‘in mice’ treatment</a>.</p></li>
<li><p>Take away message and implications: as with the conclusion in a paper, this is the point where you’re allowed to be a (tiny) bit more speculative, draw some wider conclusions, and connect what you’ve found up with what the bigger picture looks like post your stunning insights. Extra points if you can cleverly bring the end of the piece full circle to an idea or notion that you brought in right at the beginning: this gives readers the written equivalent of a <a href="https://en.wikipedia.org/wiki/Cadence">perfect cadence</a> in music; the piece sounds finished. And, like in music, you may wish to vary this technique for effect.</p></li>
</ul>
<p>There are many bits of your paper that won’t make it into the blog post. Much of the methodology will need to be jettisoned, ditto for the literature section unless is extremely relevant to the story you’re telling.</p>
</section>
<section id="where-to-put-your-blog-piece" class="level2">
<h2 class="anchored" data-anchor-id="where-to-put-your-blog-piece">Where to put your blog piece</h2>
<p>So you’ve got an idea for a killer blog summarising your recent paper. Where can you unleash your blog piece on the world?</p>
<p>The first option is to host it yourself on your own website or on a free service such as <a href="https://www.blogger.com/">Google’s Blogger</a>. If you want to host a blog (and homepage) yourself, a combination of Github Pages and Jekyll is a good way to do it; the <a href="https://github.com/alshedivat/al-folio">Jekyll folio theme</a> is particularly popular and will automatically ingest a .bib file of references but there are <a href="https://jekyll-themes.com/free/">plenty of others</a>. Once setup, you write blogs in markdown, put them in a folder, and commit them: the rest is automatic. As an aside, if you want to blog in code using a self-hosted service that accepts markdown files, you can export Jupyter Notebooks to markdown using the techniques showcased in {ref}<code>auto-reports</code>.</p>
<p>Now although you get lots of control with a self-hosted blog, there are major downsides. Unless you have a large social media following already, posts on there might not find many readers. So what are your other options?</p>
<p>If you are at a central bank or have a co-author who is, many of them have blogs with big readerships. <a href="https://bankunderground.co.uk/">Bank Underground</a> (Bank of England) and <a href="https://libertystreeteconomics.newyorkfed.org/">Liberty Street Economics</a> (New York Fed) are two worth checking out. Many other institutions have blogs too, like various parts of the UK public sector—the <a href="https://blog.ons.gov.uk/">ONS’ blog</a>, for instance. Most universities have some sort of blog—<a href="https://warwick.ac.uk/fac/soc/economics/research/centres/cage/">CAGE</a> at the University of Warwick is a good example—and, for universities that don’t have their own, there’s <a href="https://theconversation.com/become-an-author">The Conversation</a>.</p>
<p><a href="https://voxeu.org/">VoxEU</a> has a very large economics readership and is solely focused on research blogs but the website is hardly encouraging when it comes to submissions: “Most Vox columns are commissioned directly by the Editor-in-Chief, but Vox does post a few unsolicited columns.” There’s also a <a href="https://voxdev.org/">VoxDev</a> for development economics, and, happily, this outlet actively invites researchers to submit pieces.</p>
<p>Bigger overall but less likely to reach an economics audience specifically, there’s <a href="https://medium.com/">Medium</a> and, for a more coding-oriented crowd, <a href="https://dev.to/">Dev.to</a>.</p>
<div id="refs" class="references csl-bib-body" data-line-spacing="2">
<div id="ref-zinsser2006writing" class="csl-entry">
<div class="csl-left-margin">1. </div><div class="csl-right-inline">Zinsser, W. <em>On writing well: The classic guide to writing nonfiction</em>. (New York, NY, 2006).</div>
</div>
<div id="ref-white1972elements" class="csl-entry">
<div class="csl-left-margin">2. </div><div class="csl-right-inline">White, E. B. &amp; Strunk, W. <em>The elements of style</em>. (Macmillan New York, 1972).</div>
</div>
</div>


</section>

 ]]></description>
  <category>blogging</category>
  <category>research</category>
  <category>writing</category>
  <guid>https://aeturrell.github.io/markov-wanderer/posts/research-blogs/index.html</guid>
  <pubDate>Mon, 21 Feb 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Setting up R in Visual Studio Code</title>
  <dc:creator>Arthur Turrell</dc:creator>
  <link>https://aeturrell.github.io/markov-wanderer/posts/setting-up-r-in-vscode/index.html</link>
  <description><![CDATA[ 




<p>This post will show you how to set up Visual Studio Code as an integrated development environment for the statistical language R. This will include some useful features such as:</p>
<ul>
<li>plots that appear within a VS Code panel</li>
<li>a language server with autocomplete</li>
<li>syntax highlighting of R code in console and scripts</li>
<li>interactive window development</li>
</ul>
<p>Of course, RStudio has all of these features for R too. However, Visual Studio Code does a lot more than just R, and has tons of cutting edge integrated development environment features that we’d like to make use of.</p>
<p>The prerequisites are:</p>
<ol type="1">
<li>An installation of the R language</li>
<li>An installation of Python</li>
<li>Visual Studio Code</li>
<li>The R extension for Visual Studio Code</li>
</ol>
<p>Steps:</p>
<ol type="1">
<li>Install the Python package <a href="https://github.com/randy3k/radian">radian</a>, which provides multiline editing and rich syntax highlighting. It sells itself as “A 21 century R console”. The installation can be achieved by running <code>conda install -c conda-forge radian</code> on the command line, if you manage your Python environments with conda, or <code>pip install -U radian</code> if you use pip.</li>
<li>Start up R (wherever) and run <code>install.packages("languageserver")</code> to install a language server.</li>
<li>Also <code>install.packages("httpgd")</code> to install the plot viewer.</li>
<li>Hit <kbd>Ctrl</kbd> (command on mac) + <kbd>,</kbd> in Visual Studio Code to open up the settings. Then make the following changes: enable R Bracketed Paste, R Session Watcher, and R: Always Use ActiveTerminal.</li>
<li>Now we want to make plots show up automatically within Visual Studio Code. If you don’t have an R profile on your computer already, create it with <code>touch ~/.Rprofile</code>. You can check if you have it already using <code>ls -a ~</code>.</li>
<li>Use <code>code ~/.Rprofile</code> to open the Rprofile file. Add the following code to it:</li>
</ol>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">interactive</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RSTUDIO"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>) {</span>
<span id="cb1-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.setenv</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">TERM_PROGRAM =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vscode"</span>)</span>
<span id="cb1-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"httpgd"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.packages</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">all.available =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)) {</span>
<span id="cb1-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vsc.plot =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb1-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">device =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(...) {</span>
<span id="cb1-6">      httpgd<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hgd</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">silent =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb1-7">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.vsc.browser</span>(httpgd<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hgd_url</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">history =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">viewer =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Beside"</span>)</span>
<span id="cb1-8">    })</span>
<span id="cb1-9">  }</span>
<span id="cb1-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">source</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.path</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (.Platform<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>OS.type <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"windows"</span>) <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"USERPROFILE"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HOME"</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".vscode-R"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"init.R"</span>))</span>
<span id="cb1-11">}</span></code></pre></div>
<ol start="7" type="1">
<li>In the terminal window of VS Code, type <code>radian</code> to bring up the R console.</li>
<li>Create an R script. Why not try writing <code>hist(trees$Height, breaks = 10, col = "orange")</code> in it? Then use <kbd>Ctrl</kbd> (command on mac) + <kbd>⏎</kbd> to send the line of code to the console. You should see your plot appear!</li>
</ol>
<p>Tips:</p>
<ul>
<li>You can find the workspace viewer under the <code>R</code> tab on the left-hand side of VS Code along with the Help Pages.</li>
<li>To bring up the variable explorer, use <code>View(data)</code> where data is an object containing data.</li>
<li>Interactive plotly charts work, as does a webviewer (eg for Shiny apps; try <code>shiny::runExample("01_hello")</code>)</li>
<li>Help pages can be revealed via <code>?symbol</code> in the console</li>
</ul>
<p>You can find more information on the R extension for VS Code <a href="https://github.com/REditorSupport/vscode-R">here</a>.</p>



 ]]></description>
  <category>code</category>
  <category>rstats</category>
  <guid>https://aeturrell.github.io/markov-wanderer/posts/setting-up-r-in-vscode/index.html</guid>
  <pubDate>Thu, 04 Nov 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Three ways to blog with code</title>
  <dc:creator>Arthur Turrell</dc:creator>
  <link>https://aeturrell.github.io/markov-wanderer/posts/three-ways-to-blog-with-code/index.html</link>
  <description><![CDATA[ 




<p>Typically, what I want to do when I create a blog post is to combine text, code, and code output, and then push it to the github repo that hosts my website. But what are the options, and which of them is the best (at least for my purposes)?</p>
<p>The objective is to take a mixture of markdown and code, execute the code, and ensure the outputs from that code (eg images) are linked to in a ‘final’ version of the markdown (let’s call it an executed version) that can easily be uploaded to github pages via a static site generator.</p>
<p>I’ll look at three ways to do this: Jupyter Notebooks, Codebraid, and Rmarkdown.</p>
<p>Let’s take a very simple blog post as the test case, with the quality of the output and success on the following tasks our metric of success:</p>
<ul>
<li>write and execute some code</li>
<li>write some text</li>
<li>execute some code that produces an image and includes it using the markdown <code>! [] (dir/to/img.png)</code> syntax; and</li>
<li>execute some code in-line with text.</li>
</ul>
<p>Here’s the contents that we’ll run in each case before exporting to executed markdown (note that it won’t show any outputs because it hasn’t been executed-in fact this will be, somewhat ironically, a code-output free blog post!):</p>
<section id="test-blog-post" class="level3">
<h3 class="anchored" data-anchor-id="test-blog-post">Test blog post</h3>
<p>This is a <em>very</em> approximate recreation of XKCD comic number 2419, <a href="https://xkcd.com/2419/">Hug Count</a>.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> numpy.random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Generator, PCG64</span>
<span id="cb1-5">seed_for_prng <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">78557</span></span>
<span id="cb1-6">prng <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Generator(PCG64(seed_for_prng))</span>
<span id="cb1-7"></span>
<span id="cb1-8"></span>
<span id="cb1-9">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(prng.integers(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2022</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1995</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)),</span>
<span id="cb1-10">                  columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Hugs'</span>],</span>
<span id="cb1-11">                  index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1995</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2022</span>))</span>
<span id="cb1-12">df.tail()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Hugs</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">2017</td>
<td>27</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2018</td>
<td>24</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2019</td>
<td>21</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2020</td>
<td>26</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2021</td>
<td>23</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Now we need to adjust the last entry downwards to reflect the unfortunate lack of hugs since coronavirus:</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">df.loc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2020</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2022</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Hugs'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span></code></pre></div>
</div>
<p>Let’s print the last number in-line: <code>3</code>.</p>
<p>Finally, let’s create the image.</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib_inline.backend_inline</span>
<span id="cb3-3">matplotlib_inline.backend_inline.set_matplotlib_formats(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"svg"</span>)</span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> plt.xkcd():</span>
<span id="cb3-6">    fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb3-7">    ax.spines[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>].set_color(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'none'</span>)</span>
<span id="cb3-8">    ax.spines[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'top'</span>].set_color(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'none'</span>)</span>
<span id="cb3-9">    df.plot.bar(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax)</span>
<span id="cb3-10">    ax.get_legend().remove()</span>
<span id="cb3-11">    ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Estimated Number of Distinct People Hugged Per Year'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://aeturrell.github.io/markov-wanderer/posts/three-ways-to-blog-with-code/index_files/figure-html/cell-4-output-1.svg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Hugs chart, after XKCD</figcaption>
</figure>
</div>
</div>
</div>
</section>
<section id="the-three-ways" class="level2">
<h2 class="anchored" data-anchor-id="the-three-ways">The three ways</h2>
<section id="jupyter-notebooks" class="level3">
<h3 class="anchored" data-anchor-id="jupyter-notebooks">Jupyter Notebooks</h3>
<p>From a Jupyter Notebook server running the .ipynb in a browser window (launch with <code>jupyter notebook</code> in the command line), choose File-&gt;Download As-&gt;Markdown to get a zip file that contains an executed markdown with outputs and a separate image file that is linked to from the markdown file. The automatic inclusion of images works really well. One major drawback of this approach is that there is no way to execute in-line code.</p>
<p>Although it has been requested as a feature, there’s no way to go from .ipynb to executed markdown in VS Code (though VS Code is a great Jupyter Notebook IDE in many other ways). This is a shame as VS Code is my go-to IDE.</p>
<p>Pros:</p>
<ul>
<li>Images auto-linked</li>
<li>Lots of great extensions for Jupyter notebooks</li>
<li>Shows how the final outputs will look (because you can execute as you go)</li>
</ul>
<p>Cons:</p>
<ul>
<li>Doesn’t play that nicely with version control</li>
<li>Cannot integrate code and text; blocks must be one or another</li>
<li>Requires an IDE that can read .ipynb files</li>
</ul>
</section>
<section id="codebraid" class="level3">
<h3 class="anchored" data-anchor-id="codebraid">Codebraid</h3>
<p><a href="https://github.com/gpoore/codebraid">Codebraid</a> is a really great package with a smorgasbord of features such as in-line code execution within paragraphs, no requirement for markdown preprocessor commands, minimal diffs for easy version control, the ability to insert code output anywhere in a document, and the ability to use multiple languages (and even multiple sessions) within a single document. All very impressive.</p>
<p>Like knitr for rmarkdown, it makes use of the excellent pandoc under the hood. To call it, you use</p>
<pre><code>codebraid pandoc &lt;normal pandoc options&gt; --overwrite</code></pre>
<p>on the command line. To get an executable Python block, the syntax for just getting the output of the code is</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb5-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{.python .cb.run}</span></span>
<span id="cb5-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Hello from *Python!*'</span></span>
<span id="cb5-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(x)</span>
<span id="cb5-4"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<p>whereas to get the code <em>and</em> the output it’s</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb6-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{.python .cb.nb}</span></span>
<span id="cb6-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Hello from *Python!*'</span></span>
<span id="cb6-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(x)</span>
<span id="cb6-4"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<p>Additional options are available via the show argument, eg <code>{.python .cb.nb} show=code+stdout:raw+stderr</code>, shows the code, the raw output, and any errors.</p>
<p>Displaying in-line code or output is possible. Use in-line code with <code>.cb.run</code>, e.g.</p>
<pre><code>`print(1 + 2)`{{.python .cb.run}}</code></pre>
<p>Running in-line code with <code>.cb.expr</code> evaluates an expression and then inserts the raw output into the document, where it is interpreted as Markdown. Inline code with <code>.cb.nb</code> (<code>nb</code> is short for <code>notebook</code>) is similar, except output is shown verbatim.</p>
<p>Images can be included automatically, just as is the case with Jupyter Notebook export, <em>except</em> that you must specify that you want to use a jupyter kernel rather than a pure language kernel. <code>{.python .cb.nb jupyter_kernel=python3}</code> is what you’d run in the first code block, but you can use <code>{.python .cb.nb}</code> in subsequent blocks (whether in-line or not).</p>
<p>Apart from all that, the only other thing you need to do is add a title, e.g.</p>
<pre><code>
---
title: "Codebraid blog post example"
---
</code></pre>
<p>Codebraid works really, really well with a jupyter kernel. The figures are included automatically, in-line rendering is possible, and you have a lot of options on output. Its creator has clearly but a lot of work into it. The only real downside is that you cannot see the outputs except in the executed and exported markdown, unlike in a Jupyter Notebook. I dare say that a clever VS Code extension could create a live preview, which would be fantastic to see.</p>
<p>Pros:</p>
<ul>
<li>First class cross-language support</li>
<li>In-line code execution</li>
<li>Great with version control</li>
<li>Works with any text editor</li>
<li>Lots of control over outputs</li>
<li>Images auto-linked</li>
<li>Uses a plain markdown .md file</li>
</ul>
<p>Cons:</p>
<ul>
<li>Doesn’t show how the final outputs will look</li>
<li>In some cases, exported markdown files may contains less common markdown syntax features, such as triple colons, that may not be rendered by all markdown viewers (it may be possible to turn these off)</li>
</ul>
</section>
<section id="rmarkdown" class="level3">
<h3 class="anchored" data-anchor-id="rmarkdown">Rmarkdown</h3>
<p>The way Rmarkdown (a file format that’s a fancy version of markdown), RStudio, and the package knitr work together is so great that I’m surprised it hasn’t caught on more. When it works, it really is brilliant.</p>
<p>Part of the reason why it hasn’t is probably because it’s pretty tightly bound with just one language (R), unlike Ju(lia)py(thon)(te)R notebooks, which covers three, and Codebraid, which covers those three plus Rust, Javascript, and bash. That, and you’re strongly tied to both R and RStudio to get the magic preview of what the output will look like. That’s not to say you cannot run Python or Julia in rmarkdown documents; you can, but they’re not first class citizens and I’ve heard stories about both big slowdowns relative to using those languages natively and that some things just don’t work at all. That said, for writing a blog post with a few lines of Python or Julia in, rmarkdown is a viable option, and it’s a really strong option for R.</p>
<p>Like Codebraid, rmarkdown + knitr use pandoc to achieve their magic, though pandoc’s role is a bit more hidden (it doesn’t appear in the command; in fact, you click a button that says <code>knitr</code> or <code>Preview</code>). When you create a new rmarkdown document in RStudio, you get options for output in HTML, PDF, or Word. But, of course, we know that pandoc is involved-and so that there are many more output formats available! In this case, we want to get an executed markdown script. The way to get this to happen is to adapt the header at the top of a newly created rmarkdown document to have output set to <code>md_document</code> as follows</p>
<pre><code>
---
title: "your title"
output: md_document
---
</code></pre>
<p>I wasn’t able to get the preview of Python chunks working–the in-document code-chunk preview button said that pandas was not installed (as if!). However, the output did work when I used the export to markdown option (the button to do this is, confusingly, labelled <code>Preview</code> but it’s the <code>Preview</code> that appears on the bar at the top of the document rather than <em>within</em> the document). Furthermore, the in-line code chunks do not seem to work with anything other than R.</p>
<p>Pros:</p>
<ul>
<li>Fantastic preview of how the final outputs will look when using RStudio</li>
<li>Great with version control</li>
<li>Almost uses a plain markdown file (it looks like plain markdown, but the extension is .rmd)</li>
<li>Excellent if you’re using R</li>
<li>Images auto-linked (although through HTML rather than markdown)</li>
</ul>
<p>Cons:</p>
<ul>
<li>Most of the best features do not work with other languages: eg preview and in-line code</li>
<li>Not so easy to use outside of RStudio</li>
<li>Markdown export hidden</li>
<li>Python support only through R’s <code>reticulate</code> package, which seems slow and is fiddly to connect to virtual environments</li>
</ul>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Jupyter Notebooks are great if you don’t mind the well-known fussyness around version control and the cumbersome file format. The preview of output that you naturally get by running cells is perhaps the strongest feature. Plus, you get lots of other great features of Jupyter Notebooks, including the many possible extensions, and a choice of several IDEs, including Visual Studio Code and JupyterLab. No in-line code, however.</p>
<p>Rmarkdown + knitr + RStudio works well for R (with a bit of fiddling to get markdown out instead of, say, html) but it’s just not good enough for other languages yet and it’s very much tied into the RStudio ecosystem. The best feature is the live preview as you execute individual chunks-but again, that’s only for R.</p>
<p>Codebraid is, for me, the stand out tool. It does everything you could ever want across every language you could ever want with ease <em>except</em> for one very important feature that’s missing: the ability to see a live preview. This isn’t really a failing of the Codebraid library of course; in the case of the other two, we’re really combining a file format with a file viewer whereas Codebraid is just the file format and a command line tool. So, if, say, Visual Studio Code introduced a live preview of Codebraid markdown (before execution), then it would be superior to the other options for all purposes in my view. As it is, it’s still the best all rounder and, for most blog posts that I do, I can see myself using either Codebraid or Jupyter Notebooks. It has an edge on the latter when it comes to in-line code, multiple languages simultaneously, and a less fussy file format (it’s just markdown rather than JSON).</p>
</section>
<section id="verbatim-blog-post-file-contents" class="level2">
<h2 class="anchored" data-anchor-id="verbatim-blog-post-file-contents">Verbatim blog post file contents</h2>
<p>These are in case you want to try this out for yourself.</p>
<section id="jupyter-notebook" class="level3">
<h3 class="anchored" data-anchor-id="jupyter-notebook">Jupyter Notebook</h3>
<pre class="text"><code>{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is a *very* approximate recreation of XKCD comic number 2419, [Hug Count](https://xkcd.com/2419/)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "from numpy.random import Generator, PCG64\n",
    "seed_for_prng = 78557\n",
    "prng = Generator(PCG64(seed_for_prng))\n",
    "\n",
    "\n",
    "df = pd.DataFrame(prng.integers(20, 30, size=(2022-1995, 1)),\n",
    "                  columns=['Hugs'],\n",
    "                  index=range(1995, 2022))\n",
    "df.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we need to adjust the last entry downwards to reflect the unfortunate lack of hugs since coronavirus:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.loc[2020:2022, 'Hugs'] = [5, 3]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's print the last number in-line (cannot do this in Jupyter Notebook).\n",
    "\n",
    "Finally, let's create the image."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "with plt.xkcd():\n",
    "    fig, ax = plt.subplots()\n",
    "    ax.spines['right'].set_color('none')\n",
    "    ax.spines['top'].set_color('none')\n",
    "    df.plot.bar(ax=ax)\n",
    "    ax.get_legend().remove()\n",
    "    ax.set_title('Estimated Number of Distinct People Hugged Per Year')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.7.6 64-bit ('base': conda)",
   "language": "python",
   "name": "python37664bitbaseconda6d7b358218c047dcab3fb2cff66062fa"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}</code></pre>
<p>This can be executed by pressing ‘run’ in an IDE. In the Jupyter Notebook IDE, you should then use the export to markdown option (under file-&gt;download as).</p>
</section>
<section id="codebraid-1" class="level3">
<h3 class="anchored" data-anchor-id="codebraid-1">Codebraid</h3>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb11-2"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">title:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> "Codebraid blog post example"</span></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb11-4"></span>
<span id="cb11-5"></span>
<span id="cb11-6">This is a *very* approximate recreation of XKCD comic number 2419, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">Hug Count</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">](https://xkcd.com/2419/)</span>.</span>
<span id="cb11-7"></span>
<span id="cb11-8"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{.python .cb.nb jupyter_kernel=python3}</span></span>
<span id="cb11-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb11-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb11-11"></span>
<span id="cb11-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> numpy.random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Generator, PCG64</span>
<span id="cb11-13">seed_for_prng <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">78557</span></span>
<span id="cb11-14">prng <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Generator(PCG64(seed_for_prng))</span>
<span id="cb11-15"></span>
<span id="cb11-16"></span>
<span id="cb11-17">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(prng.integers(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2022</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1995</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)),</span>
<span id="cb11-18">                  columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Hugs'</span>],</span>
<span id="cb11-19">                  index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1995</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2022</span>))</span>
<span id="cb11-20">df.tail()</span>
<span id="cb11-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span>
<span id="cb11-22"></span>
<span id="cb11-23">Now we need to adjust the last entry downwards to reflect the unfortunate lack of hugs since coronavirus:</span>
<span id="cb11-24"></span>
<span id="cb11-25"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{python .cb.nb}</span></span>
<span id="cb11-26">df.loc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2020</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2022</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Hugs'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb11-27"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span>
<span id="cb11-28"></span>
<span id="cb11-29">Let's print the last number in-line <span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">`print(df.iloc[-1, -1])`</span>{.python .cb.run}.</span>
<span id="cb11-30"></span>
<span id="cb11-31">Finally, let's create the image.</span>
<span id="cb11-32"></span>
<span id="cb11-33"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{.python .cb.nb}</span></span>
<span id="cb11-34"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb11-35"></span>
<span id="cb11-36"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> plt.xkcd():</span>
<span id="cb11-37">    fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb11-38">    ax.spines[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>].set_color(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'none'</span>)</span>
<span id="cb11-39">    ax.spines[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'top'</span>].set_color(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'none'</span>)</span>
<span id="cb11-40">    df.plot.bar(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax)</span>
<span id="cb11-41">    ax.get_legend().remove()</span>
<span id="cb11-42">    ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Estimated Number of Distinct People Hugged Per Year'</span>)</span>
<span id="cb11-43"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<p>Then run <code>codebraid pandoc -s in.md -o out.md</code> on the command line, assuming you have codebraid and pandoc installed, and that you name the above file ‘in.md’.</p>
</section>
<section id="rmarkdown-1" class="level3">
<h3 class="anchored" data-anchor-id="rmarkdown-1">Rmarkdown</h3>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb12-2"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">title:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> "three_rmd"</span></span>
<span id="cb12-3"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">output:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> md_document</span></span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb12-5"></span>
<span id="cb12-6"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{r setup, include=FALSE}</span></span>
<span id="cb12-7">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>opts_chunk<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">echo =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb12-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(reticulate)</span>
<span id="cb12-9"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span>
<span id="cb12-10"></span>
<span id="cb12-11">This is a *very* approximate recreation of XKCD comic number 2419, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">Hug Count</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">](https://xkcd.com/2419/)</span>.</span>
<span id="cb12-12"></span>
<span id="cb12-13"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{python}</span></span>
<span id="cb12-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb12-15"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb12-16"></span>
<span id="cb12-17"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> numpy.random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Generator, PCG64</span>
<span id="cb12-18">seed_for_prng <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">78557</span></span>
<span id="cb12-19">prng <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Generator(PCG64(seed_for_prng))</span>
<span id="cb12-20"></span>
<span id="cb12-21"></span>
<span id="cb12-22">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(prng.integers(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2022</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1995</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)),</span>
<span id="cb12-23">                  columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Hugs'</span>],</span>
<span id="cb12-24">                  index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1995</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2022</span>))</span>
<span id="cb12-25"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(df.tail())</span>
<span id="cb12-26"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span>
<span id="cb12-27"></span>
<span id="cb12-28">Now we need to adjust the last entry downwards to reflect the unfortunate lack of hugs since coronavirus:</span>
<span id="cb12-29"></span>
<span id="cb12-30"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{python}</span></span>
<span id="cb12-31">df.loc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2020</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2022</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Hugs'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb12-32"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span>
<span id="cb12-33"></span>
<span id="cb12-34"></span>
<span id="cb12-35">Let's print the last number in-line (not possible with Rmarkdown).</span>
<span id="cb12-36"></span>
<span id="cb12-37">Finally, let's create the image.</span>
<span id="cb12-38"></span>
<span id="cb12-39"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{python}</span></span>
<span id="cb12-40"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb12-41"></span>
<span id="cb12-42"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> plt.xkcd():</span>
<span id="cb12-43">    fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb12-44">    ax.spines[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>].set_color(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'none'</span>)</span>
<span id="cb12-45">    ax.spines[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'top'</span>].set_color(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'none'</span>)</span>
<span id="cb12-46">    df.plot.bar(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax)</span>
<span id="cb12-47">    ax.get_legend().remove()</span>
<span id="cb12-48">    ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Estimated Number of Distinct People Hugged Per Year'</span>)</span>
<span id="cb12-49"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<p>In RStudio, changing <code>output: html</code> to <code>output: md_document</code> tells knitr to use markdown. Then hit the preview button <em>at the top</em> of the document, which actually creates an output markdown file.</p>


</section>
</section>

 ]]></description>
  <category>code</category>
  <category>blogging</category>
  <guid>https://aeturrell.github.io/markov-wanderer/posts/three-ways-to-blog-with-code/index.html</guid>
  <pubDate>Fri, 12 Feb 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>10 less well-known Python packages</title>
  <dc:creator>Arthur Turrell</dc:creator>
  <link>https://aeturrell.github.io/markov-wanderer/posts/10-lesser-known-python-packages/index.html</link>
  <description><![CDATA[ 




<p>(Remember that to use these, you will need to run <code>pip install packagename</code> on the command line.)</p>
<section id="jazzit" class="level2">
<h2 class="anchored" data-anchor-id="jazzit">1. Jazzit</h2>
<p>Sound on for this one. Jazzit’s docs say: &gt; “Ever wanted your scripts to play music while running/ on erroring out? Of course you didn’t. But here it is anyway”.</p>
<p>Yes, this package laughs at you when you get a runtime error – but can also celebrate your success when the code runs. Apart from being good fun, this package demonstrates how the decorator function <code>@</code> is used.</p>
<p>See also: <a href="https://pypi.org/project/beepy/">beepy</a></p>
<section id="example-of-jazzit" class="level3">
<h3 class="anchored" data-anchor-id="example-of-jazzit">Example of Jazzit</h3>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> jazzit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> error_track, success_track</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@error_track</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"curb_your_enthusiasm.mp3"</span>, wait<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run():</span>
<span id="cb1-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-7"></span>
<span id="cb1-8">run()</span></code></pre></div>
<pre class="text"><code>Traceback (most recent call last):
  File "/opt/anaconda3/envs/noodling/lib/python3.8/site-packages/jazzit/jazz.py", line 47, in wrapped_function
    original_func(*args)
  File "/var/folders/x6/ffnr59f116l96_y0q0bjfz7c0000gn/T/ipykernel_89075/4032939987.py", line 5, in run
    print(1/0)
ZeroDivisionError: division by zero</code></pre>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@success_track</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"anime-wow.mp3"</span>)</span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> add(a,b):</span>
<span id="cb3-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>b)</span>
<span id="cb3-4"></span>
<span id="cb3-5">add(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<pre class="text"><code>15</code></pre>
</section>
</section>
<section id="handcalcs" class="level2">
<h2 class="anchored" data-anchor-id="handcalcs">2. Handcalcs</h2>
<p>In research, you often find yourself coding up maths and then transcribing the same maths into text (usually via typesetting language Latex). This is bad practice; do not repeat yourself suggests you should write the maths once, and once alone. Handcalcs helps with this: it can render maths in the console and export to latex equations.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://aeturrell.github.io/markov-wanderer/posts/10-lesser-known-python-packages/https:/pythonawesome.com/content/images/2020/08/wrong_brackets.gif" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">The Handcalcs package</figcaption>
</figure>
</div>
<p>See also: if you want to solve, render, and export latex equations, you should try out <a href="https://www.sympy.org/en/index.html">sympy</a>, a fully fledged library for symbolic mathematics (think Maple).</p>
<section id="example-of-handcalcs" class="level3">
<h3 class="anchored" data-anchor-id="example-of-handcalcs">Example of handcalcs</h3>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> handcalcs.render</span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> math <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sqrt</span></code></pre></div>
<p>To render maths, just use the <code>%%render</code> magic keyword. If you’re running in an enviroment that doesn’t have a Latex installation, this will just show Latex – if you want the Latex, use the <code>%%tex</code> magic keyword instead. But in a Jupyter notebook on a machine with Latex installed, the <code>%%render</code> magic will render the maths into beautifully typeset equations:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>render</span>
<span id="cb6-2"></span>
<span id="cb6-3">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb6-4">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb6-5">c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
[
<img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0Aa%20&amp;=%202%20%5C;%0A%5C%5C%5B10pt%5D%0Ab%20&amp;=%203%20%5C;%0A%5C%5C%5B10pt%5D%0Ac%20&amp;=%20%5Csqrt%20%7B%202%20%5Ccdot%20a%20+%20%5Cfrac%7B%20b%20%7D%7B%203%20%7D%20%7D%20%20=%20%5Csqrt%20%7B%202%20%5Ccdot%202%20+%20%5Cfrac%7B%203%20%7D%7B%203%20%7D%20%7D%20&amp;=%202.236%20%20%0A%5Cend%7Baligned%7D">
<p>]</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>tex</span>
<span id="cb7-2"></span>
<span id="cb7-3">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb7-4">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb7-5">c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<pre><code>\[
\begin{aligned}
a &amp;= 2 \; 
\\[10pt]
b &amp;= 3 \; 
\\[10pt]
c &amp;= \sqrt { 2 \cdot a + \frac{ b }{ 3 } }  = \sqrt { 2 \cdot 2 + \frac{ 3 }{ 3 } } &amp;= 2.236  
\end{aligned}
\]</code></pre>
</section>
</section>
<section id="matplotlib" class="level2">
<h2 class="anchored" data-anchor-id="matplotlib">3. Matplotlib!?</h2>
<p>Alright, you’ve probably heard of matplotlib and might be surprised to see it on this list. But there’s a nice new feature of matplotlib that you might not be aware of: placement using ASCII art. It’s more useful than it sounds.</p>
<p>Sometimes (especially for science papers), you need a weird arrangement of panels within a figure. Specifying that so that it’s exactly right is a big pain. This is where the new matplotlib mosiac subplot option comes in.</p>
<p>Note that you may need to restart the runtime after you have pip installed matplotlib below.</p>
<p>See also: if you like declarative plotting that’s web-friendly and extremely high quality, <a href="https://altair-viz.github.io/">Altair</a> is definitely worth your time.</p>
<section id="example-of-matplotlib-mosaics" class="level3">
<h3 class="anchored" data-anchor-id="example-of-matplotlib-mosaics">Example of matplotlib mosaics</h3>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb9-2">axd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(constrained_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>).subplot_mosaic(</span>
<span id="cb9-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb9-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    TTE</span></span>
<span id="cb9-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    L.E</span></span>
<span id="cb9-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    """</span>)</span>
<span id="cb9-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k, ax <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> axd.items():</span>
<span id="cb9-8">    ax.text(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, k,</span>
<span id="cb9-9">            ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">36</span>,</span>
<span id="cb9-10">            color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'darkgrey'</span>)</span>
<span id="cb9-11">plt.show()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://aeturrell.github.io/markov-wanderer/posts/10-lesser-known-python-packages/10_less_img_16.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Output using matplotlib mosiacs</figcaption>
</figure>
</div>
<p>But it’s not just ASCII that you can use, lists work too:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">axd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(constrained_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>).subplot_mosaic(</span>
<span id="cb10-2">    [[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'histx'</span>],</span>
<span id="cb10-3">     [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'histy'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'scat'</span>]]</span>
<span id="cb10-4">)</span>
<span id="cb10-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k, ax <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> axd.items():</span>
<span id="cb10-6">    ax.text(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, k,</span>
<span id="cb10-7">            ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">36</span>,</span>
<span id="cb10-8">            color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'darkgrey'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://aeturrell.github.io/markov-wanderer/posts/10-lesser-known-python-packages/10_less_img_18.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Specifying the mosaic in a different way.</figcaption>
</figure>
</div>
</section>
</section>
<section id="pandas-profiling" class="level2">
<h2 class="anchored" data-anchor-id="pandas-profiling">4. Pandas profiling</h2>
<p>Any tool that can make the process of understanding input data is very welcome, which is why the <a href="https://pandas-profiling.github.io/pandas-profiling/docs/master/rtd/">pandas profiling</a> library is such a breath of fresh air. It automates, or at least facilitates, the first stage of exploratory data analysis.</p>
<p>What pandas profiling does is to render a HTML or ipywidget report (or JSON string) of the datatset - including missing variables, cardinality, distributions, and correlations. From what I’ve seen, it’s really comprehensive and user-friendly—though I have noticed that the default configuration does not scale well to very large datasets.</p>
<p>Due to the large size of the reports, I won’t run one in this notebook, although you can with <code>profile.to_notebook_iframe()</code>, but instead link to a gif demoing the package.</p>
<p>See also: <a href="https://github.com/fbdesignpro/sweetviz">SweetViz</a></p>
<section id="example-of-pandas-profiling" class="level3">
<h3 class="anchored" data-anchor-id="example-of-pandas-profiling">Example of pandas profiling</h3>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb11-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pandas_profiling <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ProfileReport</span>
<span id="cb11-3"></span>
<span id="cb11-4">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv'</span>)</span>
<span id="cb11-5"></span>
<span id="cb11-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># To run the profile report use:</span></span>
<span id="cb11-7">profile <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ProfileReport(data, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Titanic Dataset"</span>, html<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'style'</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'full_width'</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>}})</span>
<span id="cb11-8"></span>
<span id="cb11-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># To display in a notebook:</span></span>
<span id="cb11-10">profile.to_notebook_iframe()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://aeturrell.github.io/markov-wanderer/posts/10-lesser-known-python-packages/https:/pandas-profiling.ydata.ai/docs/master/_images/iframe.gif" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">An example of pandas profiling output</figcaption>
</figure>
</div>
</section>
</section>
<section id="pandera-data-validation" class="level2">
<h2 class="anchored" data-anchor-id="pandera-data-validation">5. Pandera data validation</h2>
<p>Sometimes you want to validate data, not just explore it. A number of packages have popped up to help do this recently. <a href="https://pandera.readthedocs.io/en/stable/">Pandera</a> is geared towards pandas dataframes and validation within a file or notebook. It can be used to check that a given dataframe has the data that you’d expect.</p>
<p>See also: <a href="https://docs.greatexpectations.io/en/latest/">Great Expectations</a>, which produces HTML reports a bit like our number 3. featured above. Great Expectations looks really rich and suitable for production, coming as it does with a command line interface.</p>
<section id="example-of-pandera" class="level3">
<h3 class="anchored" data-anchor-id="example-of-pandera">Example of pandera</h3>
<p>Let’s start with a dataframe that passes muster.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb12-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandera <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pa</span>
<span id="cb12-3"></span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># data to validate</span></span>
<span id="cb12-5">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({</span>
<span id="cb12-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"column1"</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>],</span>
<span id="cb12-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"column2"</span>: [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.3</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.4</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.9</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">20.4</span>],</span>
<span id="cb12-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"column3"</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value_1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value_2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value_3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value_2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value_1"</span>],</span>
<span id="cb12-9">})</span>
<span id="cb12-10"></span>
<span id="cb12-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define schema</span></span>
<span id="cb12-12">schema <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pa.DataFrameSchema({</span>
<span id="cb12-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"column1"</span>: pa.Column(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, checks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pa.Check.less_than_or_equal_to(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)),</span>
<span id="cb12-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"column2"</span>: pa.Column(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>, checks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pa.Check.less_than(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.2</span>)),</span>
<span id="cb12-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"column3"</span>: pa.Column(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, checks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb12-16">        pa.Check.str_startswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value_"</span>),</span>
<span id="cb12-17">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define custom checks as functions that take a series as input and</span></span>
<span id="cb12-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># outputs a boolean or boolean Series</span></span>
<span id="cb12-19">        pa.Check(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> s: s.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>, expand<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>).shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb12-20">    ]),</span>
<span id="cb12-21">})</span>
<span id="cb12-22"></span>
<span id="cb12-23">validated_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> schema(df)</span>
<span id="cb12-24"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(validated_df)</span></code></pre></div>
<pre><code>   column1  column2  column3
0        1     -1.3  value_1
1        4     -1.4  value_2
2        0     -2.9  value_3
3       10    -10.1  value_2
4        9    -20.4  value_1</code></pre>
<p>This passed, as expected. But now let’s try the same schema with data that shouldn’t pass by changing the first value of the second column to be greater than -1.2:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({</span>
<span id="cb14-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"column1"</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>],</span>
<span id="cb14-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"column2"</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.4</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.9</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">20.4</span>],</span>
<span id="cb14-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"column3"</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value_1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value_2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value_3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value_2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value_1"</span>],</span>
<span id="cb14-5">})</span>
<span id="cb14-6"></span>
<span id="cb14-7">validated_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> schema(df)</span>
<span id="cb14-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(validated_df)</span></code></pre></div>
<pre><code>---------------------------------------------------------------------------

SchemaError                               Traceback (most recent call last)

Input In [11], in &lt;module&gt;
      1 df = pd.DataFrame({
      2     "column1": [1, 4, 0, 10, 9],
      3     "column2": [22, -1.4, -2.9, -10.1, -20.4],
      4     "column3": ["value_1", "value_2", "value_3", "value_2", "value_1"],
      5 })
----&gt; 7 validated_df = schema(df)
      8 print(validated_df)


File /opt/anaconda3/envs/noodling/lib/python3.8/site-packages/pandera/schemas.py:768, in DataFrameSchema.__call__(self, dataframe, head, tail, sample, random_state, lazy, inplace)
    740 def __call__(
    741     self,
    742     dataframe: pd.DataFrame,
   (...)
    748     inplace: bool = False,
    749 ):
    750     """Alias for :func:`DataFrameSchema.validate` method.
    751 
    752     :param pd.DataFrame dataframe: the dataframe to be validated.
   (...)
    766         otherwise creates a copy of the data.
    767     """
--&gt; 768     return self.validate(
    769         dataframe, head, tail, sample, random_state, lazy, inplace
    770     )


File /opt/anaconda3/envs/noodling/lib/python3.8/site-packages/pandera/schemas.py:503, in DataFrameSchema.validate(self, check_obj, head, tail, sample, random_state, lazy, inplace)
    490     check_obj = check_obj.map_partitions(
    491         self._validate,
    492         head=head,
   (...)
    498         meta=check_obj,
    499     )
    501     return check_obj.pandera.add_schema(self)
--&gt; 503 return self._validate(
    504     check_obj=check_obj,
    505     head=head,
    506     tail=tail,
    507     sample=sample,
    508     random_state=random_state,
    509     lazy=lazy,
    510     inplace=inplace,
    511 )


File /opt/anaconda3/envs/noodling/lib/python3.8/site-packages/pandera/schemas.py:677, in DataFrameSchema._validate(self, check_obj, head, tail, sample, random_state, lazy, inplace)
    675     check_results.append(check_utils.is_table(result))
    676 except errors.SchemaError as err:
--&gt; 677     error_handler.collect_error("schema_component_check", err)
    678 except errors.SchemaErrors as err:
    679     for schema_error_dict in err.schema_errors:


File /opt/anaconda3/envs/noodling/lib/python3.8/site-packages/pandera/error_handlers.py:32, in SchemaErrorHandler.collect_error(self, reason_code, schema_error, original_exc)
     26 """Collect schema error, raising exception if lazy is False.
     27 
     28 :param reason_code: string representing reason for error
     29 :param schema_error: ``SchemaError`` object.
     30 """
     31 if not self._lazy:
---&gt; 32     raise schema_error from original_exc
     34 # delete data of validated object from SchemaError object to prevent
     35 # storing copies of the validated DataFrame/Series for every
     36 # SchemaError collected.
     37 del schema_error.data


File /opt/anaconda3/envs/noodling/lib/python3.8/site-packages/pandera/schemas.py:669, in DataFrameSchema._validate(self, check_obj, head, tail, sample, random_state, lazy, inplace)
    667 for schema_component in schema_components:
    668     try:
--&gt; 669         result = schema_component(
    670             df_to_validate,
    671             lazy=lazy,
    672             # don't make a copy of the data
    673             inplace=True,
    674         )
    675         check_results.append(check_utils.is_table(result))
    676     except errors.SchemaError as err:


File /opt/anaconda3/envs/noodling/lib/python3.8/site-packages/pandera/schemas.py:2004, in SeriesSchemaBase.__call__(self, check_obj, head, tail, sample, random_state, lazy, inplace)
   1993 def __call__(
   1994     self,
   1995     check_obj: Union[pd.DataFrame, pd.Series],
   (...)
   2001     inplace: bool = False,
   2002 ) -&gt; Union[pd.DataFrame, pd.Series]:
   2003     """Alias for ``validate`` method."""
-&gt; 2004     return self.validate(
   2005         check_obj, head, tail, sample, random_state, lazy, inplace
   2006     )


File /opt/anaconda3/envs/noodling/lib/python3.8/site-packages/pandera/schema_components.py:223, in Column.validate(self, check_obj, head, tail, sample, random_state, lazy, inplace)
    219             validate_column(
    220                 check_obj[column_name].iloc[:, [i]], column_name
    221             )
    222     else:
--&gt; 223         validate_column(check_obj, column_name)
    225 return check_obj


File /opt/anaconda3/envs/noodling/lib/python3.8/site-packages/pandera/schema_components.py:196, in Column.validate.&lt;locals&gt;.validate_column(check_obj, column_name)
    195 def validate_column(check_obj, column_name):
--&gt; 196     super(Column, copy(self).set_name(column_name)).validate(
    197         check_obj,
    198         head,
    199         tail,
    200         sample,
    201         random_state,
    202         lazy,
    203         inplace=inplace,
    204     )


File /opt/anaconda3/envs/noodling/lib/python3.8/site-packages/pandera/schemas.py:1962, in SeriesSchemaBase.validate(self, check_obj, head, tail, sample, random_state, lazy, inplace)
   1956     check_results.append(
   1957         _handle_check_results(
   1958             self, check_index, check, check_obj, *check_args
   1959         )
   1960     )
   1961 except errors.SchemaError as err:
-&gt; 1962     error_handler.collect_error("dataframe_check", err)
   1963 except Exception as err:  # pylint: disable=broad-except
   1964     # catch other exceptions that may occur when executing the
   1965     # Check
   1966     err_msg = f'"{err.args[0]}"' if len(err.args) &gt; 0 else ""


File /opt/anaconda3/envs/noodling/lib/python3.8/site-packages/pandera/error_handlers.py:32, in SchemaErrorHandler.collect_error(self, reason_code, schema_error, original_exc)
     26 """Collect schema error, raising exception if lazy is False.
     27 
     28 :param reason_code: string representing reason for error
     29 :param schema_error: ``SchemaError`` object.
     30 """
     31 if not self._lazy:
---&gt; 32     raise schema_error from original_exc
     34 # delete data of validated object from SchemaError object to prevent
     35 # storing copies of the validated DataFrame/Series for every
     36 # SchemaError collected.
     37 del schema_error.data


File /opt/anaconda3/envs/noodling/lib/python3.8/site-packages/pandera/schemas.py:1957, in SeriesSchemaBase.validate(self, check_obj, head, tail, sample, random_state, lazy, inplace)
   1954 for check_index, check in enumerate(self.checks):
   1955     try:
   1956         check_results.append(
-&gt; 1957             _handle_check_results(
   1958                 self, check_index, check, check_obj, *check_args
   1959             )
   1960         )
   1961     except errors.SchemaError as err:
   1962         error_handler.collect_error("dataframe_check", err)


File /opt/anaconda3/envs/noodling/lib/python3.8/site-packages/pandera/schemas.py:2353, in _handle_check_results(schema, check_index, check, check_obj, *check_args)
   2351         warnings.warn(error_msg, UserWarning)
   2352         return True
-&gt; 2353     raise errors.SchemaError(
   2354         schema,
   2355         check_obj,
   2356         error_msg,
   2357         failure_cases=failure_cases,
   2358         check=check,
   2359         check_index=check_index,
   2360         check_output=check_result.check_output,
   2361     )
   2362 return check_result.check_passed


SchemaError: &lt;Schema Column(name=column2, type=DataType(float64))&gt; failed element-wise validator 0:
&lt;Check less_than: less_than(-1.2)&gt;
failure cases:
   index  failure_case
0      0          22.0</code></pre>
<p>As expected, this throws a “schema error” that is informative about what went wrong and what value caused it. Finding ‘bad’ data is the first step in cleaning it up, so this library and the others like it that are appearing could be really useful.</p>
</section>
</section>
<section id="tenacity" class="level2">
<h2 class="anchored" data-anchor-id="tenacity">6. Tenacity</h2>
<p>If at first you don’t succeed, try and try again. <a href="https://tenacity.readthedocs.io/en/latest/">Tenacity</a> has several options to keep trying a function, even if execution fails. The names of the available function decorators give a clear indication as to what they do – <code>retry</code>, <code>stop_after_attempt</code>, <code>stop_after_delay</code>, <code>wait_random</code>, and there’s even a <code>wait_exponential</code>.</p>
<p>See also: R package <code>purrr</code>’s <code>insistently</code> function.</p>
<section id="example-of-tenacity" class="level3">
<h3 class="anchored" data-anchor-id="example-of-tenacity">Example of Tenacity</h3>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tenacity <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> retry, stop_after_attempt</span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@retry</span>(stop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>stop_after_attempt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb16-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> test_func():</span>
<span id="cb16-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Stopping after 3 attempts"</span>)</span>
<span id="cb16-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span></span>
<span id="cb16-7"></span>
<span id="cb16-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(test_func())</span></code></pre></div>
<pre><code>Stopping after 3 attempts
Stopping after 3 attempts
Stopping after 3 attempts



---------------------------------------------------------------------------

Exception                                 Traceback (most recent call last)

File /opt/anaconda3/envs/noodling/lib/python3.8/site-packages/tenacity/__init__.py:407, in Retrying.__call__(self, fn, *args, **kwargs)
    406 try:
--&gt; 407     result = fn(*args, **kwargs)
    408 except BaseException:  # noqa: B902


Input In [13], in test_func()
      5 print("Stopping after 3 attempts")
----&gt; 6 raise Exception


Exception: 


The above exception was the direct cause of the following exception:


RetryError                                Traceback (most recent call last)

Input In [13], in &lt;module&gt;
      5     print("Stopping after 3 attempts")
      6     raise Exception
----&gt; 8 print(test_func())


File /opt/anaconda3/envs/noodling/lib/python3.8/site-packages/tenacity/__init__.py:324, in BaseRetrying.wraps.&lt;locals&gt;.wrapped_f(*args, **kw)
    322 @functools.wraps(f)
    323 def wrapped_f(*args: t.Any, **kw: t.Any) -&gt; t.Any:
--&gt; 324     return self(f, *args, **kw)


File /opt/anaconda3/envs/noodling/lib/python3.8/site-packages/tenacity/__init__.py:404, in Retrying.__call__(self, fn, *args, **kwargs)
    402 retry_state = RetryCallState(retry_object=self, fn=fn, args=args, kwargs=kwargs)
    403 while True:
--&gt; 404     do = self.iter(retry_state=retry_state)
    405     if isinstance(do, DoAttempt):
    406         try:


File /opt/anaconda3/envs/noodling/lib/python3.8/site-packages/tenacity/__init__.py:361, in BaseRetrying.iter(self, retry_state)
    359     if self.reraise:
    360         raise retry_exc.reraise()
--&gt; 361     raise retry_exc from fut.exception()
    363 if self.wait:
    364     sleep = self.wait(retry_state=retry_state)


RetryError: RetryError[&lt;Future at 0x7f9f10f73eb0 state=finished raised Exception&gt;]</code></pre>
</section>
</section>
<section id="streamlit" class="level2">
<h2 class="anchored" data-anchor-id="streamlit">7. Streamlit</h2>
<p>I really like <a href="https://www.streamlit.io/">streamlit</a>, which sells itself as the fastest way to build data apps that are displayed in a browser window. And my experience is that it’s true; you can do a lot with a very simple set of commands. But there’s also depth there too - a couple of the examples on their site show how streamlit can serve up explainable AI models. Very cool.</p>
<p>If you build a streamlit app and want to host it on the web, Streamlit and Heroku offer free hosting.</p>
<p>Because streamlit serves up content in a browser, it’s not (currently) possible to demonstrate it in a Jupyter Notebook. However, this gif gives you an idea of how easy it is to get going:</p>
<p><img src="https://aeturrell.github.io/markov-wanderer/posts/10-lesser-known-python-packages/https:/miro.medium.com/max/1400/1*6GG7uRmUw74CRKCXD-lr1w.gif" width="800"></p>
<p>See also: <a href="https://plotly.com/dash/">Dash</a></p>
</section>
<section id="black" class="level2">
<h2 class="anchored" data-anchor-id="black">8. Black</h2>
<p><a href="https://black.readthedocs.io/en/stable/index.html">Black</a> is an uncompromising code formatter (“you can have it any colour you want, as long as it’s black”). Lots of people will find it overbearing, and think the way it splits code across lines is distracting. However, if you want to easily and automatically implement a code style – without compromise – then it’s great and you can even set it up as a github action to run on your code every time you commit. Less time formatting sounds good to me.</p>
<p>Black is run from the command line or via IDE integration, so the example here is just a before and after of what happens to a function definition:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># in:</span></span>
<span id="cb18-2"></span>
<span id="cb18-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> very_important_function(template: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>variables, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>: os.PathLike, engine: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, header: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, debug: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb18-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Applies `variables` to the `template` and writes to `file`."""</span></span>
<span id="cb18-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb18-6">        ...</span>
<span id="cb18-7"></span>
<span id="cb18-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># out:</span></span>
<span id="cb18-9"></span>
<span id="cb18-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> very_important_function(</span>
<span id="cb18-11">    template: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>,</span>
<span id="cb18-12">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>variables,</span>
<span id="cb18-13">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>: os.PathLike,</span>
<span id="cb18-14">    engine: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>,</span>
<span id="cb18-15">    header: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb18-16">    debug: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb18-17">):</span>
<span id="cb18-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Applies `variables` to the `template` and writes to `file`."""</span></span>
<span id="cb18-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb18-20">        ...</span></code></pre></div>
<p>See also: <a href="https://github.com/google/yapf">yapf</a>, yet another code formatter, from Google.</p>
<section id="live-demo" class="level3">
<h3 class="anchored" data-anchor-id="live-demo">Live demo</h3>
</section>
</section>
<section id="pyinstrument-for-profiling-code" class="level2">
<h2 class="anchored" data-anchor-id="pyinstrument-for-profiling-code">9. Pyinstrument for profiling code</h2>
<p>Profiling is about finding where the bottlenecks are in your code; potentially in your data too.</p>
<p><a href="https://github.com/joerick/pyinstrument">pyinstrument</a> is a simple-to-use tool that extends the built-in Python profiler with HTMLs output that can be rendered in a Jupyter notebook cell.</p>
<p>Using this profiler is very simple – just wrap ‘start’ and ‘stop’ function calls around the code you’re interested in and show the results in text or HTML. The HTML report is interactive. To use the HTML report in a Jupyter notebook, you’ll need to use</p>
<pre><code>from IPython.core.display import display, HTML</code></pre>
<p>and then</p>
<pre><code>display(HTML(profiler.output_html()))</code></pre>
<p>In the example below, I’ll use the display as text option.</p>
<p>See also: <a href="https://github.com/emeryberger/scalene">scalene</a>, which I almost featured instead because it profiles both code and memory use (important for data science). However, it isn’t supported on Windows (yet?) and it doesn’t seem to display a report inline in Jupyter notebooks.</p>
<section id="example-of-pyinstrument" class="level3">
<h3 class="anchored" data-anchor-id="example-of-pyinstrument">Example of Pyinstrument</h3>
</section>
</section>
<section id="pyinstrument-for-profiling-code-1" class="level2">
<h2 class="anchored" data-anchor-id="pyinstrument-for-profiling-code-1">9. Pyinstrument for profiling code</h2>
<p>Profiling is about finding where the bottlenecks are in your code; potentially in your data too.</p>
<p><a href="https://github.com/joerick/pyinstrument">pyinstrument</a> is a simple-to-use tool that extends the built-in Python profiler with HTMLs output that can be rendered in a Jupyter notebook cell.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://aeturrell.github.io/markov-wanderer/posts/10-lesser-known-python-packages/https:/github.com/joerick/pyinstrument/raw/main/docs/img/screenshot.jpg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">pyinstrument screenshot</figcaption>
</figure>
</div>
<p>Using this profiler is very simple – just wrap ‘start’ and ‘stop’ function calls around the code you’re interested in and show the results in text or HTML. The HTML report is interactive. To use the HTML report in a Jupyter notebook, you’ll need to use</p>
<pre><code>from IPython.core.display import display, HTML</code></pre>
<p>and then</p>
<pre><code>display(HTML(profiler.output_html()))</code></pre>
<p>In the example below, I’ll use the display as text option.</p>
<p>See also: <a href="https://github.com/emeryberger/scalene">scalene</a>, which I almost featured instead because it profiles both code and memory use (important for data science). However, it isn’t supported on Windows (yet?) and it doesn’t seem to display a report inline in Jupyter notebooks.</p>
<section id="example-of-pyinstrument-1" class="level3">
<h3 class="anchored" data-anchor-id="example-of-pyinstrument-1">Example of Pyinstrument</h3>
<p>Run this code in a notebook to check it out.</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pyinstrument <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Profiler</span>
<span id="cb23-2"></span>
<span id="cb23-3"></span>
<span id="cb23-4">profiler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Profiler()</span>
<span id="cb23-5">profiler.start()</span>
<span id="cb23-6"></span>
<span id="cb23-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fibonacci(n):</span>
<span id="cb23-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb23-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BE POSITIVE!!!"</span>)</span>
<span id="cb23-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb23-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb23-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb23-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb23-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb23-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> fibonacci(n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> fibonacci(n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb23-16"></span>
<span id="cb23-17">fibonacci(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb23-18"></span>
<span id="cb23-19">profiler.stop()</span>
<span id="cb23-20"></span>
<span id="cb23-21"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(profiler.output_text(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">unicode</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>))</span></code></pre></div>
</section>
</section>
<section id="alive-progress" class="level1">
<h1>10. Alive progress</h1>
<p><a href="https://github.com/rsalmei/alive-progress">alive-progress</a> is a bit less straitlaced than tdqm but is unfortunately not yet available in notebooks. Here’s a gif that shows how it looks when run from a console launched on the command line.</p>
<p><img src="https://aeturrell.github.io/markov-wanderer/posts/10-lesser-known-python-packages/https:/raw.githubusercontent.com/rsalmei/alive-progress/master/img/alive-demo.gif" width="600"></p>
<section id="see-also-tdqm" class="level3">
<h3 class="anchored" data-anchor-id="see-also-tdqm">See also: tdqm</h3>
<p><img src="https://aeturrell.github.io/markov-wanderer/posts/10-lesser-known-python-packages/https:/img.tqdm.ml/tqdm.gif" width="700"></p>
</section>
<section id="live-demo-of-alive-progress" class="level3">
<h3 class="anchored" data-anchor-id="live-demo-of-alive-progress">Live demo of alive progress</h3>
</section>
<section id="bonus-r-style-analysis-in-python" class="level2">
<h2 class="anchored" data-anchor-id="bonus-r-style-analysis-in-python">Bonus: R-style analysis in Python!?</h2>
<p>Some data scientists swear by two of R’s most loved declarative packages, one for data analysis (dplyr) and one for plotting (ggplot2), and miss them when they do a project in Python. Although certainly not as well developed as the original packages, there are Python-inspired equivalents of both, called <a href="https://github.com/machow/siuba">siuba</a> and <a href="https://plotnine.readthedocs.io/en/stable/">plotnine</a> respectively.</p>
<p>It’s worth noting that there are <em>imperative</em> and <em>declarative</em> plotting libraries. In imperative libraries, you often specify all of the steps to get the desired outcome, while in declarative libraries you often specify the desired outcome without the steps. Imperative plotting gives more control and some people may find each step clearer to read, but it can also be fiddly and cumbersome, especially with simple plots. Declarative plotting trades away control and flexibility in favour of tried and tested processes that can quickly produce good-looking standardised charts, but the specialised syntax can be a barrier for newcomers.</p>
<p>ggplot/plotnine are both declarative, while matplotlib is imperative.</p>
<p>As for data analysis, Python’s pandas library is very similar to dplyr, it just has slightly different names for functions (eg <code>summarize</code> versus <code>aggregate</code> but both use <code>groupby</code>) and pandas uses <code>.</code> while dplyr tends to use <code>%&gt;%</code> to apply the output of one function to the input of another.</p>
<section id="plotnine" class="level3">
<h3 class="anchored" data-anchor-id="plotnine">Plotnine</h3>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> plotnine <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb24-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> plotnine.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> mtcars</span>
<span id="cb24-3"></span>
<span id="cb24-4"></span>
<span id="cb24-5">(ggplot(mtcars, aes(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'wt'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mpg'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'factor(gear)'</span>))</span>
<span id="cb24-6"> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> geom_point()</span>
<span id="cb24-7"> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> stat_smooth(method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lm'</span>)</span>
<span id="cb24-8"> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> facet_wrap(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'~gear'</span>))</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://aeturrell.github.io/markov-wanderer/posts/10-lesser-known-python-packages/10_less_img_36.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Output from plotnine</figcaption>
</figure>
</div>
</section>
<section id="siuba" class="level3">
<h3 class="anchored" data-anchor-id="siuba">Siuba</h3>
<p>Siuba is more or less similar to dplyr in R. It even has a pipe operator - although in Python’s <strong>pandas</strong> data analysis package, <code>.</code> usually plays the same role as the pipe in dplyr.</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> siuba <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> group_by, summarize, mutate, _</span>
<span id="cb25-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> siuba.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> mtcars</span>
<span id="cb25-3"></span>
<span id="cb25-4">mtcars.head()</span></code></pre></div>
<div>


<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
mpg
</th>
<th>
cyl
</th>
<th>
disp
</th>
<th>
hp
</th>
<th>
drat
</th>
<th>
wt
</th>
<th>
qsec
</th>
<th>
vs
</th>
<th>
am
</th>
<th>
gear
</th>
<th>
carb
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
21.0
</td>
<td>
6
</td>
<td>
160.0
</td>
<td>
110
</td>
<td>
3.90
</td>
<td>
2.620
</td>
<td>
16.46
</td>
<td>
0
</td>
<td>
1
</td>
<td>
4
</td>
<td>
4
</td>
</tr>
<tr>
<th>
1
</th>
<td>
21.0
</td>
<td>
6
</td>
<td>
160.0
</td>
<td>
110
</td>
<td>
3.90
</td>
<td>
2.875
</td>
<td>
17.02
</td>
<td>
0
</td>
<td>
1
</td>
<td>
4
</td>
<td>
4
</td>
</tr>
<tr>
<th>
2
</th>
<td>
22.8
</td>
<td>
4
</td>
<td>
108.0
</td>
<td>
93
</td>
<td>
3.85
</td>
<td>
2.320
</td>
<td>
18.61
</td>
<td>
1
</td>
<td>
1
</td>
<td>
4
</td>
<td>
1
</td>
</tr>
<tr>
<th>
3
</th>
<td>
21.4
</td>
<td>
6
</td>
<td>
258.0
</td>
<td>
110
</td>
<td>
3.08
</td>
<td>
3.215
</td>
<td>
19.44
</td>
<td>
1
</td>
<td>
0
</td>
<td>
3
</td>
<td>
1
</td>
</tr>
<tr>
<th>
4
</th>
<td>
18.7
</td>
<td>
8
</td>
<td>
360.0
</td>
<td>
175
</td>
<td>
3.15
</td>
<td>
3.440
</td>
<td>
17.02
</td>
<td>
0
</td>
<td>
0
</td>
<td>
3
</td>
<td>
2
</td>
</tr>
</tbody>

</table>
</div>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">(mtcars</span>
<span id="cb26-2">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> mutate(normalised <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (_.hp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> _.hp.mean())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>_.hp.std()) </span>
<span id="cb26-3">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> group_by(_.cyl)</span>
<span id="cb26-4">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> summarize(norm_hp_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _.normalised.mean())</span>
<span id="cb26-5">  )</span></code></pre></div>
<div>


<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
cyl
</th>
<th>
norm_hp_mean
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
4
</td>
<td>
-0.934196
</td>
</tr>
<tr>
<th>
1
</th>
<td>
6
</td>
<td>
-0.355904
</td>
</tr>
<tr>
<th>
2
</th>
<td>
8
</td>
<td>
0.911963
</td>
</tr>
</tbody>

</table>
</div>


</section>
</section>
</section>

 ]]></description>
  <category>code</category>
  <category>open-source</category>
  <category>python</category>
  <guid>https://aeturrell.github.io/markov-wanderer/posts/10-lesser-known-python-packages/index.html</guid>
  <pubDate>Fri, 23 Oct 2020 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Get organised</title>
  <dc:creator>Arthur Turrell</dc:creator>
  <link>https://aeturrell.github.io/markov-wanderer/posts/get-organised/index.html</link>
  <description><![CDATA[ 




<section id="best-practice-for-research-project-organisation" class="level1">
<h1>Best practice for research project organisation</h1>
<p>This monster blog post is going to discuss how to organise your a data science project or research project: data, code and outputs. I’ll cover how to structure the project, version control, data and data storage, analytical tools, coding standards, and what to do when your project is over.</p>
<section id="caveats" class="level5">
<h5 class="anchored" data-anchor-id="caveats">Caveats</h5>
<p>Of course, these are just my opinions, they’re far from exhaustive, and there may well be good reasons to set up your project differently depending on what it is that you’re doing. I’m interested in hearing different perspectives so get in touch if you have them.</p>
<p>Inevitably the post is going to be geared toward Python because it’s my primary language but much of the advice applies equally well to R. Similarly, although most of what I’m saying applies across platforms, in some in places it may be more relevant to Mac OS.</p>
<p>I’m not going to discuss topics like unit tests, automatic creation of documentation, or making the project into an installable package in this post and, for most small research projects, these features would probably be overkill.</p>
<p>For a more detailed perspective on best practice research project organisation, see <a href="https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1005510">Good enough practices in scientific computing. PLoS computational biology, 13(6), e1005510</a>. A similar post from a more pure data science perspective may be <a href="https://www.kaggle.com/rtatman/reproducible-research-best-practices-jupytercon">found here</a>, and there’s a <a href="https://drivendata.github.io/cookiecutter-data-science/">machine learning oriented cookiecutter project here</a>.</p>
</section>
<section id="the-example-project" class="level4">
<h4 class="anchored" data-anchor-id="the-example-project">The example project</h4>
<p>There’s a <a href="https://github.com/aeturrell/cookie-cutter-research-project">small research project github repository</a> that accompanies this post. To use it as the basis of your small research project, open up a command line and type <code>git clone https://github.com/aeturrell/cookie-cutter-research-project.git</code> in the directory in which you want to clone it, or download it directly from github.</p>
<p>It is in Python 3 and uses the ONS API to download some macroeconomic time series, process them into tidy data, and then use them within a dynamic factor model† inspired by <a href="http://www.chadfulton.com/">Chad Fulton</a>’s tutorials/notebooks which you can find <a href="http://www.chadfulton.com/fulton_statsmodels_2017/sections/6-out-of-the-box_models.html#dynamic-factors">here</a> and <a href="https://www.statsmodels.org/dev/examples/notebooks/generated/statespace_dfm_coincident.html">here</a>.</p>
<p>It is very much a toy example and not intended to be accurate or say anything at all about the real world! It is designed to showcase how the various components of what I’ll say below fit together in practice.</p>
<p>Within the example project, there are Latex templates for both slides and a working paper. These are based on <a href="https://twitter.com/paulgp?lang=en">Paul Goldsmith-Pinkham</a>’s excellent templates, the originals of which you can find <a href="https://github.com/paulgp/beamer-tips">here for slides</a> and <a href="https://github.com/paulgp/draft-tex">here for the working paper</a>.</p>
<p>Okay, on to the main event…</p>
</section>
<section id="table-of-contents" class="level2">
<h2 class="anchored" data-anchor-id="table-of-contents">Table of Contents</h2>
<ol type="1">
<li>Project structure</li>
<li>Version control</li>
<li>Data</li>
<li>Analytical tools</li>
<li>Coding standards</li>
<li>Writing the paper</li>
<li>After the project</li>
</ol>
</section>
<section id="project-structure" class="level2">
<h2 class="anchored" data-anchor-id="project-structure">Project structure</h2>
<p>The structure of your project should be a directed acyclic graph with raw data making up the first nodes and research outputs (e.g.&nbsp;paper or slides) the final nodes. Here’s an example for the cookiecutter research project:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://aeturrell.github.io/markov-wanderer/posts/get-organised/cookiecutterorg.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">A diagram of the organisation of the code</figcaption>
</figure>
</div>
<p>Why this directed acyclic graph structure? For reproducibility, you can’t have steps earlier on in the project that depend on steps later on in the process. This may seem completely obvious but, believe it or not, I have seen projects where later stage outputs are looped back to be inputs into earlier stages.</p>
<p>Another important principle here is to separate out different phases of the analysis. Sometimes this is about avoiding repeated effort - going from raw data to cleaned data might be very expensive in terms of time.</p>
<p>Before you start your project, it’s really worth taking the time to sketch out on paper how everything will fit together and which parts might depend on each other. Putting a lot of effort into this step will save you a lot of time in the long run. Armed with a clear structure, you will write better, more modular code that does not involve repetition. Of course, research work is inherently uncertain and you shouldn’t be afraid to change up the structure if the focus or goals of the project change.</p>
<p>Give careful thought to file naming (e.g.&nbsp;scripts should typically say what they do, and data should say what it is). If there are natural groups of content within a directory (e.g.&nbsp;different types of raw data, or different stages in the analysis), create clearly named subdirectories rather than dumping everything in one huge and unwieldy folder.</p>
<p>Use relative paths rather than absolute – set up the code repository so a co-author or reviewer can pick up the entire directory structure, drop in a random place on a random machine and still run it.</p>
<p>If you haven’t tried putting figures and tables in a separate directory to your Latex code before then the example project implements an efficient way to do so. You set a single path and can then refer to outputs only by their name (not their full path). If you want to be even more fancy you can <a href="http://www.jespertoftkristensen.com/JTK/Blog/Entries/2014/1/13_Organize_your_LaTeX_Project.html">move files around</a> during Latex compilation.</p>
<p>Perhaps you need to output your (Latex) writing to Microsoft’s Word format or to markdown as part of your workflow? In that case, I’d suggest using <a href="https://pandoc.org/">pandoc</a> but be warned that ensuring references, citations, equations, and inputs are included correctly can be fiddly.</p>
<p>One other important principle: friends do not let friends use whitespace in filenames or paths.</p>
<section id="configuration-files" class="level5">
<h5 class="anchored" data-anchor-id="configuration-files">Configuration files</h5>
<p>You’ll notice that there is a config file, config.yaml, that sits above everything else. The purpose of this is to make adding global settings to your project easier, especially if they are directories. The advantage of this config file is that you can see what settings are being run from one place and, if you do need to change the structure of the project, you only have to do it in one place. Similarly, others on the project can clearly see when and how important settings were changed without trawling through lots of code.</p>
<p>In the example project, I’ve put settings for plots into the config.yaml where they can be conveniently loaded. These start with the <code>- viz:</code> heading in the file.</p>
<p>.yaml is not the only configuration file available and I don’t have a very strong view as to which is best as they all have their pros and cons. I’ve used both .ini and .yaml, and both can work for a simple project. You can find more about the ins and outs of different config file formats <a href="https://martin-thoma.com/configuration-files-in-python/">here</a> (with handy examples) and <a href="https://hackersandslackers.com/simplify-your-python-projects-configuration/">here</a>.</p>
</section>
</section>
<section id="version-control" class="level2">
<h2 class="anchored" data-anchor-id="version-control">Version control</h2>
<p>There are many articles on why you should use version control if you’re doing any sort of coding and I’m not going to go over the arguments here. I will link to <a href="https://www.atlassian.com/git/tutorials/what-is-version-control">this primer</a> instead. Most people use <a href="https://www.atlassian.com/git/tutorials/what-is-git">git</a> for version control (it’s completely free). Git has a painful learning curve but there are just a handful of commands that you’ll use most of the time, especially on smaller projects. And, if you do run into trouble, there’s always <a href="https://www.ohshitgit.com">www.ohshitgit.com</a>. Note that git is the tool to manage version control while github, gitlab, and bitbucket are hosting services for git repositories.</p>
<p>Beyond the software development-type reasons for version control, there are benefits that are particular to research. Journals increasingly require code to be submitted alongside papers; version control encourages good code management that will make submitting your code much easier when the time comes. If you host your code on platforms such as <a href="https://github.com/">github</a> and <a href="https://about.gitlab.com/">gitlab</a>, privately at first, and then publicly when you publish, you can significantly extend the impact of your work. Those same platforms enable collaboration on code, including Latex, with co-authors. Even better, you can use tools like <a href="https://www.atlassian.com/git/tutorials/inspecting-a-repository/git-blame">git-blame</a> to understand who changed what and when - useful in all kinds of situations, not just blaming co-authors for that misplaced semi-colon.</p>
<blockquote class="twitter-tweet blockquote" data-lang="en">
<p lang="en" dir="ltr">
who called it <code>git blame</code> and not <code>git whose-line-is-it-anyway</code>?
</p>
— Jessica🏳️‍🌈 (<span class="citation" data-cites="ticky">@ticky</span>) <a href="https://twitter.com/ticky/status/1032028502961209344?ref_src=twsrc%5Etfw">August 21, 2018</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>The other great use of the various git platforms is to track bugs, to do lists, and even to host wikis.</p>
<p>A few extra tips on the interaction between version control and project structure.</p>
<p>Version control is not meant to track data, only code. However, for outputs, such as figures and tables, it’s less clear where to draw the line. But (as shown above) I’d advise having a scratch-outputs folder that is not under version control that you can spam with hundreds of figures and tables and a (final) outputs folder that holds the tables and figures that are going to make it into the paper and/or slides.</p>
<p>Latex is code! Put it under version control. This also makes it easy to collaborate with co-authors, and work out who changed what when. Some prefer to use tools like <a href="https://www.overleaf.com/">Overleaf</a>, an online Latex editor with some WYSIWYG features, instead.</p>
<p>There are some folders, e.g.&nbsp;raw/, that you’d like to keep even though none of the <em>contents</em> of the folder should be under version control. There is a special file for that, called .gitkeep, which tells git you’d like to keep the folder. The file can be completely empty and, on Unix systems, you can create it with <code>touch raw/.gitkeep</code> in the command line.</p>
<p>Likewise, there is a lot of gunk generated by Latex compilation that you probably don’t want to keep under version control. This is what the magic .gitignore file is for in the project structure. It specifies what types of file to ignore. The .gitignore file in the example project will automatically ignore Latex compilation files, everything in the raw/ and output-scratch/ folders, and anything generated indirectly by running Python code or Latex compilation.</p>
</section>
<section id="data" class="level2">
<h2 class="anchored" data-anchor-id="data">Data</h2>
<p>I find it useful to think about the main possible classes of data in a research project as being raw, intermediate, cleaned, and output.</p>
<p>As the example project is simple, we are going to skip intermediate data and go straight for clean data.</p>
<section id="raw-data" class="level5">
<h5 class="anchored" data-anchor-id="raw-data">Raw data</h5>
<p>Raw data is just that. No matter how horrible a format it comes to you in (a 50 sheet Excel file with different formats on each sheet anyone?), you should preserve that. Don’t mess with it, keep it to one side and derive other, better data from it. You’ll need it later when you try and replicate your own work.</p>
</section>
<section id="intermediate-data" class="level5">
<h5 class="anchored" data-anchor-id="intermediate-data">Intermediate data</h5>
<p>Intermediate data is the data you get once you’ve made some progress on getting whatever mess you started with into shape. Maybe you had 5 different spreadsheets and you’ve managed to clean each one and dump them into CSVs. Yes, they are still not tidy, or in the format you need for analysis, or merged. But you’ve made some progress, progress worth making into a distinct phase of your analysis.</p>
<p>Intermediate data can be very large, in which case you may want to consider the speed and efficiency of storing it. For the python library pandas, there’s a <a href="https://towardsdatascience.com/the-best-format-to-save-pandas-data-414dca023e0d">nice post here</a> looking at file sizes and loading/saving speeds. As noted, intermediate data should not be under version control. Data versioning does exist but I’ve not (yet) seen it used for research projects - see <a href="https://github.com/pachyderm/pachyderm">pachyderm</a> for an example.</p>
</section>
<section id="cleaned-data" class="level5">
<h5 class="anchored" data-anchor-id="cleaned-data">Cleaned data</h5>
<p>Cleaned data is what’s used to do the analysis. It’s data that’s ready to go into a machine learning model or regression. If a colleague were working on a similar project, this is (hopefully) what you’d send them instead of the 50-sheet Excel monstrosity.</p>
<p>Cleaned data should be stored in tidy format, that is data in which each observation is a row, each variable is a column, and each type of observation unit forms a table. This figure shows a visual example of tidy data.</p>
<p><img src="https://aeturrell.github.io/markov-wanderer/posts/get-organised/tidy_data_example.png" class="img-fluid" alt="A diagram showing how tidy data work."> From <a href="https://r4ds.had.co.nz/tidy-data.html">R for Data Science</a>.</p>
<p>If you want to find out more about why it’s good practice to store your data in tidy format then it’s worth reading <a href="https://www.jstatsoft.org/article/view/v059i10">Hadley Wickham’s paper on it</a>.</p>
<p>In the vast majority of cases, the best data file format for your project’s cleaned data is CSV. Everyone can open it, no matter what analytical tool or operating system they are using. As a storage format, it’s unlikely to change. Without going into the <a href="http://kunststube.net/encoding/">mire of different encodings</a>, save it as UTF-8 (note that this is not the default encoding in Windows). This is especially true of text heavy data.</p>
<p>Of course, CSV is great for tabular data but won’t work for many other kinds. For other cases, Stanford’s library has put together a <a href="https://library.stanford.edu/research/data-management-services/data-best-practices/best-practices-file-formats">useful list</a> of preferred file formats for archiving everything from geospatial data to films.</p>
<p>Do not store your data in Excel file formats. Ever. Firstly, it’s not an open format, it’s proprietary, even if you can open it with many open source tools. But, more importantly, Excel can do bad things like <a href="http://www.win-vector.com/blog/2014/11/excel-spreadsheets-are-hard-to-get-right/">changing the underlying values in your dataset</a> (dates and booleans), and it tempts other users to start slotting Excel code around the data. This is bad - best practice is to <strong>separate</strong> code and data. Code hidden in Excel cells is not very transparent or auditable.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://aeturrell.github.io/markov-wanderer/posts/get-organised/excel_data_tweet.jpg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Excel isn’t all that!</figcaption>
</figure>
</div>
<p>Should you put your tidy, cleaned data under version control? Probably not. But if it’s small and unlikely to change much, it can be quite convenient to do so.</p>
</section>
<section id="output-data" class="level5">
<h5 class="anchored" data-anchor-id="output-data">Output data</h5>
<p>These are the final figures and tables that tell the story in your analysis. As noted, it’s convenient to put the ones that are going to make it into your paper and any presentations you give under version control, and have a scratch folder for the rest. This a folder that’s for the many extra figures and tables that you’ll create, and perhaps want to glance at, but won’t hold on to.</p>
<p>For figures, most journals require that you use lossless formats such as PDF and EPS. .eps and .pdf are vector image formats, they work by representing the shapes and lines of the image and so can be reproduced any resolution. They are distinct from rasterised formats (.png, .jpg) that work by having pixels that reproduce the image but only at a specific resolution. For images made up of smooth shapes and colours, like most charts, vector formats are superior because they encode the information to show an image at any resolution. For complex images, such as photographs, jpg is usually better because there is a natural limit to the resolution you would ever need in such an image. As journals tend to prefer it, my general recommendation is to use .eps wherever possible and, if you do have real images, find out what format the journal prefers. Not only do .eps files look better, but for figures they tend to take up less space on disk versus the equivalent png or jpg file. Modern programming languages like R and Python can export to all of these formats.</p>
<p>For reasons that are not at all obvious, Powerpoint does not play nicely with vector images but Keynote (Mac OS) and Beamer/Latex (all operating systems) do.‡</p>
<p>What about tables? My current strategy is to export these directly to Latex as .tex files. It’s not so easy to look at these without compiling them using Latex but it saves a lot of time when (automatically) incorporating them into your paper and presentations. Tables as tex files also take up little space on disk and can happily go under version control.*</p>
</section>
</section>
<section id="analytical-tools" class="level2">
<h2 class="anchored" data-anchor-id="analytical-tools">Analytical tools</h2>
<p>By analytical tools, I really mean the combination of programming language and integrated development environment (IDE) that you use. The best practice here is to use the right tool for the job.</p>
<p>In addition to that, it’s worth thinking about how accessible your code will be to others when you release it. Code written in a proprietary language that requires users to shell out some cash just to run it is inevitably less accessible than code written in open source languages.</p>
<p>Unless you’re running very computationally intensive code that needs C++ or Fortran, you’re likely to be using one of Python, R, Julia, or Matlab. If you’re coming from the social sciences then perhaps you’ll be using Stata or EViews. Some of these languages come bundled with, and are almost inseparable from, their IDEs.</p>
<p>As for which IDE to use, many heavy R users swear by RStudio and I know of many Python users who either prefer Spyder (which comes bundled with the Anaconda distribution of Python) or PyCharm (anecdotally this seems to be preferred by software dev types).</p>
<p>Recently, I’ve mostly been using Visual Studio Code. VS Code is an extendible text editor and IDE that is free and very impressive: I’ve used it to run code in Python, R, markdown, and Latex. I believe it also supports Octave (aka free Matlab) and Julia, but I haven’t tested these. There’s syntax highlighting for both Stata and Matlab and - if you already have Stata installed - you can run apparently run Stata code from VSCode! Support for Python is very good; you can switch between environments within the IDE, launch interactive consoles, and <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack">remotely connect</a> to an instance of Python running elsewhere. Switching between Python/conda environments with the click of a button is revelatory. See <a href="https://code.visualstudio.com/docs/languages/overview">here for a full list of supported languages</a>.</p>
<p>Most additional features require the installation of packages that can be found via the <a href="https://marketplace.visualstudio.com/VSCode">package search</a>. Two essential extensions are <a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens">git-lens</a> and <a href="https://marketplace.visualstudio.com/items?itemName=shd101wyy.markdown-preview-enhanced">Markdown preview enhanced</a>.</p>
</section>
<section id="coding-standards" class="level2">
<h2 class="anchored" data-anchor-id="coding-standards">Coding standards</h2>
<p>The validity of your research depends, to a frightening degree, on the quality of your code. There are ways to code better and minimise the risk of mistakes even for small research projects that don’t look anything like a software development project. Most languages have some sort of style guide to help you. Following them will make your code easier to read, more consistent, and more manageable.</p>
<p>For R, there doesn’t seem to be a single agreed upon style, but I’m sure you could do much worse than follow Hadley Wickham’s <a href="http://adv-r.had.co.nz/Style.html">R style guide</a>, itself based upon the Google R style guide, at least if you’re using the <code>tidyverse</code> ecosystem.</p>
<p>For Python, there is <a href="https://www.python.org/dev/peps/pep-0008/">PEP8</a>. Yes, it’s a bit of a monster. Rather than read through it, just install a linter extension in your favourite IDE (see <a href="https://code.visualstudio.com/docs/python/linting">this guide</a> for VS Code) and your code will be automatically checked for most style breaches as you type. It’s a bit daunting to turn this on at first but it encourages you to produce much cleaner code.</p>
<p>In Python, the naming convention for most items is lower case separated by underscores, e.g.&nbsp;‘this_is_a_script.py’, also known as snake case. There are different naming conventions (shown below) but it doesn’t matter which is used, as long as it’s consistent.</p>
<p><a href="https://twitter.com/allison_horst">Allison Horst</a> made this great cartoon of the different conventions that are in use.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://aeturrell.github.io/markov-wanderer/posts/get-organised/in_that_case.jpeg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Allison Horst cartoon of the different case conventions in coding.</figcaption>
</figure>
</div>
<p>For research, it’s worth having the extensions and robustness checks that reviewers might request in mind early on. You don’t want to be faced with a request that’s going to force you to do a huge re-write of your code. Better to try and anticipate reasonable variations on what you’ve done from the start, difficult though that may be.</p>
<p>Make your code as modular as possible, and never re-write the same code twice. If the same code is being re-run, stick it in a function. You will save time in the long run and having functions defined once and only once makes it easy to change in the future too.</p>
<p>Code comments can be helpful. The best code actually has very <em>few</em> comments because what’s happening is clear without them. When that high bar can’t be reached, add comments to make it easier for a reader to understand what your code is doing. Most likely, that reader will be future you.</p>
<p>Perform code reviews. Give what you’ve done to a colleague and ask them to go through it line-by-line checking it works as intended. If they do this properly and don’t find any mistakes or issues then I’d be very surprised. Return the favour to magically become a better coder yourself.</p>
<p>Choose clarity over optimisation, at least as a starting point. Computation is cheap, brain time is not. If you really need to optimise, do it later when you’ve figured out where it will count.</p>
</section>
<section id="writing-the-paper" class="level2">
<h2 class="anchored" data-anchor-id="writing-the-paper">Writing the paper</h2>
<p>This is geared towards how people write papers in economics but there’s plenty of good advice for other fields too.</p>
<p>Many of these notes are shameless copy and paste jobs from the writings of much more experienced researchers. Specifically, Keith Head’s <a href="http://blogs.ubc.ca/khead/research/research-advice/formula">The Introduction Formula</a>, Marc Bellamere’s <a href="http://marcfbellemare.com/wordpress/12797">The Middle Bits Formula</a> for applied papers, Marc Bellamere’s <a href="http://marcfbellemare.com/wordpress/12060">The Conclusion Formula</a>, <a href="https://twitter.com/rskudesia/status/1120324415424585728?s=20">Advice on how to structure a paper</a> from a mysterious, but very helpful, reviewer 3 as received by Ravi Kudesia, and a <a href="https://eebatou.wordpress.com/2008/01/19/your-10-point-checklist-before-sending-off-that-manuscript/">Checklist for before submission</a> from Mike Kaspari.</p>
<p>These notes are included in the latex file of the cookie cutter project, appearing in the relevant sections of the draft paper template.</p>
<section id="overall-contribution" class="level3">
<h3 class="anchored" data-anchor-id="overall-contribution">Overall contribution</h3>
<p>Ask the following questions: 1. How does the manuscript change, challenge, or fundamentally advance knowledge of the concepts, relationships, models, or theories embedded in the literature on X? (X is the literature to which you want to contribute). 2. How does the manuscript cause us to think about X in a way that would not normally be anticipated from extrapolations of existing work, thereby advancing future work in an important and useful way? In response to question 1, it can be useful to create a 3x4 matrix. On one side list (1) change, (2) challenge, and (3) fundamentally alter. On the other side, list (1) concepts, (2) relationships, (3) models, and (4) theories.</p>
<p>One way to rethink the structure and contribution of a paper is to ensure that these 10 points are well-covered: - What is the focus? - Why it is relevant? - What is known/not known (and why it needs attention)? - What is the burning question? - How is the question addressed (theoretically/empirically)? - What was done? - What was found? - What does it mean? - What has been added to the discussion? - Why should others care?</p>
<p>This approach will help develop the argument of a paper.</p>
</section>
<section id="introduction" class="level3">
<h3 class="anchored" data-anchor-id="introduction">Introduction</h3>
<section id="the-hook" class="level4">
<h4 class="anchored" data-anchor-id="the-hook">The Hook</h4>
<p>Attract the reader’s interest by telling them that this paper relates to something interesting. What makes a topic interesting? Some combination of the following attributes makes Y something worth looking at:</p>
<ul>
<li>Y matters: When Y rises or falls, people are hurt or helped.</li>
<li>Y is puzzling: it defies easy explanation.</li>
<li>Y is controversial: some argue one thing while other say another.</li>
<li>Y is big (like the service sector) or common (like traffic jams). Things to avoid:</li>
<li>The bait and switch: promising an interesting topic but delivering something else, in particular, something boring.</li>
<li>``all my friends are doing it’’: presenting no other motivation for a topic than that other people have written papers on it.</li>
</ul>
</section>
<section id="the-question" class="level4">
<h4 class="anchored" data-anchor-id="the-question">The Question</h4>
<p>Tell the reader what the paper does. Think of this as the point in a trial where having detailed the crime, you now identify a perpetrator and promise to provide a persuasive case. The reader should have an idea of a clean research question that will have a more or less satisfactory answer by the end of the paper. The question may take two paragraphs. At the end of the first (2nd paragraph of the paper) or possibly beginning of the second (3rd paragraph overall) you should probably have the ``This paper addresses the question’’ sentence.</p>
</section>
<section id="the-antecedents" class="level4">
<h4 class="anchored" data-anchor-id="the-antecedents">The Antecedents</h4>
<p>Identify the prior work that is critical for understanding the contribution the paper will make. The key mistake to avoid here are discussing papers that are not essential parts of the intellectual narrative leading up to your own paper. Give credit where due but establish, in a non-insulting way, that the prior work is incomplete or otherwise deficient in some important way.</p>
</section>
<section id="the-value-add" class="level4">
<h4 class="anchored" data-anchor-id="the-value-add">The Value-Add</h4>
<p>Describe approximately 3 contributions this paper will make relative to the antecedents. This paragraph might be the most important one for convincing referees not to reject the paper. A big difference between it and the earlier “question” paragraph is that the contributions should make sense only in light of prior work whereas the basic research question of the paper should be understandable simply in terms of knowing the topic (from the hook paragraph). “Antecedents” and “Value-added” may be intertwined. They may also take up to 3 paragraphs.</p>
</section>
<section id="the-road-map" class="level4">
<h4 class="anchored" data-anchor-id="the-road-map">The Road Map</h4>
<p>I find this tedious but many referees insist on it. Outline the organisation of the paper. Avoid writing an outline so generic that it could apply to any. Instead customise the road map to the project and possibly mention pivotal “landmarks” (problems, solutions, results…) that will be seen along the way. But keep this section as short as possible if including it at all.</p>
</section>
</section>
<section id="the-middle-section-of-a-paper" class="level3">
<h3 class="anchored" data-anchor-id="the-middle-section-of-a-paper">The middle section of a paper</h3>
<section id="theoretical-framework-for-theory-papers" class="level4">
<h4 class="anchored" data-anchor-id="theoretical-framework-for-theory-papers">Theoretical Framework (for theory papers)</h4>
<p>Consider these points: - Primitives - What are the preferences and/or technology like? - Variables: What are the choice (i.e., theoretically endogenous) variables? What are the parameters (i.e., theoretically exogenous variables)? - Assumptions: What assumptions are you making about preferences and/or technology? What assumptions are you making about the choice variables? What assumptions are you making about the parameters? - Maximisation Problem: What are the agents you are studying maximizing? What is the Lagrangian? - First-Order Conditions: Self-explanatory. In some cases where it is not obvious that you are solving for a maximum or a minimum, you’ll want to show the second-order conditions as well. - Testable Prediction: State your main testable prediction. Generally, this should map one-to-one with the empirical framework. - Proof: Prove your main testable prediction. Here, go for simplicity rather than elegance–why go for a proof by construction when a proof by contradiction will do just fine? - Other Results and Proofs: There might be some side results you can both demonstrate in theory and test empirically. Generally, papers should do one thing. #### Empirical Framework Consider these points: - Estimation Strategy - What equations will you estimate? How will you estimate them? How will you treat the standard errors? What is the hypothesis test of interest for your main testable prediction? This is why there should generally be a one-to-one mapping from the main testable prediction to the empirical framework. If your outcome variable or variable of interest needs to be constructed or estimated, this is where you’d discuss it. - Identification Strategy: What would the ideal data set look like to study your question? How close are you to that ideal, and what prevents you from getting closer? Then, discuss in turn how your identification strategy deals or not with (i) unobserved heterogeneity, (ii) reverse causality or simultaneity, and (iii) measurement error. Also think about what a violation of the stable unit treatment value assumption looks like here (does one observation getting treated somehow affect the outcome of another observation?), and whether you can somehow test for it. #### Data and Descriptive Statistics Consider these points: - Data: When was it collected? Where? Why? By whom? How was the sample selected? Who was interviewed, or how were the data collected? What is the sample size? How does it compare to the population of interest? Do you lose any observations? Why? Did you have to impute any values and, if so, how did you do it? Are any variables proxies for the real thing? What does each variable measure, exactly, or how was it constructed? - Descriptive Statistics: This is simple enough. If you choose to describe the contents of your table of descriptive statistics, tell a story about them, don’t just write up a boring enumeration of means. - Balance Tests: In cases where you’re looking at a dichotomous (or categorical) variable of interest, how do the treatment and comparison sub-samples differ along the mean of the variables discussed under the previous sub-section? #### Results and Discussion Consider these points: - Preliminary (Nonparametric?) Results: An image is worth 1,000 words. If you can somehow plot the relationship of interest in a two-way scatter with a regression line fit through it, or using kernel density estimates for treatment and comparison, it helps people see for themselves that there is a difference in outcomes in response to your variable of interest. - Core (Parametric) Results: This is your core test of your main testable prediction. Here, there is no need to go into a discussion of the sign of each significant control variable, unless such a discussion is somehow germane to your core testable prediction. - Robustness Checks: These are variations on your preferred specification that show your result wasn’t just a fluke. They are as important as your core results. Do not neglect them. Slice and dice the data in as many ways as possible, sticking many of these results in an appendix, to show that the main testable predictions is supported by the data and that you haven’t cherry-picked your results. If you use an IV, this is where you’d entertain potential violations of the exclusion restrictions, and test for them one by one. Or maybe you can test for the mechanisms through which your variable of interest affects your outcome of interest. - Extensions: This is where you could explore treatment heterogeneity, or split the sample. - Limitations: No empirical result is perfect. How is internal validity limited? How is external validity limited? What are your results not saying, i.e., what mistakes might people make in interpreting them? Every study is flawed or makes simplifying assumptions; every study has a method or result that may be misinterpreted. A caveat paragraph depicts a thoughtful author who is after the truth, not someone who is trying to sell something. #### Other comments for the middle section: - No separate “literature review” section. Your literature review should be a one-paragraph affair in your introduction explaining how your work relates to the closest five to seven studies on the topic. - You might want to have a section titled “Background” between the introduction and the theoretical framework. This is especially so when you study a legislative change, a new policy whose details are important or, in an IO paper, the features of the market you are studying. This can either be a substitute for or a complement to the theoretical framework. - You might not need a theoretical framework. Some questions are old (e.g., the effects of land rights on agricultural productivity) and the theory behind them is well documented and does not need to be restated. - The order between the “Empirical Framework” and “Data and Descriptive Statistics” sections can sometimes be switched. Go with what is logical. - “limitations” are both under “Results and Discussion” and will also appear in the conclusion. It’s important for policy work not to have results that are misinterpreted.</p>
</section>
</section>
<section id="conclusion" class="level3">
<h3 class="anchored" data-anchor-id="conclusion">Conclusion</h3>
<p>Some economics papers title their conclusion “Summary and Concluding Remarks” which is a good indication of how the conclusion should proceed. It should have two main parts: (i) a summary of what you have spent the several pages before the conclusion doing, and (ii) the way forward. Consider covering these topics: - Summary - “tell them what you’re going to tell them, tell them what you want to tell them, and tell them what you just told them.” This part can be tedious, but it needs to be there, and it needs to be different enough (but not new) from the abstract and the introduction. If possible, tell a story. - Limitations - The conclusion should emphasise the limitations of the approach. - Implications for Policy - Discuss what they are, but don’t make claims that are not supported by the results, and try to assess the cost of what is proposed in comparison to its benefits. You can do so somewhat imperfectly (this is where the phrase “back-of-the-envelope calculation” comes up the most often in economics papers), since the point of the work was presumably about only one side of that equation - usually the benefits of something, sometimes its costs, but rarely both. In two or three sentences, can you identify the clear winners and losers of a given policy implications? Its political feasibility? How easy or hard it would be to implement? This is the most sensitive section. - Implications for Future Research - If you are writing a follow-up paper, this is a good place to set the stage for it.</p>
</section>
<section id="after-the-draft-is-written" class="level3">
<h3 class="anchored" data-anchor-id="after-the-draft-is-written">After the draft is written</h3>
<ul>
<li>Get rid of every adjective modifying a relationship. Was x larger than y? Just say so. Saying it was much larger, or especially tiny, or amazingly huge adds no information.</li>
<li>Replace long words with short words. Good writing maximizes the content of the message per number of letters used. Replace long words with short words of equal meaning. Replace utilisation with use.</li>
<li>Replace every “differed” or “was different” with the actual, quantitative relationship. Compare the content per letters used for the following two sentences: “Plants fertilised with nitrogen differed in height from controls.”, and “Plants fertilized with nitrogen were 2.5x taller than controls.” Not only have you conveyed that nitrogen increased growth, you’ve given a vivid word picture as to how much.</li>
<li>If your Discussion is more than 2x longer than your results, cut it down. Careful reviewers want to know how your results relate to your hypotheses, the strengths and weaknesses of your results, and perhaps one or two implications of your results. Focus on these three tasks.</li>
<li>Market test your title and abstract. More and more editors are rejecting papers before they send them out for review. Reviewers typically accept or decline to review papers on the basis of the title and abstract. The title and abstract are the front door. They are the most important parts of the paper. Craft them carefully and show them to friendly reviewers.</li>
<li>Spell check everything.</li>
<li>Read it aloud. There is no better way to gauge the flow and logic of a manuscript.</li>
</ul>
</section>
</section>
<section id="after-the-project" class="level2">
<h2 class="anchored" data-anchor-id="after-the-project">After the project</h2>
<section id="reproducibility" class="level5">
<h5 class="anchored" data-anchor-id="reproducibility">Reproducibility</h5>
<p>Unless you’ve been hiding under a rock, you’ll know about the replicability crisis in research. Much of what I’ve outlined above should help make replication as easy as possible: you can <code>git clone</code> your repository into a new folder, add the raw data to the raw/ directory, and then hit go on the code. If the final outputs match up to what you did before, that’s a good sign.</p>
<p>This is certainly not sufficient for replication in the broadest sense, but it is necessary. If even you can’t reproduce your own results from scratch then you can’t expect anyone else to be able to.</p>
<p>Technically, to make the project as reproducible as possible, you should be including information on how to set up the exact same environment (including package versions and operating system) that was used to generate the results. I do think this is going to be <a href="https://www.natureindex.com/news-blog/a-petting-zoo-for-code-makes-studies-easier-to-reproduce">essential in the future</a> but, right now, it’s just not practical for all but the most tech-savvy researchers. If you’re using the same OS then conda’s <a href="https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html">environment files</a> are a step in the right direction when using Python, albeit an <a href="https://stackoverflow.com/questions/39280638/how-to-share-conda-environments-across-platforms">imperfect one</a>.</p>
<p>To create and use the conda environment included in the example project, use</p>
<pre><code>conda env create -f ccenv.yml</code></pre>
<p>on the command line, then activate the environment using <code>conda activate ccenv</code>.</p>
<p>To save an environment file from an existing conda environment, use <code>conda env export &gt; yourenv.yml</code> but also use caution: this environment file will likely only work on your computer. It cannot easily be shared with others for them to recreate the same environment (it’s tied to your OS for a start). One rough way around this that I’ve used in the cookiecutter project is to export the environment and then manually edit it to only retain i) Python and its version, and ii) packages that are explicitly imported in the code but with no version numbers. The idea is to ask for the version of Python that was used to generate the results initially but then let conda worry about the versions of the other imported packages, and any dependencies that those packages may have.</p>
</section>
<section id="data-1" class="level5">
<h5 class="anchored" data-anchor-id="data-1">Data</h5>
<p>Once you have finished your analysis, what do you do with the dataset you have painstakingly put together? Hopefully you’ll make it ‘findable, accessible, interoperable and reusable’ (FAIR) so that others can use it, as recommended by the journals <a href="https://www.natureindex.com/news-blog/what-scientists-need-to-know-about-fair-data"><em>Nature</em></a> and <em>Scientific Data</em>.</p>
<p>Briefly, Findable equates to having meta-data (including a unique and persistent identifier) and being in a searchable index; Accessible means that data (and meta-data) are retrievable via open and free tools (proprietary formats like Stata .dta or Excel .xls files do not count, but open formats like .csv do) ; Interoperable means that data are in a widely used and machine readable structure such as <a href="https://r4ds.had.co.nz/tidy-data.html">tidy</a>; and Re-usable means including a data usage license and meta-data on provenance. There’s a more detailed list of criteria <a href="https://www.force11.org/group/fairgroup/fairprinciples">here</a>.</p>
<p>Importantly, data should not just be appended to articles as a supplement but lodged in a searchable repository with an identifier that is citable. Use the Stanford library list earlier in the post for information on what file formats to use, and <a href="https://www.nature.com/sdata/policies/repositories">this list</a> from <em>Scientific Data</em> of approved FAIR data repositories.</p>
<p>Incentives to publish data are perhaps not all that they could be currently, but <a href="https://www.nature.com/articles/d41586-019-01715-4">change is afoot</a> and I would say that best practice is to share your data on one of these repositories whenever possible.</p>
</section>
<section id="code" class="level5">
<h5 class="anchored" data-anchor-id="code">Code</h5>
<p>When your project is ready to be released, opening it up to the outside world is as easy as clicking a button on github or gitlab. It will be easily searchable. To make life even easier for those finding it, make sure to have an informative readme file (with the citation information) in the main directory, to tag the project appropriately, and to add a user license. If you’re unsure which license is appropriate, there is a <a href="https://choosealicense.com/">useful guide here</a>.</p>
</section>
<section id="credit" class="level5">
<h5 class="anchored" data-anchor-id="credit">Credit</h5>
<p>The assignment of due credit for research can cause great distress and <a href="https://www.nature.com/articles/d41586-018-05280-0">disagreement</a>. Among junior researchers, it can be career-making or -breaking. Senior researchers can be apt to believe that they alone are responsible for everything in a piece of work. I’ve heard plenty of anecdotal evidence of senior researchers inappropriately withholding credit, particularly in economics where there are typically very few authors per paper (see Figure 3 of <a href="https://doi.org/10.1093/oxrep/grx051">this paper</a>).</p>
<p>I have a couple of recommendations to make assigning research credit fairer, more transparent, and less likely to cause problems or create misunderstandings.</p>
<p>First, if you are managing the project, make sure that everyone’s expectations as to who will be an author are aligned right at the start.</p>
<p>Second, err on the side of being generous with co-authorship. The best outcome is that science progresses more quickly; if bringing aboard an extra person with particular skills helps to achieve that, then go for it. As a recent <a href="https://www.nature.com/articles/d41586-019-02084-8">Nature article</a> put it, “By discouraging specialization, current authorship conventions weaken the scientific enterprise” and “Science is a team sport”. Do not worry that credit will be diluted. For me, the most exciting paper of the 21st century is the <a href="https://doi.org/10.1103/PhysRevLett.116.061102">Observation of Gravitational Waves from a Binary Black Hole Merger</a>. The author list runs to <em>3 pages</em>.</p>
<p>To alleviate any concerns about diluting credit, you can always follow the physical sciences model of having authors listed in order of contribution (apart from the last author, who is typically the principal investigator). This is in contrast to the alphabetical ordering common in some other fields.</p>
<p>Finally, once the project is complete, be explicit about who did what by following the Contributor Roles Taxonomy, also known as <a href="https://www.casrai.org/credit.html">CRediT</a>. These breakdown scholarly contributions into 14 roles and three levels (lead, equal, and supporting), whether for authors or for those mentioned in the acknowledgements. Examples of roles include conceptualisation, funding acquisition, analysis, writing – original draft, and validation. To their credit, the originators of this system also propose to make the data on contributions machine readable and a number of journals are adopting it for submissions.</p>
</section>
</section>
<section id="conclusion-1" class="level2">
<h2 class="anchored" data-anchor-id="conclusion-1">Conclusion</h2>
<p>I hope you’ve found this post informative. Disagree with anything or think I’ve missed an important point? Get in touch!</p>
<hr>
<p>*You may find that because the .eps files used for figures are not in a sub-directory of the main .tex folder, you must add a flag to the Latex compiler. In TexShop, the steps are: - Go to Preferences - Go to Tab “Engine” - Go to the field “pdfTeX” - In the Latex Input Field add <code>--shell-escape</code> at the end so that it changes from <code>pdflatex --file-line-error --synctex=1</code> to <code>pdflatex --file-line-error --synctex=1 --shell-escape</code></p>
<p>‡ You can use .svg in the latest versions of Microsoft Powerpoint. Microsoft dropped support for .eps in Powerpoint due to concerns about security.</p>
<p>† If you’re interested in the model, it has the following specification:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%20%5Cvec%7By%7D_t%20&amp;%20=%20%5CGamma%20%5Cvec%7Bf%7D_t%20+%20%5Cvec%7Bu%7D_t%20%5C%5C%5C%5C%0A%20%20%20%20%20%20%20%20%5Cvec%7Bf%7D_t%20&amp;%20=%20A_1%20%5Cvec%7Bf%7D_%7Bt-1%7D%20+%20A_2%5Cvec%7Bf%7D_%7Bt-2%7D%20+%20%5CXi_t%20%5Cquad%20%5Cquad%20%5CXi_t%20%5Cthicksim%20%5Cmathcal%7BN%7D(0,I)%5C%5C%5C%5C%0A%20%20%20%20%20%5Cvec%7Bu%7D_t%20%20&amp;%20=%20B_1%20%5Cvec%7Bu%7D_%7Bt-1%7D%20+%20B_2%5Cvec%7Bu%7D_%7Bt-2%7D%20+%20%5CPhi_t%20%5Cquad%20%5Cquad%20%5CPhi_t%20%5Cthicksim%20%5Cmathcal%7BN%7D(0,%5CSigma)%0A%5Cend%7Baligned%7D%0A"></p>
<p>where capital Greek and Latin characters represent matrices, arrows over characters denote vectors, and it is assumed that the different components of the `innovations’ in the error updating equation are uncorrelated so that Sigma is a diagonal matrix. The model has one unobserved factor that follows an AR(2), and the errors similarly follow an AR(2).</p>


</section>
</section>

 ]]></description>
  <category>code</category>
  <category>data</category>
  <category>research</category>
  <guid>https://aeturrell.github.io/markov-wanderer/posts/get-organised/index.html</guid>
  <pubDate>Tue, 25 Jun 2019 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Specification curve analysis</title>
  <dc:creator>Arthur Turrell</dc:creator>
  <link>https://aeturrell.github.io/markov-wanderer/posts/specification-curve-analysis/index.html</link>
  <description><![CDATA[ 




<section id="econometrics-in-python-series---part-v" class="level2">
<h2 class="anchored" data-anchor-id="econometrics-in-python-series---part-v">Econometrics in Python Series -&nbsp;Part V</h2>
<section id="update-2021.03.10" class="level3">
<h3 class="anchored" data-anchor-id="update-2021.03.10">Update 2021.03.10</h3>
<p>Since publishing this post, I have written the <a href="https://specification-curve.readthedocs.io/en/latest/readme.html"><strong>specification_curve</strong></a> package for Python. <strong>specification_curve</strong> automates some aspects of specification curve analysis, namely running multiple regressions and displaying their results, but you can find out more info via the link.</p>
</section>
<section id="original-post" class="level3">
<h3 class="anchored" data-anchor-id="original-post">Original post</h3>
<p>When specifying a causal model, modellers have a number of options. These can be informed by field intelligence, priors, and even misguided attempts to find a significant result. Even with the best of intentions, research teams can reach entirely different conclusions using the same, or similar, data because of different choices made in preparing data or in modelling it.</p>
<p>Typically this happens when there isn’t a clear way to do ‘feature engineering’ on the data. For example, you have a high frequency time series which needs to be aggregated to a lower frequency: you could take the maximum, the minimum, or the average over each high frequency time period. A different choice may be appropriate in different settings.</p>
<p>There’s formal evidence that researchers really do make different decisions; this <a href="https://doi.org/10.1177/2515245917747646">study</a> gave the same research question - whether soccer referees are more likely to give red cards to dark-skin-toned players than to light-skin-toned players - to 29 different teams. From the abstract of that paper:</p>
<blockquote class="blockquote">
<p>Analytic approaches varied widely across the teams, and the estimated effect sizes ranged from 0.89 to 2.93 (Mdn = 1.31) in odds-ratio units. Twenty teams (69%) found a statistically significant positive effect, and 9 teams (31%) did not observe a significant relationship. Overall, the 29 different analyses used 21 unique combinations of covariates. Neither analysts’ prior beliefs about the effect of interest nor their level of expertise readily explained the variation in the outcomes of the analyses. Peer ratings of the quality of the analyses also did not account for the variability.</p>
</blockquote>
<p>So not only were different decisions made, there seems to be no clearly identifiable reason for them (although, getting a bit meta, perhaps other authors would have analysed this question differently!)</p>
<p>There is usually scope for reasonable alternative model specifications when estimating causal coefficients, and those coefficients will vary with those specifications. Let’s abuse notation and call this property</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Ctext%7Bd%7D%20%5Cbeta%7D%7B%5Ctext%7Bd%7D%20%5Ctext%7B%20specification%7D%7D%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> is the coefficient of interest.</p>
<p>What can we do to ensure conclusions are robust to model specification change when that change is due to equally valid feature engineering-type choices? The art is all in deciding what is meant by, or what is a valid form for, <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bd%7D%20%5Ctext%7B%20specification%7D"> and showing that, even under different specifications, the estimates of <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> are robust.</p>
<p>It’s standard in economics to include many different model specifications in order to demonstrate robustness to different specifications. For the same target variable in the same context, there might be five or six of these alternative specifications. The picture below, from Autor, Dorn, and Hanson’s paper <a href="http://economics.mit.edu/files/11602">China Syndrome</a>, gives a flavour.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://aeturrell.github.io/markov-wanderer/posts/specification-curve-analysis/ADH_CS_Table3.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Table 3 of ‘China Syndrome’</figcaption>
</figure>
</div>
<p>Table 3 of ‘China Syndrome’</p>
<p>But there may be times when it’s appropriate to show many different specifications, for example in a contested area, or an area in which the feature choices are very unclear.</p>
</section>
</section>
<section id="enter-specification-curve-analysis" class="level2">
<h2 class="anchored" data-anchor-id="enter-specification-curve-analysis">Enter specification curve analysis</h2>
<p>One way to more comprehensively do this kind of analysis is <em>specification curve analysis</em>.</p>
<p>Specification curve analysis as introduced in this <a href="http://sticerd.lse.ac.uk/seminarpapers/psyc16022016.pdf">paper</a> looks for a more exhaustive way of trying out alternative specifications. from the paper, the three steps of specification curve analysis are:</p>
<ol type="1">
<li>identifying the set of theoretically justified, statistically valid, and non-redundant analytic specifications;</li>
<li>displaying alternative results graphically, allowing the identification of decisions producing different results; and</li>
<li>conducting statistical tests to determine whether as a whole results are inconsistent with the null hypothesis.</li>
</ol>
<p>For a good example of specification curve analysis in action, see this recent <a href="https://doi.org/10.1038/s41562-018-0506-1">Nature Human Behaviour paper</a> on the association between adolescent well-being and the use of digital technology.</p>
</section>
<section id="an-example-in-python" class="level2">
<h2 class="anchored" data-anchor-id="an-example-in-python">An example in Python</h2>
<p>This example is going to use the concrete data I’ve <a href="{{site.baseurl}}/2018/05/05/running-many-regressions-alongside-pandas/">used previously</a> to look at the effect of ‘superplasticizer’ on the compressive strength of concrete. I’m going to skip over step 1 quickly, as it will vary a lot depending on your dataset.</p>
<section id="step-1" class="level3">
<h3 class="anchored" data-anchor-id="step-1">Step 1</h3>
<p>The data don’t actually require any feature engineering, so we’ll have to pretend that - beyond those two key variables - we’re not sure whether other features should be included or not.</p>
<p>Actually, let’s make it a <em>bit</em> more interesting and say that ‘coarse’ and ‘fly’ are actually based on the same raw data, they are just engineered differently in the data for analysis. Therefore we do not include them together in the model at the same time. That really covers step 1.</p>
</section>
<section id="step-2" class="level3">
<h3 class="anchored" data-anchor-id="step-2">Step 2</h3>
<p>For step 2, displaying alternative results graphically, we need the data and the code.</p>
<p>First, let’s set up the environment, then read in the data:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb1-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{python}</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> statsmodels.api <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sm</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Counter</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> itertools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> combinations</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mpl</span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sklearn</span>
<span id="cb1-10">jsonPlotSettings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xtick.labelsize'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>,</span>
<span id="cb1-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ytick.labelsize'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,</span>
<span id="cb1-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xtick.labelsize'</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,</span>
<span id="cb1-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'font.size'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>,</span>
<span id="cb1-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'figure.figsize'</span>: (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),</span>
<span id="cb1-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'axes.titlesize'</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>,</span>
<span id="cb1-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'axes.labelsize'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,</span>
<span id="cb1-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lines.linewidth'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb1-18"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lines.markersize'</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,</span>
<span id="cb1-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'legend.fontsize'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>,</span>
<span id="cb1-20"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mathtext.fontset'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'stix'</span>,</span>
<span id="cb1-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'font.family'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'STIXGeneral'</span>}</span>
<span id="cb1-22">plt.style.use(jsonPlotSettings)</span>
<span id="cb1-23"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb2-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{python}</span></span>
<span id="cb2-2">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_excel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../../ManyRegsPandas/Concrete_Data.xls'</span>)</span>
<span id="cb2-3">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.rename(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(df.columns,[x.split()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> df.columns])))</span>
<span id="cb2-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(df.head())</span>
<span id="cb2-5"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<pre><code>   Cement  Blast  Fly  Water  Superplasticizer  Coarse   Fine  Age   Concrete
0   540.0    0.0  0.0  162.0               2.5  1040.0  676.0   28  79.986111
1   540.0    0.0  0.0  162.0               2.5  1055.0  676.0   28  61.887366
2   332.5  142.5  0.0  228.0               0.0   932.0  594.0  270  40.269535
3   332.5  142.5  0.0  228.0               0.0   932.0  594.0  365  41.052780
4   198.6  132.4  0.0  192.0               0.0   978.4  825.5  360  44.296075</code></pre>
<p>This is the pure question - what dependence does concrete strength have on the use of superplasticizer?</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb4-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{python}</span></span>
<span id="cb4-2">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sm.OLS(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Concrete'</span>], df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Superplasticizer'</span>]).fit()</span>
<span id="cb4-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(results.summary())</span>
<span id="cb4-4"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<pre><code>                            OLS Regression Results                            
==============================================================================
Dep. Variable:               Concrete   R-squared:                       0.578
Model:                            OLS   Adj. R-squared:                  0.578
Method:                 Least Squares   F-statistic:                     1410.
Date:                Fri, 25 Jan 2019   Prob (F-statistic):          5.29e-195
Time:                        xx:xx:xx   Log-Likelihood:                -4804.2
No. Observations:                1030   AIC:                             9610.
Df Residuals:                    1029   BIC:                             9615.
Df Model:                           1                                         
Covariance Type:            nonrobust                                         
====================================================================================
                       coef    std err          t      P&gt;|t|      [0.025      0.975]
------------------------------------------------------------------------------------
Superplasticizer     3.4897      0.093     37.544      0.000       3.307       3.672
==============================================================================
Omnibus:                       20.707   Durbin-Watson:                   0.639
Prob(Omnibus):                  0.000   Jarque-Bera (JB):               22.783
Skew:                          -0.298   Prob(JB):                     1.13e-05
Kurtosis:                       3.420   Cond. No.                         1.00
==============================================================================

Warnings:
[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.</code></pre>
<p>That’s the baseline regression, with <img src="https://latex.codecogs.com/png.latex?%5Cbeta%20=%203.4897">. Now we need to try the alternative specifications.</p>
<p>We have 7 potential control variables. It’s worth bearing in mind what the upper limit on the number of specifications you could potentially run could be, for computational reasons. Each combination is going to be <img src="https://latex.codecogs.com/png.latex?n"> choose <img src="https://latex.codecogs.com/png.latex?k">, or</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7Bn!%7D%7Bk!(n-k)!%7D%0A"></p>
<p>We want to look at all possible values of <img src="https://latex.codecogs.com/png.latex?k">, which is</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Csum_%7B0%5Cleq%20k%20%5Cleq%20n%7D%20%5Ctextstyle%20%7B%5Cfrac%20%7Bn!%7D%7Bk!(n-k)!%7D%7D%20=%202%5En%0A"></p>
<p>So this is not feasible as <img src="https://latex.codecogs.com/png.latex?n"> gets very large, but should be okay here.</p>
<p>In this case, there are also some mutually exclusive combinations which will reduce the overall number - remember I decided that ‘coarse’ and ‘fly’ are different ways of creating the same variable. Let’s create all possible <img src="https://latex.codecogs.com/png.latex?2%5E7%20=%20128"> combinations first. We can use the Python combinations function to do this.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb6-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{python}</span></span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A list of the controls</span></span>
<span id="cb6-3">controls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [x <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> df.columns <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Concrete'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Superplasticizer'</span>]]</span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate all combinations in a list of tuples</span></span>
<span id="cb6-5">Allcomb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [combinations(controls, k) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(controls)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)]</span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Flatten this into a single list of tuples</span></span>
<span id="cb6-7">Allcomb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [item <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> sublist <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> Allcomb <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sublist]</span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Turn all the tuples into lists</span></span>
<span id="cb6-9">Allcomb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> Allcomb]</span>
<span id="cb6-10"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<p>Let’s have a look at some of these; the first 5, a random sample of 5, the last 1, and the total number</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb7-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{python}</span></span>
<span id="cb7-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(Allcomb[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span>
<span id="cb7-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> np.random.choice(Allcomb,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb7-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(i)</span>
<span id="cb7-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(Allcomb[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb7-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(Allcomb))</span>
<span id="cb7-7"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<pre><code>[[], ['Cement'], ['Blast'], ['Fly'], ['Water']]
['Fly', 'Water', 'Coarse', 'Age']
['Cement', 'Water', 'Fine']
['Blast', 'Fly', 'Coarse', 'Fine', 'Age']
['Cement', 'Blast', 'Coarse', 'Age']
['Blast', 'Water', 'Coarse']
['Cement', 'Blast', 'Fly', 'Water', 'Coarse', 'Fine', 'Age']
128</code></pre>
<p>Note that the original specification is included here as [], i.e.&nbsp;no control. We now need to remove the mutually exclusive combinations - that is any combination which has both ‘Coarse’ and ‘Fly’ in it. Then we’ll look at the last entry to see if it has worked.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb9-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{python}</span></span>
<span id="cb9-2">Allcomb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [y <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> y <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> Allcomb <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> y <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [x <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> Allcomb <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Coarse'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> x) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fly'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> x)]]</span>
<span id="cb9-3">Allcomb[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb9-4"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<pre><code>['Cement', 'Blast', 'Water', 'Coarse', 'Fine', 'Age']</code></pre>
<p>Great - the old last combination, which mixed features, has been dropped. Now we need to iterate over all possible regression specifications and store the coefficient calculated in each one.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb11-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{python}</span></span>
<span id="cb11-2">AllResults <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [sm.OLS(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Concrete'</span>],</span>
<span id="cb11-3">                      df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Superplasticizer'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>x]).fit() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> Allcomb]</span>
<span id="cb11-4"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<p>You can see this has run all of the possible combinations; here are the regression results for the last entry:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb12-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{python}</span></span>
<span id="cb12-2">AllResults[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].params</span>
<span id="cb12-3"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<pre><code>Superplasticizer    0.840783
Cement              0.085463
Blast               0.064191
Water              -0.119120
Coarse              0.016815
Fine                0.002805
Age                 0.106915
dtype: float64</code></pre>
<p>Great. Let’s store the results in a dataframe. As well as the coefficient on superplasticizer, I’ll store the standard errors, ‘bse’, and the pvalues for the independent variables. I’ll then reorder everything by coefficient value.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb14-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{python}</span></span>
<span id="cb14-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get coefficient values and specifications</span></span>
<span id="cb14-3">df_r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame([x.params[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Superplasticizer'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> AllResults],columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Coefficient'</span>])</span>
<span id="cb14-4">df_r[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Specification'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Allcomb</span>
<span id="cb14-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get std err and pvalues</span></span>
<span id="cb14-6">df_r[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bse'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [x.bse[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Superplasticizer'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> AllResults]</span>
<span id="cb14-7">df_r[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pvalues'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [x.pvalues <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> AllResults]</span>
<span id="cb14-8">df_r[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pvalues'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_r[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pvalues'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(x))</span>
<span id="cb14-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Re-order by coefficient</span></span>
<span id="cb14-10">df_r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_r.sort_values(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Coefficient'</span>)</span>
<span id="cb14-11">df_r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_r.reset_index().drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>,axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb14-12">df_r.index.names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Specification No.'</span>]</span>
<span id="cb14-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(df_r.sample(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb14-14"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<pre><code>                   Coefficient                 Specification       bse  
Specification No.                                                        
31                    1.044216  [Cement, Blast, Coarse, Age]  0.059440   
27                    1.034839   [Cement, Blast, Water, Age]  0.058165   
58                    1.290024                   [Fine, Age]  0.079633   
62                    1.336140  [Blast, Water, Coarse, Fine]  0.095310   
45                    1.154499            [Cement, Fly, Age]  0.072391   
19                    0.912858                [Cement, Fine]  0.072651   
55                    1.243370                [Coarse, Fine]  0.086451   
50                    1.196307   [Cement, Coarse, Fine, Age]  0.067479   
25                    1.008358        [Cement, Coarse, Fine]  0.074518   
93                    2.842257                         [Age]  0.073861   

                                                             pvalues  
Specification No.                                                     
31                 {'Superplasticizer': 1.3490880141286832e-60, '...  
27                 {'Superplasticizer': 6.447248960284443e-62, 'C...  
58                 {'Superplasticizer': 9.824299541334832e-53, 'F...  
62                 {'Superplasticizer': 5.604831921131288e-41, 'B...  
45                 {'Superplasticizer': 2.5456524931721465e-51, '...  
19                 {'Superplasticizer': 8.7290431310275e-34, 'Cem...  
55                 {'Superplasticizer': 7.235976198602693e-43, 'C...  
50                 {'Superplasticizer': 1.5168657130127636e-61, '...  
25                 {'Superplasticizer': 1.6517230301301733e-38, '...  
93                 {'Superplasticizer': 2.233901784516485e-201, '...  </code></pre>
<p>Now I will plot the results for the coefficient as a function of the different specifications, adding the standard errors as a swathe.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb16-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{python}</span></span>
<span id="cb16-2">plt.close(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'all'</span>)</span>
<span id="cb16-3">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb16-4">ax.scatter(df_r.index,df_r[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Coefficient'</span>],lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span>,label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>,s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>,color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>)</span>
<span id="cb16-5">ax.set_xlabel(df_r.index.name)</span>
<span id="cb16-6">ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Coefficient'</span>)</span>
<span id="cb16-7">ax.yaxis.major.formatter._useMathText <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb16-8">ax.axhline(color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k'</span>,lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb16-9">ax.axhline(y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.median(df_r[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Coefficient'</span>]),color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k'</span>,alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>,label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Median'</span>,dashes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span>
<span id="cb16-10">ax.fill_between(df_r.index, df_r[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Coefficient'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>df_r[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bse'</span>], df_r[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Coefficient'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>df_r[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bse'</span>],color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="cb16-11">ax.legend(frameon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'upper left'</span>,ncol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,handlelength<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb16-12">plt.show()</span>
<span id="cb16-13"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://aeturrell.github.io/markov-wanderer/posts/specification-curve-analysis/output_18_0.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Coefficients by specification number</figcaption>
</figure>
</div>
<p>Let’s now have a matrix which shows, for each specification, whether a particular set of features was included. There are 7 features, so there’ll be 7 rows, and we should expect no column to have both ‘Coarse’ and ‘Fly’ highlighted. There’s going to be some data wrangling to do this: I’ll first sort each row in the specification column alphabetically, then count the occurrences of each control variable in each row (0 or 1).</p>
<p>Then, to go from a column where each cell is a dict of counts of control variables in that row’s specification, I’ll transform to a set of columns, one for each control variable. These cells will have counts in. The counts should all be 0 or 1, so I’ll then map them into boolean values.</p>
<p>With a matrix of 0s and 1s with rows as specifications and columns as variables, I can easily create a heatmap.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb17-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{python}</span></span>
<span id="cb17-2">df_r[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Specification'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_r[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Specification'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(x))</span>
<span id="cb17-3">df_r[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SpecificationCounts'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_r[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Specification'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x: Counter(x))</span>
<span id="cb17-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(df_r.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb17-5"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<pre><code>                   Coefficient                           Specification  \
Specification No.                                                        
0                     0.228428  [Age, Blast, Cement, Fine, Fly, Water]   
1                     0.327962       [Blast, Cement, Fine, Fly, Water]   
2                     0.468836             [Blast, Cement, Fly, Water]   
3                     0.522836        [Age, Blast, Cement, Fly, Water]   
4                     0.653542              [Blast, Cement, Fine, Fly]   

                        bse  \
Specification No.             
0                  0.087860   
1                  0.104747   
2                  0.088731   
3                  0.075540   
4                  0.076913   

                                                             pvalues  \
Specification No.                                                      
0                  {'Superplasticizer': 0.009459124471543073, 'Ce...   
1                  {'Superplasticizer': 0.0017915187476705682, 'C...   
2                  {'Superplasticizer': 1.5457095399610106e-07, '...   
3                  {'Superplasticizer': 7.881232377381058e-12, 'C...   
4                  {'Superplasticizer': 6.77195621959008e-17, 'Ce...   

                                                 SpecificationCounts  
Specification No.                                                     
0                  {'Age': 1, 'Blast': 1, 'Cement': 1, 'Fine': 1,...  
1                  {'Blast': 1, 'Cement': 1, 'Fine': 1, 'Fly': 1,...  
2                    {'Blast': 1, 'Cement': 1, 'Fly': 1, 'Water': 1}  
3                  {'Age': 1, 'Blast': 1, 'Cement': 1, 'Fly': 1, ...  
4                     {'Blast': 1, 'Cement': 1, 'Fine': 1, 'Fly': 1}  </code></pre>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb19-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{python}</span></span>
<span id="cb19-2">df_spec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_r[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SpecificationCounts'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(pd.Series).fillna(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>)</span>
<span id="cb19-3">df_spec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_spec.replace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>).replace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb19-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(df_spec.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb19-5"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<pre><code>                     Age  Blast  Cement   Fine    Fly  Water  Coarse
Specification No.                                                   
0                   True   True    True   True   True   True   False
1                  False   True    True   True   True   True   False
2                  False   True    True  False   True   True   False
3                   True   True    True  False   True   True   False
4                  False   True    True   True   True  False   False
5                  False   True    True  False   True  False   False
6                  False   True    True  False  False   True    True
7                  False   True    True   True  False   True    True
8                  False   True    True   True  False   True   False
9                   True   True    True   True  False   True    True</code></pre>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb21-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{python}</span></span>
<span id="cb21-2">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure()</span>
<span id="cb21-3">ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">111</span>)</span>
<span id="cb21-4">ax.imshow(df_spec.T, aspect<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'auto'</span>, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plt.cm.gray_r, interpolation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'None'</span>)</span>
<span id="cb21-5">ax.set_xlabel(df_r.index.name)</span>
<span id="cb21-6">ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Control'</span>)</span>
<span id="cb21-7">plt.yticks(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(df_spec.columns)),df_spec.columns)</span>
<span id="cb21-8">ax.yaxis.major.formatter._useMathText <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb21-9"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://aeturrell.github.io/markov-wanderer/posts/specification-curve-analysis/output_22_0.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Controls by specification number.</figcaption>
</figure>
</div>
<p>Now let’s try colouring these depending on whether they are significant or not. We’ll use the plasma colormap, which here will mean that a blueish colour implies significance.</p>
<p>This will follow a somewhat similar approach but begins with the pvalues. The first step is to convert the dict of pvalues to columns, one for each variable, in a new dataframe. I’ll then sort the columns and set the cell values to 0 for significant, 1 for insignificant (at the 0.05 level), and leave missing entries as NaNs. When it comes to plotting, I’ll set those NaNs to appear white while the valid in/significant entries appear in the colours of the plasma heatmap.</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb22-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{python}</span></span>
<span id="cb22-2">df_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_r[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pvalues'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(pd.Series)</span>
<span id="cb22-3">df_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_params.reindex(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(df_params.columns), axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb22-4">df_params[np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(df_params)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Insignificant</span></span>
<span id="cb22-5">df_params[df_params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Significant</span></span>
<span id="cb22-6">df_params[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Coefficient'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_r[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Coefficient'</span>]</span>
<span id="cb22-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(df_params.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb22-8"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<pre><code>                   Age  Blast  Cement  Coarse  Fine  Fly  Superplasticizer  \
Specification No.                                                            
0                  0.0    0.0     0.0     NaN   0.0  0.0               0.0   
1                  NaN    0.0     0.0     NaN   0.0  0.0               0.0   
2                  NaN    0.0     0.0     NaN   NaN  0.0               0.0   
3                  0.0    0.0     0.0     NaN   NaN  0.0               0.0   
4                  NaN    0.0     0.0     NaN   0.0  0.0               0.0   

                   Water  Coefficient  
Specification No.                      
0                    0.0     0.228428  
1                    0.0     0.327962  
2                    0.0     0.468836  
3                    0.0     0.522836  
4                    NaN     0.653542  </code></pre>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb24-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{python}</span></span>
<span id="cb24-2">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure()</span>
<span id="cb24-3">ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">111</span>)</span>
<span id="cb24-4">cmap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.cm.plasma</span>
<span id="cb24-5">cmap.set_bad(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'white'</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>)</span>
<span id="cb24-6">ax.imshow(df_params[controls].T, aspect<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'auto'</span>, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cmap, interpolation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'None'</span>)</span>
<span id="cb24-7">ax.set_xlabel(df_params.index.name)</span>
<span id="cb24-8">ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Control'</span>)</span>
<span id="cb24-9">plt.yticks(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(controls)),controls)</span>
<span id="cb24-10">ax.yaxis.major.formatter._useMathText <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb24-11"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://aeturrell.github.io/markov-wanderer/posts/specification-curve-analysis/output_25_0.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Controls by specification number.</figcaption>
</figure>
</div>
</section>
<section id="step-3" class="level3">
<h3 class="anchored" data-anchor-id="step-3">Step 3</h3>
<p>Considering the full set of reasonable specifications jointly, how inconsistent are the results with the null hypothesis of no effect?</p>
<p>This step uses a permutation test which shuffles up the data and re-runs the regressions. It assumes exchangeability, i.e.&nbsp;that the rows are not related in any way. In the original paper on specification curve analysis by Simonsohn et al., they discuss the example of whether hurricanes with more feminine names are perceived as less threatening and hence lead to fewer precautionary measures by the general public, as examined originally <a href="https://doi.org/10.1073/pnas.1402786111">in this paper</a>. If you’re interested, Simonsohn et al.&nbsp;accept the null of there being no difference in precautionary behaviour based on the name of the hurricane using specification curve analysis.</p>
<p>So, to do this, we’re going to shuffle up the randomly assigned variable. In our toy example, that’s going to be superplasticizer. As the authors put it, &gt; The shuffled datasets maintain all the other features of the original one (e.g., collinearity, time trends, skewness, etc.) except we now know there is no link between (shuffled) names and fatalities; the null is true by construction.</p>
<p>Although, in our case, it is the superplasticizer value that will be shuffled. Let’s first make a copy of the dataframe ready to shuffle:</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb25-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{python}</span></span>
<span id="cb25-2">Num_shuffles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb25-3"></span>
<span id="cb25-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> retShuffledResults():</span>
<span id="cb25-5">    allResults_shuffle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb25-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(Num_shuffles):</span>
<span id="cb25-7">        df_shuffle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.copy(deep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb25-8">        df_shuffle[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Superplasticizer'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sklearn.utils.shuffle(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Superplasticizer'</span>].values)</span>
<span id="cb25-9">        Results_shuffle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [sm.OLS(df_shuffle[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Concrete'</span>], </span>
<span id="cb25-10">                     df_shuffle[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Superplasticizer'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>x]).fit() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> Allcomb]</span>
<span id="cb25-11">        allResults_shuffle.append(Results_shuffle)</span>
<span id="cb25-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> allResults_shuffle</span>
<span id="cb25-13">    </span>
<span id="cb25-14">allResults_shuffle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> retShuffledResults()</span>
<span id="cb25-15">df_r_shuffle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame([[x.params[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Superplasticizer'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> y] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> y <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> allResults_shuffle])</span>
<span id="cb25-16">df_r_shufflepval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame([[x.pvalues[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Superplasticizer'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> y] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> y <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> allResults_shuffle])</span>
<span id="cb25-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(df_r_shuffle.head())</span>
<span id="cb25-18"></span>
<span id="cb25-19"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<pre><code>         0         1         2         3         4         5         6   \
0  3.017799  0.348324  2.103696  2.342652  0.238608  0.119278  0.152364   
1  2.939502  0.205683  2.009524  2.243891  0.044811 -0.042069 -0.006277   
2  3.004296  0.255635  2.127853  2.322167  0.218430  0.084593  0.127544   
3  3.031353  0.338988  2.118547  2.364655  0.234529  0.171963  0.182143   
4  2.969443  0.250435  2.034338  2.294939  0.123191  0.026125  0.037847   

         7         8         9     ...           86        87        88  \
0  2.124654  0.152692  0.216249    ...     0.077730  0.052367  0.043836   
1  2.078909  0.014767  0.071263    ...    -0.047398  0.002010 -0.005702   
2  2.148499  0.116719  0.112361    ...     0.040043  0.069590  0.071732   
3  2.168407  0.140604  0.217297    ...     0.102334  0.134740  0.101656   
4  2.098849  0.042894  0.140568    ...    -0.033597 -0.001233 -0.028179   

         89        90        91        92        93        94        95  
0  0.031032  0.087474  0.086622  0.048941  0.016861 -0.011674  0.024902  
1 -0.068846  0.009561  0.009350 -0.017208 -0.034570 -0.035247 -0.016576  
2  0.043392  0.037542  0.044300  0.129716  0.089750  0.015758  0.050699  
3  0.048139  0.145640  0.155569  0.130373  0.135638  0.066984  0.104164  
4 -0.057247  0.045333  0.027806 -0.013531 -0.028678 -0.021878 -0.035316  

[5 rows x 96 columns]</code></pre>
<p>Notice that there are multiple shuffled regressions for each specification number. We take the median of over all possible values for each specification number:</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb27-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{python}</span></span>
<span id="cb27-2">med_shuffle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_r_shuffle.quantile(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>).sort_values().reset_index().drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>,axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb27-3"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<p>These data can be added onto the main plot, along with everything else:</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb28-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{python}</span></span>
<span id="cb28-2">plt.close(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'all'</span>)</span>
<span id="cb28-3">f, axarr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, sharex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb28-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ax <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> axarr:</span>
<span id="cb28-5">    ax.yaxis.major.formatter._useMathText <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb28-6">axarr[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].scatter(df_r.index,df_r[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Coefficient'</span>],</span>
<span id="cb28-7">                 lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span>,</span>
<span id="cb28-8">                 s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>,</span>
<span id="cb28-9">                 color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>,</span>
<span id="cb28-10">                 label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Coefficient'</span>)</span>
<span id="cb28-11">axarr[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].scatter(med_shuffle.index,</span>
<span id="cb28-12">                 med_shuffle.iloc[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb28-13">                 lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span>,</span>
<span id="cb28-14">                 s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>,</span>
<span id="cb28-15">                 color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>,</span>
<span id="cb28-16">                 marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'d'</span>,</span>
<span id="cb28-17">                 label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Coefficient under null (median over bootstraps)'</span>)</span>
<span id="cb28-18">axarr[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].axhline(color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k'</span>,lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb28-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use if you wish to label orginal specification</span></span>
<span id="cb28-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#orig_spec = df_r[df_r['Specification'].apply(lambda x: not x)]</span></span>
<span id="cb28-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#axarr[0].scatter(orig_spec.index,orig_spec['Coefficient'],s=100.,color='k',label='Original specification')</span></span>
<span id="cb28-22">axarr[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].axhline(y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.median(df_r[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Coefficient'</span>]),</span>
<span id="cb28-23">                 color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k'</span>,</span>
<span id="cb28-24">                 alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>,</span>
<span id="cb28-25">                 label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Median coefficient'</span>,</span>
<span id="cb28-26">                 dashes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span>
<span id="cb28-27">axarr[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].fill_between(df_r.index, </span>
<span id="cb28-28">                      df_r[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Coefficient'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>df_r[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bse'</span>], </span>
<span id="cb28-29">                      df_r[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Coefficient'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>df_r[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bse'</span>],</span>
<span id="cb28-30">                      color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>,</span>
<span id="cb28-31">                      alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="cb28-32">axarr[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].legend(frameon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'upper left'</span>,ncol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,handlelength<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,markerscale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb28-33">axarr[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Coefficient'</span>)</span>
<span id="cb28-34">axarr[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Specification curve analysis'</span>)</span>
<span id="cb28-35">cmap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.cm.plasma</span>
<span id="cb28-36">cmap.set_bad(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'white'</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>)</span>
<span id="cb28-37">axarr[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].imshow(df_params[controls].T, aspect<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'auto'</span>, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cmap, interpolation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'None'</span>)</span>
<span id="cb28-38">axarr[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Controls'</span>)</span>
<span id="cb28-39">axarr[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_xlabel(df_r.index.name)</span>
<span id="cb28-40">axarr[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_yticks(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(controls)))</span>
<span id="cb28-41">axarr[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_yticklabels(controls)</span>
<span id="cb28-42">plt.subplots_adjust(wspace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, hspace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>)</span>
<span id="cb28-43">plt.show()</span>
<span id="cb28-44"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://aeturrell.github.io/markov-wanderer/posts/specification-curve-analysis/output_31_0.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Putting it all together.</figcaption>
</figure>
</div>
<p>The authors of the specification curve analysis paper provide three measures of whether, as a whole, the null should be rejected. (i) the median overall point estimate (ii) the share of estimates in the specification curve that are of the dominant sign, and (iii) the share that are of the dominant sign and also statistically significant (p&lt;.05)</p>
</section>
<section id="step-3-part-i" class="level3">
<h3 class="anchored" data-anchor-id="step-3-part-i">Step 3 part i</h3>
<ol type="i">
<li>is calculated from the % of coefficient estimates with as or more extreme results. We need to divide the number of bootstrapped datasets with larger median effect sizes than the original analysis by the total number of bootstraps, which gives the p-value of this test.</li>
</ol>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb29-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{python}</span></span>
<span id="cb29-2">pvalue_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.double(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(med_shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>np.median(df_r[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Coefficient'</span>])))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>np.double(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(med_shuffle))</span>
<span id="cb29-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:.3f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(pvalue_i))</span>
<span id="cb29-4"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<pre><code>0.005</code></pre>
</section>
<section id="step-3-part-ii" class="level3">
<h3 class="anchored" data-anchor-id="step-3-part-ii">Step 3 part ii</h3>
<ol start="2" type="i">
<li>requires this to be repeated but only with results of dominant sign. You can see from the plot that we’re going to again get a very large p-value but here’s the process anyway. First, we determine the dominant sign and then calculate the p-value for part ii)</li>
</ol>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb31-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{python}</span></span>
<span id="cb31-2">gtr_than_zero <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argmax( [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(df_r[df_r[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Coefficient'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>]), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(df_r[df_r[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Coefficient'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>])]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 0 is &lt;0 and 1 is &gt;0</span></span>
<span id="cb31-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(gtr_than_zero<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb31-4">    gtr_than_zero <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb31-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb31-6">    gtr_than_zero <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb31-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(gtr_than_zero)</span>
<span id="cb31-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(gtr_than_zero):</span>
<span id="cb31-9">    pvalue_ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.double(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(med_shuffle[med_shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>np.median(df_r[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Coefficient'</span>])))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>np.double(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(med_shuffle[med_shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]))</span>
<span id="cb31-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb31-11">    pvalue_ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.double(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(med_shuffle[med_shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>np.median(df_r[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Coefficient'</span>])))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>np.double(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(med_shuffle[med_shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]))</span>
<span id="cb31-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:.3f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(pvalue_ii))</span>
<span id="cb31-13"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<pre><code>True
0.005</code></pre>
</section>
<section id="step-3-part-iii" class="level3">
<h3 class="anchored" data-anchor-id="step-3-part-iii">Step 3 part iii</h3>
<p>For part iii), we repeat the same process but only for those which were statistically significant and of dominant sign.</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb33-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{python}</span></span>
<span id="cb33-2">med_shuffle_signif <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_r_shuffle[df_r_shufflepval<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>].quantile(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>).sort_values().reset_index().drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>,axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).dropna()</span>
<span id="cb33-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(gtr_than_zero):</span>
<span id="cb33-4">    pvalue_iii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.double(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(med_shuffle_signif[med_shuffle_signif<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>np.median(df_r[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Coefficient'</span>])))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>np.double(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(med_shuffle_signif[med_shuffle_signif<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]))</span>
<span id="cb33-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb33-6">    pvalue_iii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.double(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(med_shuffle_signif[med_shuffle_signif<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>np.median(df_r[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Coefficient'</span>])))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>np.double(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(med_shuffle_signif[med_shuffle_signif<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]))</span>
<span id="cb33-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:.3f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(pvalue_iii))</span>
<span id="cb33-8"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<pre><code>0.006</code></pre>
<p>As was likely from visual inspection of the figures, the p-values are less than or equal to 0.01 in each case. We have tested whether, when considering all the possible specifications, the results found are inconsistent with results when the null hypothesis is true (that superplasticizer and strength are unrelated). On the basis of the p-values, we can safely reject the null that the bootstrapped and original specifications are consistent. The tests as carried out strongly imply that Beta is greater than zero and that this conclusion is robust to specification change.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Researchers are always going to disagree about how to analyse the same data set. Although which specifications to include or exclude from specification curve analysis inevitably involves choices, I think that this is a useful and more comprehensive way to see how sensitive results are to those choices.</p>


</section>

 ]]></description>
  <category>code</category>
  <category>research</category>
  <category>open-source</category>
  <category>econometrics</category>
  <guid>https://aeturrell.github.io/markov-wanderer/posts/specification-curve-analysis/index.html</guid>
  <pubDate>Fri, 25 Jan 2019 00:00:00 GMT</pubDate>
  <media:content url="https://aeturrell.github.io/markov-wanderer/posts/specification-curve-analysis/output_31_0.png" medium="image" type="image/png" height="135" width="144"/>
</item>
<item>
  <title>Putting women scientists onto Wikipedia</title>
  <dc:creator>Arthur Turrell</dc:creator>
  <link>https://aeturrell.github.io/markov-wanderer/posts/wikipedia-into-stem/index.html</link>
  <description><![CDATA[ 




<p>In a <a href="http://aeturrell.github.io/home//2018/08/18/left-out-of-HE/">previous post</a>, I shared links about the predictors for <em>not</em> participating in higher education, and about how it is difficult to reach audiences in “remote rural or coastal areas and in former industrial areas, especially in the Midlands” (according to the <a href="https://www.gov.uk/government/publications/state-of-the-nation-2017">Social Mobility Commission</a>). In this post, I look at another dimension of participation in higher education: gender.</p>
<p>Women are heavily <a href="http://www.esa.doc.gov/reports/women-stem-2017-update">under-represented</a> in STEM (Science, Technology, Engineering, and Mathematics) subjects. In the UK, they make up just <a href="https://www.stemwomen.co.uk/blog/2018/03/useful-statistics-women-in-stem">25%</a> of STEM undergraduates but 57% of the <a href="https://www.hesa.ac.uk/news/11-01-2018/sfr247-higher-education-student-statistics/subjects">total</a> undergraduate population.</p>
<p>It’s little better for economics, as this <a href="https://www.ft.com/content/0e5d27ba-2b61-11e8-9b4b-bc4b9f08f381">article in the Financial Times</a> (£) shows, and the direction of the trend is worse: in the US, while the fraction of women undergraduates taking STEM subjects has increased, the fraction taking economics has declined. In the UK in 2011/12, it was 28% and <a href="http://www.res.org.uk/view/art2Oct14Features.html">trending downwards</a>. The problems aren’t just widely held misapprehensions of <a href="https://www.aeaweb.org/resources/students/what-is-economics">what economics is about</a>, or <a href="https://twitter.com/hashtag/WhatEconomistsDo?src=hash">#WhatEconomistsDo</a>. There is solid analytical work looking at ways in which the culture of economics may be hostile for women too. This work is nicely <a href="https://www.ft.com/content/6b3cc8be-881e-11e7-afd2-74b8ecd34d3b">summarised by Prof.&nbsp;Diane Coyle</a> (£), again in the Financial Times. Although both economics and STEM have a problem, <a href="http://aeturrell.github.io/home//2017/03/16/trust-me-im-a-doctor/">I’ve mused before</a> that economics could perhaps learn from science when it comes to outreach.</p>
<section id="a-campaign-to-inspire-women-to-enter-stem-subjects" class="level1">
<h1>A campaign to inspire women to enter STEM subjects</h1>
<p>My Imperial College London physics colleague Dr.&nbsp;Jess Wade (<a href="https://twitter.com/jesswade"><span class="citation" data-cites="jesswade">@jesswade</span></a> on twitter) has come up with a novel way to help inspire more women to enter STEM subjects. She has been busily and heroically writing Wikipedia articles on women scientists of note since 2016. As <a href="https://www.theguardian.com/education/2018/jul/24/academic-writes-270-wikipedia-pages-year-female-scientists-noticed">she says</a>, &gt;&gt;“Wikipedia is a really great way to engage people in this mission because the more you read about these sensational women, the more you get so motivated and inspired by their personal stories.” - Dr.&nbsp;Jess Wade</p>
<p>Picked at random, here is the site of one of those of women whose Wikipedia page Jess has created: <a href="https://en.wikipedia.org/wiki/Frances_Pleasonton">Frances Pleasonton</a>, who worked on neutron decay.</p>
<p>What I think is most powerful about Jess’ approach is that it has huge reach, because Wikipedia has huge reach. Normally, it’s nigh on impossible to measure the impacts of outreach beyond a questionnaire issued at the end of an event. The audiences who attend science outreach events are typically self-selected, and they are rarely, if ever, followed over time to see if their relationship with science changes after the event.</p>
<p>Discussing her approach on BBC Radio 4’s Inside Science, Jess expressed her frustrations at well-meaning but likely ineffective outreach programmes which are costly and may do little to reach, or inspire, their intended audience. As was also noted on the programme, scientists can be endlessly methodical in the lab but - when it comes to outreach - their embrace of the scientific method could be better, and outreach programmes need to be better evaluated. Economists could definitely help here.</p>
<p>What is very cool about Jess’ campaign is that it <em>is</em> possible to get an idea, a rough one at least, of its impact. So just how huge is the reach of this campaign? Let’s find out.</p>
<hr>
<section id="estimating-the-reach-of-wikipedia-pages" class="level3">
<h3 class="anchored" data-anchor-id="estimating-the-reach-of-wikipedia-pages">Estimating the reach of Wikipedia pages</h3>
<p><em>Feel free to skip this section if you’re not interested in the details of how the data were collected.</em></p>
<p>Wikipedia tracks page views, literally the number of times a wiki page has been requested. It’s not a perfect measure of the number of people viewing a webpage (you can find more info on the influences <a href="https://en.wikipedia.org/wiki/Wikipedia:Pageview_statistics">here</a>) as some people are likely to be repeat visitors. Also, if an article is contentious, Wikipedia editors may visit it a lot. The <a href="https://www.haaretz.com/world-news/.premium-the-15-most-controversial-wikipedia-pages-of-2017-1.5730022">debated page</a> on Stanley Kubrick, for example, has had <a href="https://tools.wmflabs.org/pageviews/?project=en.wikipedia.org&amp;platform=all-access&amp;agent=user&amp;start=2017-01&amp;end=2018-07&amp;pages=Stanley_Kubrick">396 edits by 203 editors since 2017</a> (at the time of checking).</p>
<p>So page views aren’t perfect, but they’re likely to be a good order of magnitude indicator of the number of people who have viewed a page.</p>
<p>To get all of the stats for the pages, I found Jess’ editor page, which includes an option to show all newly created pages. With some data wrangling via the <code>beautifulsoup</code> and <code>pandas</code> python packages, I obtained a list of people for whom pages were created. There may be a few extra pages which are not individuals included in error here, and perhaps some missing - but the wrangling should deliver most of them.</p>
<p>With the data on the names of the pages collected, I grabbed the page views using the handy <a href="https://wikitech.wikimedia.org/wiki/Analytics/AQS/Pageviews">wiki page view API</a> and the <code>requests</code> python package. Here’s a snippet of the page views data table:</p>
<table class="table">
<colgroup>
<col style="width: 23%">
<col style="width: 32%">
<col style="width: 22%">
<col style="width: 22%">
</colgroup>
<thead>
<tr class="header">
<th>article</th>
<th>Willetta_Greene-Johnson</th>
<th>Xiangqian_Jiang</th>
<th>Yewande_Akinola</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>date</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td>2017-12-01</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
</tr>
<tr class="odd">
<td>2018-01-01</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
</tr>
<tr class="even">
<td>2018-02-01</td>
<td>0.0</td>
<td>0.0</td>
<td>167.0</td>
</tr>
<tr class="odd">
<td>2018-03-01</td>
<td>0.0</td>
<td>26.0</td>
<td>248.0</td>
</tr>
<tr class="even">
<td>2018-04-01</td>
<td>0.0</td>
<td>8.0</td>
<td>282.0</td>
</tr>
<tr class="odd">
<td>2018-05-01</td>
<td>130.0</td>
<td>15.0</td>
<td>152.0</td>
</tr>
</tbody>
</table>
<p>I used <code>matplotlib</code> and <code>seaborn</code> to show the results.</p>
<hr>
</section>
</section>
<section id="impact-of-the-campaign" class="level1">
<h1>Impact of the campaign</h1>
<p>So: how many people has Jess helped reach information on women in STEM? Over 200,000. This is simply astonishing.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://aeturrell.github.io/markov-wanderer/posts/wikipedia-into-stem/PageViewsJess.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Number of page views as a function of time</figcaption>
</figure>
</div>
<p>The blue line shows the cumulative total number of page views of all pages. The green lines show just how much hard work this has been - there is one for every individual page created. I’ve put in a few of the scientists’ names. Note that the page views data lag a bit behind the page creations.</p>
<p>To put the total number of views into some sort of context, the Royal Society <a href="https://royalsociety.org/science-events-and-lectures/2018/summer-science-exhibition/">Summer Science Exhibition</a>, which I ran a <a href="http://sse.royalsociety.org/2014/heart-of-the-sun/">stand</a> at in 2014, gets around 12,000 visitors per year. Another comparison is that <a href="https://www.universitiesuk.ac.uk/facts-and-stats/data-and-analysis/Documents/facts-and-figures-2016.pdf">there were fewer than 100,000</a> undergraduates studying physical sciences in the UK in 2014-2015. So this is genuinely reaching an amazing number of people.</p>
<p>In the figure below, you can see a few of the most popular pages for 2018 so far:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://aeturrell.github.io/markov-wanderer/posts/wikipedia-into-stem/MostPopArtsWikiv2.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Most visited articles 2018</figcaption>
</figure>
</div>
<p>It’s hard to know who is looking at these pages but it’s certain that they wouldn’t have been if Jess hadn’t created them (and inspired others to do the same). As well as Dr.&nbsp;Stuart Higgins’ <a href="http://www.superscience.org.uk/">Science in the Supermarket</a> from my <a href="http://aeturrell.github.io/home//2018/08/18/left-out-of-HE/">previous post</a> I think this is a great example of how innovative outreach can be more effective in reaching audiences.</p>


</section>

 ]]></description>
  <category>outreach</category>
  <category>code</category>
  <category>data</category>
  <guid>https://aeturrell.github.io/markov-wanderer/posts/wikipedia-into-stem/index.html</guid>
  <pubDate>Fri, 24 Aug 2018 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Who is not participating in Higher Education?</title>
  <dc:creator>Arthur Turrell</dc:creator>
  <link>https://aeturrell.github.io/markov-wanderer/posts/left-out-of-he/index.html</link>
  <description><![CDATA[ 




<p>Given my work in both economics and Science, Technology, Engineering, and Mathematics (STEM), I’ve become interested in what factors determine groups’ participation in higher education, what groups are being left out, and what might be done about it.</p>
<section id="poverty-means-low-participation" class="level2">
<h2 class="anchored" data-anchor-id="poverty-means-low-participation">Poverty means low participation</h2>
<p>According to a <a href="https://cdn.lkmco.org/wp-content/uploads/2016/12/Ethnicity-gender-and-social-mobility-Shaw-et-al.-2016.pdf">Social Mobility Commission</a> report from 2016, the most important determinant of whether someone goes to university at all or not is poverty, or, more precisely, whether someone receives free school meals. This applies across gender and ethnicity, though as the report notes “Disadvantaged young people from White British backgrounds are the least likely to access Higher Education”.</p>
<p>A lack of diversity in socio-economic background is perhaps less visible than some other troubling aspects of participation. But, if diversity matters at all, all dimensions of diversity matter.</p>
<p>Unfortunately, people from lower income/wealth backgrounds are some of the most difficult to influence with outreach campaigns as they tend to live in “remote rural or coastal areas and in former industrial areas, especially in the Midlands” according to the 2017 Social Mobility Commission’s ‘State of the nation’ <a href="https://www.gov.uk/government/publications/state-of-the-nation-2017">report</a>. I’m from one of the parts of the UK specifically identified in this report, the High Peak, and it’s unfortunately not all that surprising. Higher education institutions, and jobs which require advanced qualifications, are physically and psychologically at a distance. Other poorly ranked areas are similar: they include West Somerset (324 of 324), Thanet (274 of 324), and a cluster around West Norfolk.</p>
<p>There are detailed data on participation in higher education amongst young people available from the <a href="https://www.officeforstudents.org.uk/">Office for Students</a>. I’ve made a choropleth of these data below. The geographical areas with low participation are much the same as the problem areas identified in the report on social mobility. If you’re not interested in where the data come from, skip the box below the figure.</p>
<p><img src="https://aeturrell.github.io/markov-wanderer/posts/left-out-of-he/map.png" class="img-fluid" alt="Youth higher education participation rate by local authority district. Shown are Manchester and the Peak District."> <em>Youth higher education participation rate by local authority district. Shown: Manchester and the Peak District.</em></p>
<hr>
</section>
<section id="data-on-youth-he-participation" class="level2">
<h2 class="anchored" data-anchor-id="data-on-youth-he-participation">Data on youth HE participation</h2>
<p>The Office for Students provide <a href="https://www.officeforstudents.org.uk/data-and-analysis/polar-participation-of-local-areas/polar4-data/">data</a> on the number of young people who participate in HE by middle super output areas. These are quite small areas so I’ve aggregated to local authority districts using a mapping which comes from data on <a href="https://www.ons.gov.uk/file?uri=/employmentandlabourmarket/peopleinwork/earningsandworkinghours/datasets/householdsinpovertyestimatesformiddlelayersuperoutputareasinenglandandwales201112/current/householdsinpoverty201112.xls">households in poverty</a>. I plotted these data with <code>folium</code> using <a href="http://geoportal.statistics.gov.uk/datasets/local-authority-districts-december-2016-ultra-generalised-clipped-boundaries-in-the-uk-wgs84">maps from the ONS Open Geography portal</a>. Minor gripe: no geojson format was available, so I had to make my own from the shapefiles.</p>
<hr>
</section>
<section id="science-in-the-supermarket" class="level2">
<h2 class="anchored" data-anchor-id="science-in-the-supermarket">Science in the supermarket</h2>
<p>Recently, I discussed how to reach those with the least HE participation with outreach superstar and Imperial College London colleague Dr.&nbsp;Stuart Higgins (whose award-winning podcast <a href="http://www.scinotsci.com/">Scientists Not The Science</a> is worth checking out). As I understand it, the best advice - based on research - is that you need to show young students a path into higher education which could work for them; that it’s feasible, that it’s for people ‘like them’, and that they’re good enough to make it.</p>
<p>I was talking to Stuart because of an amazing recent initiative he’s been involved with called <a href="http://www.superscience.org.uk/">Science in the Supermarket</a> which puts what he’s learned into practice. Stuart and some other volunteers supported by Imperial College went to a supermarket in Somerset to engage young and old alike with science demos, and to tell them about careers in STEM. Although on a small scale, I think the brilliance of this initiative is that it avoids the self-selection problem which some other outreach programmes suffer from. I would love to see Economists in the Supermarket, or even Applied Mathematics in the Supermarket!</p>
<section id="update-250818" class="level3">
<h3 class="anchored" data-anchor-id="update-250818">Update 25/08/18</h3>
<p>Stuart has <a href="http://www.superscience.org.uk/index.php/project-resources/#report">written up the results</a> of the Science in the Supermarket project he ran so that others can learn from it. Laudably, by setting out everything from the project timetable, to the letters asking for volunteers, to the design of the meta-evaluation, to the costs, Stuart has made this intervention as reproducible as possible. Others can build upon what he has done. It’s a more scientific way to run an outreach programme.</p>
<p>Stuart gave me some informal pointers on ‘what I would think about if starting another project’ which I’ve made some minor tweaks to and reproduced below: - Understand your own motivation and define a target; trying to approach a big problem can feel overwhelming and paralysing, starting with a specific, local goal can help - Accept that balancing engagement with a day job is challenging - Set a realistic scope for the project and accept that ‘good enough’ is good enough - If possible, get both bottom-up (to help share the workload), and top-down support (to add legitimacy, open doors to resources, etc) - Try and be evidence-based where possible</p>
<p>Another resource he mentioned is this <a href="https://www.kcl.ac.uk/sspp/departments/education/research/aspires/ASPIRES-final-report-December-2013.pdf">Aspires Report</a> on ‘Young people’s science and career aspirations’. The two key findings I took away from it were that young people aren’t necessarily aware of the careers which science can open up (economics!) and that ‘science capital’ is a strong predictor of aspiring to a career in science but that this capital is unevenly distributed across socio-economic groups.</p>
<p>Processing all of this, it seems like making STEM careers and/or STEM practitioners familiar to young people is one of the most useful outcomes outreach programmes can strive for.</p>


</section>
</section>

 ]]></description>
  <category>outreach</category>
  <category>data</category>
  <guid>https://aeturrell.github.io/markov-wanderer/posts/left-out-of-he/index.html</guid>
  <pubDate>Fri, 17 Aug 2018 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Why the latest, most exciting thing in machine learning is… game theory</title>
  <dc:creator>Arthur Turrell</dc:creator>
  <link>https://aeturrell.github.io/markov-wanderer/posts/game-theory-rescue/index.html</link>
  <description><![CDATA[ 




<p><em>And when I say latest, this particular method was invented in 1953.</em></p>
<p>Machine learning has interpretability issues. New EU legislation, the General Data Protection Regulation, includes a <a href="https://www.privacy-regulation.eu/en/r71.htm">line</a> about “the right … to obtain an explanation of the decision reached”, including by an algorithm.</p>
<p>Of course, there are many other good reasons to want the decisions of algorithms to be understandable and explainable. Interrogating why an algorithm makes the choices it does can highlight whether <a href="https://medium.com/@jrzech/what-are-radiological-deep-learning-models-actually-learning-f97a546c5b98">it’s working as intended</a>, and, in some situations - such as public policy - transparency and interpretability may be essential ingredients of decision making.</p>
<p>But non-linear models are just not that easy to decompose into their fundamental components, they are - to an extent - a ‘black box’. Ideally, we would be able to find the contribution of each input feature to the final prediction. In linear models, this is trivially achieved by the combination of the level of a feature and its regression coefficient. That is, for a linear model <img src="https://latex.codecogs.com/png.latex?f"> with features <img src="https://latex.codecogs.com/png.latex?x_%7Bi%5Cnu%7D">, <img src="https://latex.codecogs.com/png.latex?%5Cnu%20%5Cin%20%5C%7B1,p%5C%7D"> at a point <img src="https://latex.codecogs.com/png.latex?i"> such that</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%7Bf%7D(x_%7Bi%5Ccdot%7D)=%7Bf%7D(x_%7Bi1%7D,%5Cldots,x_%7Bip%7D)=%5Cbeta_0+%5Cbeta_%7B1%7Dx_%7Bi1%7D+%5Cldots+%5Cbeta_%7Bp%7Dx_%7Bip%7D%0A"></p>
<p>the contribution from feature <img src="https://latex.codecogs.com/png.latex?%5Cnu"> is <img src="https://latex.codecogs.com/png.latex?x_%7Bi%5Cnu%7D%5Ccdot%5Cbeta_%5Cnu">. In non-linear models, it’s not so simple.</p>
<section id="shapley-values" class="level3">
<h3 class="anchored" data-anchor-id="shapley-values">Shapley values</h3>
<p>Game theory to the rescue. In 1953 Lloyd Shapley introduced values which effectively find, for a co-operative game, each player’s marginal contribution, averaged over every possible sequence in which the players could have been added to the group of players (Alvin Roth talks about it <a href="https://voxeu.org/article/ideas-lloyd-shapley">here</a>). These are called Shapley values and, in a nutshell, they are the average expected marginal contribution of one player after all possible combinations of players have been considered.</p>
<p>This is exactly the kind of problem we want to solve to understand how different features contribute to a predicted value in a non-linear model, for instance in a machine learning. But it’s easier to understand them in the linear case. The Shapley value for the linear model above would be, for feature <img src="https://latex.codecogs.com/png.latex?%5Cnu">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cphi_%7Bi%5Cnu%7D(%7Bf%7D)=%5Cbeta_%7B%5Cnu%7Dx_%7Bi%5Cnu%7D-E(%5Cbeta_%7B%5Cnu%7DX_%7B%5Cnu%7D)=%5Cbeta_%7B%5Cnu%7Dx_%7Bi%5Cnu%7D-%5Cbeta_%7B%5Cnu%7DE(X_%7B%5Cnu%7D)%0A"></p>
<p>where no Einstein summation is implied. Summing over the different features gets back a number which is simply related to the overall prediction given by <img src="https://latex.codecogs.com/png.latex?f">,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Csum_%7B%5Cnu=1%7D%5E%7Bp%7D%5Cphi_%7Bi%5Cnu%7D(%7Bf%7D)=%7Bf%7D(x_%7Bi%5Ccdot%7D)-E(%7Bf%7D(X))%0A"></p>
<p>The general equation for Shapley values looks more complicated, but is described by a function <img src="https://latex.codecogs.com/png.latex?g"> that assigns a real number to each coalition <img src="https://latex.codecogs.com/png.latex?S">, that is, to each subset of the combination of features, such that <img src="https://latex.codecogs.com/png.latex?g(S)"> represents the amount (of money or of utility) that coalition <img src="https://latex.codecogs.com/png.latex?S"> is able to transfer among its members in any way that they all agree to. Here it is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cphi_%7Bi%5Cnu%7D(f)=%5Csum_%7BS%5Csubseteq%5C%7Bx_%7Bi1%7D,%5Cldots,x_%7Bip%7D%5C%7D%5Csetminus%5C%7Bx_%7Bi%5Cnu%7D%5C%7D%7D%5Cfrac%7B%7CS%7C!%5Cleft(p-%7CS%7C-1%5Cright)!%7D%7Bp!%7D%5Cunderbrace%7B%5Cleft%5Bg_%7B%5Cleft(S%5Ccup%5C%7Bx_%7Bi%5Cnu%7D%5C%7D%5Cright)%7D%5Cleft(S%5Ccup%5C%7Bx_%7Bi%5Cnu%7D%5C%7D%5Cright)-g_S(S)%5Cright%5D%7D_%7B%5Ctext%7BMarginal%20contribution%7D%7D%0A"></p>
<p>where</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ag_%7Bx_i%7D(S)=%5Cint%7Bf%7D(x_%7Bi1%7D,%5Cldots,x_%7Bip%7D)d%5Cmathbb%7BP%7D_%7BX_%7Bi%5Ccdot%7D%5Cnotin%7B%7DS%7D-E_X(%7Bf%7D(X))%0A"></p>
</section>
<section id="shapley-values-for-machine-learning" class="level3">
<h3 class="anchored" data-anchor-id="shapley-values-for-machine-learning">Shapley values for machine learning</h3>
<p>Shapley values have a number of nice properties which are both familiar from linear decompositions/linear models and highly desirable for machine learning models:</p>
<ul>
<li><p>the Shapley value contributions sum to the difference between the full prediction and the average prediction (efficiency)</p></li>
<li><p>two features which contribute equally to any subset to which they’re added have the same Shapley value (substitutability/symmetry)</p></li>
<li><p>a feature which doesn’t influence the predicted value has a Shapley value of 0 (dummy player)</p></li>
</ul>
<p>These nice properties are not trivial for non-linear models, and Shapley values are the <a href="http://www.lamsade.dauphine.fr/~airiau/Teaching/CoopGames/2011/coopgames-7%5B8up%5D.pdf">only way to achieve them concurrently</a>. They’re also what suggest to me that Shapley values will become the primary interpretability method used and understood. There must be some catch, right?</p>
<p>There is. Which is why other methods, such as local surrogate models like <a href="https://github.com/marcotcr/lime">LIME</a>, are not going away anytime soon. If the factorials and sum over all combinations of input features in the equation didn’t give it away, Shapley values are computationally expensive. As <a href="https://link.springer.com/article/10.1007%2FBF01258278">this paper</a> points out, “every exact algorithm for the Shapley value requires an exponential number of operations”. Oh dear.</p>
<p>The good news is that there are <a href="https://www.sciencedirect.com/science/article/pii/S0004370208000696?via%3Dihub">good approximations</a> out there. The even better news is that there is a <a href="https://github.com/slundberg/shap">Python library</a> called <code>shap</code> which implements a fast approximation method, is easy to use, and is even optimised for <code>sklearn</code>. The paper behind this is <a href="http://papers.nips.cc/paper/7062-a-unified-approach-to-interpreting-model-predictions">here</a>.</p>
<p>Not everyone is convinced by Shapley values but I think they could be particularly important as they have properties which are so clearly and neatly analogous to decompositions of linear models.</p>
<p>If you’d like to find out more about how Shapley values work, see these excellent explainer blog posts which I drew on heavily for this post:</p>
<ul>
<li><a href="https://towardsdatascience.com/one-feature-attribution-method-to-supposedly-rule-them-all-shapley-values-f3e04534983d">One Feature Attribution Method to (Supposedly) Rule Them All: Shapley Values</a></li>
<li><a href="https://christophm.github.io/interpretable-ml-book/shapley.html">Interpretable machine learning: Shapley Value Explanations</a></li>
<li><a href="https://voxeu.org/article/ideas-lloyd-shapley">Lloyd Shapley: A founding giant of game theory</a></li>
</ul>


</section>

 ]]></description>
  <category>research</category>
  <category>machine-learning</category>
  <guid>https://aeturrell.github.io/markov-wanderer/posts/game-theory-rescue/index.html</guid>
  <pubDate>Tue, 10 Jul 2018 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Econometrics in Python Part IV - Running many regressions alongside pandas</title>
  <dc:creator>Arthur Turrell</dc:creator>
  <link>https://aeturrell.github.io/markov-wanderer/posts/running-many-regressions-alongside-pandas/index.html</link>
  <description><![CDATA[ 




<p><em>The fourth in the series of posts covering econometrics in Python. This time: automating the boring business of running multiple regressions on columns in a pandas dataframe.</em></p>
<p>Data science in Python <em>is</em> the open source package <a href="https://pandas.pydata.org/">pandas</a>, more or less. It’s an amazing, powerful library and the firms, researchers, and governments who use it are indebted to its maintainers, including <a href="http://wesmckinney.com/">Wes McKinney</a>.</p>
<p>When data arrive in your Python code, they’re most likely going to arrive in a pandas dataframe. If you’re doing econometrics, you’re then likely to want to do regressions from the dataframe with the minimum of fuss and the maximum of flexibility. This post sets out a way to do that with a few extra functions.</p>
<p>There are two main ways to run regressions in Python: <a href="https://www.statsmodels.org/stable/index.html">statsmodels</a> or <a href="http://scikit-learn.org/stable/">scikit-learn</a>. The latter is more geared toward machine learning, so I’ll be using the former for regressions. The typical way to do this might be the following (ignoring imports and data importing), with a pandas dataframe <code>df</code> with an x-variable ‘concrete’ and a y-variable ‘age’:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">mod <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sm.OLS(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age'</span>],df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Concrete'</span>])</span>
<span id="cb1-2">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mod.fit()</span>
<span id="cb1-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(results.summary())</span></code></pre></div>
<pre><code>                            OLS Regression Results                            
==============================================================================
Dep. Variable:                    Age   R-squared:                       0.414
Model:                            OLS   Adj. R-squared:                  0.414
Method:                 Least Squares   F-statistic:                     728.1
Date:                     05 May 2018   Prob (F-statistic):          1.05e-121
Time:                        00:00:00   Log-Likelihood:                -5672.3
No. Observations:                1030   AIC:                         1.135e+04
Df Residuals:                    1029   BIC:                         1.135e+04
Df Model:                           1                                         
Covariance Type:            nonrobust                                         
==============================================================================
                 coef    std err          t      P&gt;|t|      [0.025      0.975]
------------------------------------------------------------------------------
Concrete       1.2693      0.047     26.984      0.000       1.177       1.362
==============================================================================
Omnibus:                      761.497   Durbin-Watson:                   0.998
Prob(Omnibus):                  0.000   Jarque-Bera (JB):             9916.238
Skew:                           3.411   Prob(JB):                         0.00
Kurtosis:                      16.584   Cond. No.                         1.00
==============================================================================

Warnings:
[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.</code></pre>
<p>In the rest of this post I will outline a more flexible and extensible way of doing this, which will allow for multiple models and controls, with code snippets you can copy, paste, and then forget about.</p>
<section id="loading-the-data" class="level2">
<h2 class="anchored" data-anchor-id="loading-the-data">Loading the data</h2>
<p>Our data are on the compressive strength of concrete - I know, brilliant, and we could talk more about the <a href="https://www.npr.org/2012/02/17/147047553/concretes-role-as-a-building-block-in-history">fascinating history of concrete</a> and its <a href="https://www.bbc.co.uk/programmes/p04gyg20">importance for the economy</a>, but we should get to the stats. The data are from the UC Irvine Machine Learning datasets repository; <a href="http://archive.ics.uci.edu/ml/datasets/Concrete+Compressive+Strength">see here for them</a>.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_excel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'concrete_data.xls'</span>)</span>
<span id="cb3-2">df.head()</span></code></pre></div>
<pre><code>   Cement (component 1)(kg in a m^3 mixture)  \
0                                      540.0   
1                                      540.0   
2                                      332.5   
3                                      332.5   
4                                      198.6   

   Blast Furnace Slag (component 2)(kg in a m^3 mixture)  \
0                                                0.0       
1                                                0.0       
2                                              142.5       
3                                              142.5       
4                                              132.4       

   Fly Ash (component 3)(kg in a m^3 mixture)  \
0                                         0.0   
1                                         0.0   
2                                         0.0   
3                                         0.0   
4                                         0.0   

   Water  (component 4)(kg in a m^3 mixture)  \
0                                      162.0   
1                                      162.0   
2                                      228.0   
3                                      228.0   
4                                      192.0   

   Superplasticizer (component 5)(kg in a m^3 mixture)  \
0                                                2.5     
1                                                2.5     
2                                                0.0     
3                                                0.0     
4                                                0.0     

   Coarse Aggregate  (component 6)(kg in a m^3 mixture)  \
0                                             1040.0      
1                                             1055.0      
2                                              932.0      
3                                              932.0      
4                                              978.4      

   Fine Aggregate (component 7)(kg in a m^3 mixture)  Age (day)  \
0                                              676.0         28   
1                                              676.0         28   
2                                              594.0        270   
3                                              594.0        365   
4                                              825.5        360   

   Concrete compressive strength(MPa, megapascals)   
0                                         79.986111  
1                                         61.887366  
2                                         40.269535  
3                                         41.052780  
4                                         44.296075  </code></pre>
<p>Those column names are rather long! I’ll just take the first word of each column name, and take a quick look at the data:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.rename(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(df.columns,[x.split()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> df.columns])))</span>
<span id="cb5-2">df.describe()</span></code></pre></div>
<pre><code>            Cement        Blast          Fly        Water  Superplasticizer  \
count  1030.000000  1030.000000  1030.000000  1030.000000       1030.000000   
mean    281.165631    73.895485    54.187136   181.566359          6.203112   
std     104.507142    86.279104    63.996469    21.355567          5.973492   
min     102.000000     0.000000     0.000000   121.750000          0.000000   
25%     192.375000     0.000000     0.000000   164.900000          0.000000   
50%     272.900000    22.000000     0.000000   185.000000          6.350000   
75%     350.000000   142.950000   118.270000   192.000000         10.160000   
max     540.000000   359.400000   200.100000   247.000000         32.200000   

            Coarse         Fine          Age     Concrete  
count  1030.000000  1030.000000  1030.000000  1030.000000  
mean    972.918592   773.578883    45.662136    35.817836  
std      77.753818    80.175427    63.169912    16.705679  
min     801.000000   594.000000     1.000000     2.331808  
25%     932.000000   730.950000     7.000000    23.707115  
50%     968.000000   779.510000    28.000000    34.442774  
75%    1029.400000   824.000000    56.000000    46.136287  
max    1145.000000   992.600000   365.000000    82.599225  </code></pre>
</section>
<section id="defining-functions-to-run-regressions" class="level2">
<h2 class="anchored" data-anchor-id="defining-functions-to-run-regressions">Defining functions to run regressions</h2>
<p>Let’s set up a function which we can pass a dataframe to in order to run regressions on selected columns:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> RegressionOneModel(df,Xindvars,Yvar,summary<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="cb7-2"></span>
<span id="cb7-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(Yvar)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb7-4">        Yvar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[Yvar]</span>
<span id="cb7-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(Yvar)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb7-6">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error: please enter a single y variable"</span>)</span>
<span id="cb7-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> np.nan</span>
<span id="cb7-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb7-9">        xf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.dropna(subset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Yvar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>Xindvars)[Xindvars<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>Yvar]</span>
<span id="cb7-10">        Xexog <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xf[Xindvars]</span>
<span id="cb7-11">        model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sm.OLS(xf[Yvar].dropna(),Xexog)</span>
<span id="cb7-12">        reg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.fit()</span>
<span id="cb7-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(summary):</span>
<span id="cb7-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> reg.summary2()</span>
<span id="cb7-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb7-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> reg</span></code></pre></div>
<p>How this does work? It’s easiest to show with an example.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">regResults <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RegressionOneModel(df,[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Cement'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Blast'</span>],<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Concrete'</span>)</span>
<span id="cb8-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(regResults)</span></code></pre></div>
<pre><code>                 Results: Ordinary least squares
==================================================================
Model:              OLS              Adj. R-squared:     0.878    
Dependent Variable: Concrete         AIC:                8332.8955
Date:               2018-05-05 00:00 BIC:                8342.7701
No. Observations:   1030             Log-Likelihood:     -4164.4  
Df Model:           2                F-statistic:        3705.    
Df Residuals:       1028             Prob (F-statistic): 0.00     
R-squared:          0.878            Scale:              190.64   
---------------------------------------------------------------------
          Coef.     Std.Err.       t       P&gt;|t|     [0.025    0.975]
---------------------------------------------------------------------
Cement    0.1079      0.0017    63.4736    0.0000    0.1046    0.1113
Blast     0.0671      0.0045    14.9486    0.0000    0.0583    0.0760
------------------------------------------------------------------
Omnibus:               7.719        Durbin-Watson:           0.983
Prob(Omnibus):         0.021        Jarque-Bera (JB):        6.461
Skew:                  0.117        Prob(JB):                0.040
Kurtosis:              2.690        Condition No.:           3    
==================================================================</code></pre>
<p>This function takes a variable number of X vectors and regresses Y (‘concrete’) on them. But what if we want to run many regressions at once? Fortunately <code>statsmodels</code> has some capability to do this. Unfortunately, it’s not all that intuitive and, to use it with ease, we’ll need to extend. I want it to be flexible enough so that it: - works with X as a string, list, or a list of lists (for multiple models) - accepts a number of controls which are the same in every model - returns either a multi-model regression results summary or a single model summary as appropriate</p>
<p>To make this all work, we need a couple of extra functions. One just labels different models with Roman numerals and could be jettisoned. The other one is just a quick way of combining the variables to send to the regression.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> write_roman(num):</span>
<span id="cb10-2"></span>
<span id="cb10-3">    roman <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OrderedDict()</span>
<span id="cb10-4">    roman[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M"</span></span>
<span id="cb10-5">    roman[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">900</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CM"</span></span>
<span id="cb10-6">    roman[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D"</span></span>
<span id="cb10-7">    roman[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CD"</span></span>
<span id="cb10-8">    roman[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span></span>
<span id="cb10-9">    roman[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"XC"</span></span>
<span id="cb10-10">    roman[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"L"</span></span>
<span id="cb10-11">    roman[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"XL"</span></span>
<span id="cb10-12">    roman[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X"</span></span>
<span id="cb10-13">    roman[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IX"</span></span>
<span id="cb10-14">    roman[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"V"</span></span>
<span id="cb10-15">    roman[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IV"</span></span>
<span id="cb10-16">    roman[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I"</span></span>
<span id="cb10-17"></span>
<span id="cb10-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> roman_num(num):</span>
<span id="cb10-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> r <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> roman.keys():</span>
<span id="cb10-20">            x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">divmod</span>(num, r)</span>
<span id="cb10-21">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span> roman[r] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x</span>
<span id="cb10-22">            num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> (r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x)</span>
<span id="cb10-23">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb10-24">                roman_num(num)</span>
<span id="cb10-25">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb10-26">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb10-27"></span>
<span id="cb10-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>.join([a <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> a <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> roman_num(num)])</span>
<span id="cb10-29"></span>
<span id="cb10-30"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> combineVarsList(X,Z,combine):</span>
<span id="cb10-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(combine):</span>
<span id="cb10-32">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>Z</span>
<span id="cb10-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb10-34">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> X</span></code></pre></div>
<p>Finally, there is a function which decides how to call the underlying regression code, and which stitches the results from different models together:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> RunRegression(df,XX,y,Z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>]):</span>
<span id="cb11-2"></span>
<span id="cb11-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If XX is not a list of lists, make it one -</span></span>
<span id="cb11-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - first by checking if type is string</span></span>
<span id="cb11-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(XX)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if it is one string</span></span>
<span id="cb11-6">        XX <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [XX]</span>
<span id="cb11-7">     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - second for if it is a list</span></span>
<span id="cb11-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(el, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> el <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> XX))):</span>
<span id="cb11-9">        XX <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [XX]</span>
<span id="cb11-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(y)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check y for string</span></span>
<span id="cb11-11">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Error: please enter string for dependent variable'</span>)</span>
<span id="cb11-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> np.nan</span>
<span id="cb11-13">    title_string <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'OLS Regressions; dependent variable '</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>y</span>
<span id="cb11-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If Z is not a list, make it one</span></span>
<span id="cb11-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(Z)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb11-16">        Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Z]</span>
<span id="cb11-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#XX = np.array(XX)</span></span>
<span id="cb11-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check whether there is just a single model to run</span></span>
<span id="cb11-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(XX)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb11-20">        Xpassvars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(XX[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb11-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(Z[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb11-22">             Xpassvars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(XX[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>Z</span>
<span id="cb11-23">        regRes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RegressionOneModel(df,Xpassvars,[y],summary<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb11-24">        regResSum2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> regRes.summary2()</span>
<span id="cb11-25">        regResSum2.add_title(title_string)</span>
<span id="cb11-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> regResSum2</span>
<span id="cb11-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(XX)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb11-28">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load in Z here if appropriate</span></span>
<span id="cb11-29">        addControls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb11-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(Z[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb11-31">             addControls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb11-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Case with multiple models</span></span>
<span id="cb11-33">        info_dict<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'R-squared'</span> : <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:.2f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(x.rsquared),</span>
<span id="cb11-34">               <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Adj. R-squared'</span> : <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:.2f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(x.rsquared_adj),</span>
<span id="cb11-35">               <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'No. observations'</span> : <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{0:d}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(x.nobs))}</span>
<span id="cb11-36">        regsVec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [RegressionOneModel(df,combineVarsList(X,Z,addControls),</span>
<span id="cb11-37">                                              [y],summary<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> X <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> XX]</span>
<span id="cb11-38">        model_names_strList <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Model '</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+\</span></span>
<span id="cb11-39">                           write_roman(i) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(XX)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)]</span>
<span id="cb11-40">        float_format_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%0.2f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb11-41">        uniqueVars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.unique([item <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> sublist <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> XX <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sublist])</span>
<span id="cb11-42">        uniqueVars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> uniqueVars]</span>
<span id="cb11-43">        results_table <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> summary_col(results<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>regsVec,</span>
<span id="cb11-44">                                float_format<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>float_format_str,</span>
<span id="cb11-45">                                stars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb11-46">                                model_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model_names_strList,</span>
<span id="cb11-47">                                info_dict<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>info_dict,</span>
<span id="cb11-48">                                regressor_order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>uniqueVars<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>Z)</span>
<span id="cb11-49">        results_table.add_title(title_string)</span>
<span id="cb11-50">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> results_table</span></code></pre></div>
</section>
<section id="putting-it-all-together" class="level2">
<h2 class="anchored" data-anchor-id="putting-it-all-together">Putting it all together</h2>
<p>Let’s see how it works. Firstly, the simple case of one y on one x.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">regResults <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RunRegression(df,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Blast'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Concrete'</span>)</span>
<span id="cb12-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(regResults)</span></code></pre></div>
<pre><code>           OLS Regressions; dependent variable Concrete
==================================================================
Model:              OLS              Adj. R-squared:     0.400    
Dependent Variable: Concrete         AIC:                9971.8287
Date:               2018-05-05 00:00 BIC:                9976.7660
No. Observations:   1030             Log-Likelihood:     -4984.9  
Df Model:           1                F-statistic:        688.0    
Df Residuals:       1029             Prob (F-statistic): 1.57e-116
R-squared:          0.401            Scale:              936.87   
---------------------------------------------------------------------
          Coef.     Std.Err.       t       P&gt;|t|     [0.025    0.975]
---------------------------------------------------------------------
Blast     0.2203      0.0084    26.2293    0.0000    0.2038    0.2367
------------------------------------------------------------------
Omnibus:               39.762       Durbin-Watson:          0.477
Prob(Omnibus):         0.000        Jarque-Bera (JB):       43.578
Skew:                  -0.502       Prob(JB):               0.000
Kurtosis:              3.081        Condition No.:          1     
==================================================================</code></pre>
<p>Or several x variables:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">regResults <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RunRegression(df,[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Cement'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Blast'</span>],<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Concrete'</span>)</span>
<span id="cb14-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(regResults)</span></code></pre></div>
<pre><code>           OLS Regressions; dependent variable Concrete
==================================================================
Model:              OLS              Adj. R-squared:     0.878    
Dependent Variable: Concrete         AIC:                8332.8955
Date:               2018-05-05 00:00 BIC:                8342.7701
No. Observations:   1030             Log-Likelihood:     -4164.4  
Df Model:           2                F-statistic:        3705.    
Df Residuals:       1028             Prob (F-statistic): 0.00     
R-squared:          0.878            Scale:              190.64   
---------------------------------------------------------------------
          Coef.     Std.Err.       t       P&gt;|t|     [0.025    0.975]
---------------------------------------------------------------------
Cement    0.1079      0.0017    63.4736    0.0000    0.1046    0.1113
Blast     0.0671      0.0045    14.9486    0.0000    0.0583    0.0760
------------------------------------------------------------------
Omnibus:               7.719        Durbin-Watson:           0.983
Prob(Omnibus):         0.021        Jarque-Bera (JB):        6.461
Skew:                  0.117        Prob(JB):                0.040
Kurtosis:              2.690        Condition No.:           3    
==================================================================</code></pre>
<p>Here comes the fun - to run multiple models, we need only pass a list of lists as the X variable in the function:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">Model_1_X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Cement'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Blast'</span>]</span>
<span id="cb16-2">Model_2_X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Coarse'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fine'</span>]</span>
<span id="cb16-3">Model_3_X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fly'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Water'</span>]</span>
<span id="cb16-4">ManyModelResults <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RunRegression(df,</span>
<span id="cb16-5">                                 [Model_1_X,Model_2_X,Model_3_X],</span>
<span id="cb16-6">                                 <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Concrete'</span>)</span>
<span id="cb16-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(ManyModelResults)</span></code></pre></div>
<pre><code>OLS Regressions; dependent variable Concrete
===========================================
                 Model I Model II Model III
-------------------------------------------
Blast            0.07***                   
                 (0.00)                    
Cement           0.11***                   
                 (0.00)                    
Coarse                   0.03***           
                         (0.00)            
Fine                     0.01***           
                         (0.00)            
Fly                               0.00     
                                  (0.01)   
Water                             0.19***  
                                  (0.00)   
R-squared        0.88    0.81     0.78     
Adj. R-squared   0.88    0.81     0.78     
No. observations 1030    1030     1030     
===========================================
Standard errors in parentheses.
* p&lt;.1, ** p&lt;.05, ***p&lt;.01</code></pre>
<p>There’s a keyword argument, <code>Z</code>, which we can pass controls (here just ‘Age’) via:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">ManyModelsWControl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RunRegression(df,</span>
<span id="cb18-2">                                 [Model_1_X,Model_2_X,Model_3_X],</span>
<span id="cb18-3">                                 <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Concrete'</span>,</span>
<span id="cb18-4">                                 Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age'</span>)</span>
<span id="cb18-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(ManyModelsWControl)</span></code></pre></div>
<pre><code>OLS Regressions; dependent variable Concrete
===========================================
                 Model I Model II Model III
-------------------------------------------
Blast            0.05***                   
                 (0.00)                    
Cement           0.08***                   
                 (0.00)                    
Coarse                   0.03***           
                         (0.00)            
Fine                     -0.01**           
                         (0.00)            
Fly                               -0.06***
                                  (0.01)   
Water                             0.12***  
                                  (0.00)   
Age              0.10*** 0.11***  0.10***  
                 (0.01)  (0.01)   (0.01)   
Superplasticizer 1.04*** 1.44***  1.84***  
                 (0.06)  (0.08)   (0.08)   
R-squared        0.92    0.87     0.88     
Adj. R-squared   0.92    0.87     0.87     
No. observations 1030    1030     1030     
===========================================
Standard errors in parentheses.
* p&lt;.1, ** p&lt;.05, ***p&lt;.01</code></pre>
<p>Finally, it’s easy to pass multiple controls:</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">ManyModelsWControls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RunRegression(df,</span>
<span id="cb20-2">                                 [Model_1_X,Model_2_X,Model_3_X],</span>
<span id="cb20-3">                                 <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Concrete'</span>,</span>
<span id="cb20-4">                                 Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Superplasticizer'</span>])</span>
<span id="cb20-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(ManyModelsWControls)</span></code></pre></div>
<pre><code>OLS Regressions; dependent variable Concrete
===========================================
                 Model I Model II Model III
-------------------------------------------
Blast            0.05***                   
                 (0.00)                    
Cement           0.08***                   
                 (0.00)                    
Coarse                   0.03***           
                         (0.00)            
Fine                     -0.01**           
                         (0.00)            
Fly                               -0.06***
                                  (0.01)   
Water                             0.12***  
                                  (0.00)   
Age              0.10*** 0.11***  0.10***  
                 (0.01)  (0.01)   (0.01)   
Superplasticizer 1.04*** 1.44***  1.84***  
                 (0.06)  (0.08)   (0.08)   
R-squared        0.92    0.87     0.88     
Adj. R-squared   0.92    0.87     0.87     
No. observations 1030    1030     1030     
===========================================
Standard errors in parentheses.
* p&lt;.1, ** p&lt;.05, ***p&lt;.01</code></pre>
<p>By the way, the statsmodels summary object which is returned here has an .as_latex() method - useful if you want to dump results straight into papers.</p>
<p>Do you have a better way to quickly run many different kinds of OLS regressions from a pandas dataframe? Get in touch!</p>
<p><em>NB: I had to remove the doc strings in the above code because they slowed down the page a lot.</em></p>


</section>

 ]]></description>
  <category>code</category>
  <category>econometrics</category>
  <category>python</category>
  <guid>https://aeturrell.github.io/markov-wanderer/posts/running-many-regressions-alongside-pandas/index.html</guid>
  <pubDate>Fri, 04 May 2018 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Econometrics in Python part III - Estimating heterogeneous treatment effects using random forests</title>
  <dc:creator>Arthur Turrell</dc:creator>
  <link>https://aeturrell.github.io/markov-wanderer/posts/estimation-heterogeneous-treatment-random-forests/index.html</link>
  <description><![CDATA[ 




<p><em>The third in a series of posts covering econometrics in Python. Here I look at ‘causal forests’.</em></p>
<p>As I mentioned in a <a href="{{site.baseurl}}/2018/02/10/econometrics-in-python-partI-ML/">previous post</a>, there are methods at the intersection of machine learning and econometrics which are really exciting. <a href="https://www.gsb.stanford.edu/faculty-research/faculty/susan-athey">Susan Athey</a> is very active in this space and has written a number of papers, including a review article of where the cross-over between economics and computer science is headed. In this post, I’m going to look at recreating an example from her paper, ‘Estimation and inference of heterogeneous treatment effects using random forests’ (Wager &amp; Athey, 2017).</p>
<p>The paper is a recipe for doing non-parametric causal estimation of heterogeneous treatment effects. Imagine a natural experiment with people who are different according to a set of covariates <img src="https://latex.codecogs.com/png.latex?X_i">, and who are assigned a treatment <img src="https://latex.codecogs.com/png.latex?W_i%20%5Cin%20%5C%7B0,1%5C%7D">. The response is <img src="https://latex.codecogs.com/png.latex?Y_i%20%5Cin%20%5Cmathbb%7BR%7D">, giving <img src="https://latex.codecogs.com/png.latex?(X_i,W_i,Y_i)"> for each observation. Then the treatment effect, given by</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctau(x)%20=%20%5Cmathbb%7BE%7D%5Cleft%5BY%5E%7B(1)%7D-Y%5E%7B(0)%7D%20%7C%20X%20=%20x%5Cright%5D%0A"> can be estimated using a random forest, where the observed response <img src="https://latex.codecogs.com/png.latex?Y%5E%7B(h)%7D"> is labelled for either the treatment case (<img src="https://latex.codecogs.com/png.latex?h=1">) or the no treatment case (<img src="https://latex.codecogs.com/png.latex?h=0">).</p>
<p>What is especially nice about Wager and Athey’s approach is that it employs the power of classification and regression trees but provides point estimates of the treatment effect that are pointwise consistent and satisfy,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Chat%7B%5Ctau%7D(x)%20-%20%5Ctau(x)%7D%7B%5Csqrt%7B%5Ctext%7BVar%7D(%5Chat%7B%5Ctau%7D(x))%7D%7D%20%5Clongrightarrow%20%5Cmathcal%7BN%7D(0,1)%0A"></p>
<p>that is, the error in the pointwise estimate is asymptotically Gaussian. There are some conditions and assumptions for their method to work. The main one is unconfoundedness, which is defined as</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cleft%5C%7BY_i%5E%7B(0)%7D,%20Y_i%5E%7B(1)%7D%20%5Cright%5C%7D%20%5Cperp%20W_i%20%7C%20X_i%0A"></p>
<p>meaning that the response variables are independent of the assignment to the treatment or control group once the covariates are accounted for.</p>
<p>To show how this works, I will reproduce one of the simulation experiments from their paper. There is an R package which implements their method, but I couldn’t find one in Python. There are some more comments on the approach at the end of the post.</p>
<section id="simulation-experiments" class="level3">
<h3 class="anchored" data-anchor-id="simulation-experiments">Simulation experiments</h3>
<p>We will set <img src="https://latex.codecogs.com/png.latex?X%20%5Cthicksim%20%5Cmathcal%7BU%7D%20(%5B0%20,%201%5D%5Ed%20)"> for a <img src="https://latex.codecogs.com/png.latex?d"> dimensional space of covariates, and assume <img src="https://latex.codecogs.com/png.latex?%0AY%5E%7B0/1%7D%20%5Cthicksim%20%5Cmathcal%7BN%7D(%5Cmathbb%7BE%7D%5BY%5E%7B0/1%7D%7CX%5D,1)%0A"> so that the noise in the response variable is homoskedastic. Further assumptions are that the mean effect, <img src="https://latex.codecogs.com/png.latex?m(x)">, and the treatment propensity, <img src="https://latex.codecogs.com/png.latex?e(x)">, are</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Am(x)%20=%200.5%20%5Cmathbb%7BE%7D%5Cleft%5BY%5E%7B(1)%7D+Y%5E%7B(0)%7D%20%7C%20X%20=%20x%5Cright%5D%20=%200%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ae(x)%20=%20%5Cmathbb%7BP%7D%5Cleft%5BW=1%20%7C%20X%20=%20x%5Cright%5D%20=%200.5%0A"></p>
<p>The true data generating process will be</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctau(x)%20=%20%5Cxi(X_1)%5Cxi(X_2);%20%5Cquad%20%5Cquad%20%5Cxi(x)=%5Cfrac%7B1%7D%7B1+e%5E%7B-20(x-1/3)%7D%7D%20+1%0A"></p>
<p>with the number of observations set to <img src="https://latex.codecogs.com/png.latex?n=5000">. To make this a tough test, we can set <img src="https://latex.codecogs.com/png.latex?d=6"> so that there are a few noisy covariates which don’t influence the response variable but could confuse the regression trees (as only the first two dimensions are important).</p>
<p>Let’s first generate the data using Python:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> statsmodels.formula.api <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sm</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tree</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> scipy.interpolate</span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># No. dimensions of covariates</span></span>
<span id="cb1-9">d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># No. observations</span></span>
<span id="cb1-11">n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># s set size</span></span>
<span id="cb1-13">s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2500</span></span>
<span id="cb1-14">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.uniform(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(n,d))</span>
<span id="cb1-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> xi(x):</span>
<span id="cb1-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>np.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">20.</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span>))))</span>
<span id="cb1-17">tau <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.multiply(xi(X[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]),xi(X[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))</span></code></pre></div>
<p>we can take a look at the function <img src="https://latex.codecogs.com/png.latex?%5Cxi(X)">,</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> tauxy(X_0,X_1):</span>
<span id="cb2-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> np.multiply(xi(X_0),xi(X_1))</span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Quick plot of tau as function of X_1, X_2 assuming continuous support</span></span>
<span id="cb2-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> plotFunc(func):</span>
<span id="cb2-5">    X_0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb2-6">    X_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb2-7">    X, Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.meshgrid(X_0, X_1)</span>
<span id="cb2-8">    Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> func(X, Y)</span>
<span id="cb2-9">    plt.style.use(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'seaborn-white'</span>)</span>
<span id="cb2-10">    plt.imshow(Z, vmin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, vmax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.</span>, origin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lower'</span>,</span>
<span id="cb2-11">              extent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[X_0.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(), X_0.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(), X_1.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(), X_1.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()],</span>
<span id="cb2-12">             cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'plasma'</span>)</span>
<span id="cb2-13">    plt.colorbar()</span>
<span id="cb2-14">    plt.xlabel(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$X_0$"</span>)</span>
<span id="cb2-15">    plt.ylabel(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$X_1$"</span>)</span>
<span id="cb2-16">plotFunc(tauxy)</span></code></pre></div>
<p><img src="https://aeturrell.github.io/markov-wanderer/posts/estimation-heterogeneous-treatment-random-forests/tau.png" class="img-fluid" alt="The true tau as a function of X-zero and X-one"><em>The true <img src="https://latex.codecogs.com/png.latex?%5Ctau(x)"> as a function of <img src="https://latex.codecogs.com/png.latex?X_0"> and <img src="https://latex.codecogs.com/png.latex?X_1"></em></p>
</section>
<section id="double-sample-causal-trees" class="level3">
<h3 class="anchored" data-anchor-id="double-sample-causal-trees">Double-sample causal trees</h3>
<p>Now we apply the recipe from their paper:</p>
<ol type="1">
<li>Draw a random subsample of size <img src="https://latex.codecogs.com/png.latex?s"> from <img src="https://latex.codecogs.com/png.latex?%5C%7B1,%5Cdots,n%5C%7D"> without replacement and divide into two disjoint sets <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BI%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BJ%7D"> such that <img src="https://latex.codecogs.com/png.latex?%5Clvert%5Cmathcal%7BJ%7D%5Crvert%20=%20%5Clceil%20s/2%20%5Crceil"> and <img src="https://latex.codecogs.com/png.latex?%5Clvert%5Cmathcal%7BI%7D%5Crvert%20=%20%5Clfloor%20s/2%20%5Crfloor">.</li>
<li>Grow a tree via recursive partitions and split using the <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BJ%7D"> data but no <img src="https://latex.codecogs.com/png.latex?Y"> observations from the <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BI%7D"> sample. The splitting criteria to use for double-sample causal trees is the squared-error minimising split.</li>
<li>Estimate the leaf-wise response from the <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BI%7D"> sample observations.</li>
</ol>
<p>The causal tree point estimates are given by</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Chat%7B%5Ctau%7D(x)%20=%20%5Cfrac%7B1%7D%7B%7C%5C%7Bi:W_i=1,X_i%5Cin%20L%5C%7D%7C%7D%20%5Csum_%7B%5C%7Bi:W_i=1,X_i%5Cin%20L%5C%7D%7D%20Y_i%20-%20%5Cfrac%7B1%7D%7B%7C%5C%7Bi:W_i=0,X_i%5Cin%20L%5C%7D%7C%7D%20%5Csum_%7B%5C%7Bi:W_i=0,X_i%5Cin%20L%5C%7D%7D%20Y_i%0A"> where <img src="https://latex.codecogs.com/png.latex?X_i%20%5Cin%20L"> means that <img src="https://latex.codecogs.com/png.latex?L(x)"> is the leaf containing <img src="https://latex.codecogs.com/png.latex?x">. However, because our example is based on <img src="https://latex.codecogs.com/png.latex?%5Ctau(x)">, we will learn directly on that.</p>
<p>The sampling is done as follows:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw a random subsample of size s.</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Choose s ints between 0 and n randomly</span></span>
<span id="cb3-3">subSampleMask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.sample(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, n), s)</span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create set I</span></span>
<span id="cb3-5">setIMask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.sample(subSampleMask, np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(np.ceil(s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>)))</span>
<span id="cb3-6">setI <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [X[setIMask]]</span>
<span id="cb3-7">dfSetI <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>X[setIMask])</span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create set J</span></span>
<span id="cb3-9">setJMask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> subSampleMask <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> setIMask]</span>
<span id="cb3-10">setJ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [X[setJMask]]</span></code></pre></div>
<p>The regression tree is trained on the <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BJ%7D"> set using the <code>sklearn</code> decision tree with a mean-squared error criterion to determine the quality of the splits,</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create tree on the J set</span></span>
<span id="cb4-2">clf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tree.DecisionTreeRegressor(criterion<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mse'</span>)</span>
<span id="cb4-3">clf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> clf.fit(setJ[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], tau[setJMask])</span></code></pre></div>
<p>Now we can produce the predictions for <img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Ctau%7D(x)"> using the <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BI%7D"> set, and look at the out of sample <img src="https://latex.codecogs.com/png.latex?R%5E2">,</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">tau_hat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> clf.predict(dfSetI.iloc[:,:d])</span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Out of sample R^2:</span></span>
<span id="cb5-3">clf.score(dfSetI.iloc[:,:d],tau[setIMask])</span></code></pre></div>
<pre><code>0.9981039884465186</code></pre>
<p>A fairly strong out of sample score! Let’s have a look at the out of sample test more closely by plotting it (with some linear interpolation),</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> plotResults(dfSetI,tau_hat):</span>
<span id="cb7-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set up a regular grid of interpolation points</span></span>
<span id="cb7-3">    xi, yi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(dfSetI.iloc[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(),</span>
<span id="cb7-4">                         dfSetI.iloc[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), np.linspace(dfSetI.iloc[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(), dfSetI.iloc[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb7-5">    xi, yi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.meshgrid(xi, yi)</span>
<span id="cb7-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Interpolate</span></span>
<span id="cb7-7">    rbf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scipy.interpolate.Rbf(dfSetI.iloc[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], dfSetI.iloc[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], tau_hat, function<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'linear'</span>)</span>
<span id="cb7-8">    zi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rbf(xi, yi)</span>
<span id="cb7-9"></span>
<span id="cb7-10">    plt.imshow(zi, vmin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, vmax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.</span>, origin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lower'</span>,</span>
<span id="cb7-11">               extent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[dfSetI.iloc[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(), dfSetI.iloc[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(), dfSetI.iloc[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(), dfSetI.iloc[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()],</span>
<span id="cb7-12">              cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'plasma'</span>)</span>
<span id="cb7-13">    plt.colorbar()</span>
<span id="cb7-14">    plt.show()</span></code></pre></div>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">plotResults(dfSetI,tau_hat)</span></code></pre></div>
<p><img src="https://aeturrell.github.io/markov-wanderer/posts/estimation-heterogeneous-treatment-random-forests/tau_hat.png" class="img-fluid" alt="tau-hat using the double-sample causal tree."><em><img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Ctau%7D(x)"> using the double-sample causal tree.</em></p>
<p>This does seem to capture the treatment well given the two dimensions which matter - despite the ‘noise’ from the other four dimensions. The authors also outline a method for (essentially) bootstrapping which repeats the above process but with different samples. The final estimate is</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Chat%7B%5Ctau%7D%20=%20B%5E%7B-1%7D%5Csum_%7Bb=1%7D%5EB%20%5Chat%7B%5Ctau%7D_b%0A"></p>
<p>This is a really nice application of classification and regression trees to causal effects. However, I did find their paper a bit difficult to follow in places, especially on the splitting rules for causal trees versus regression trees. Specifically, in the example, it seems like mean squared prediction error <em>is</em> the right splitting criterion for the causal tree because the tree is being directly trained on the treatment, <img src="https://latex.codecogs.com/png.latex?%5Ctau">. But in general, <img src="https://latex.codecogs.com/png.latex?%5Ctau"> is not directly available and the splits of the tree must be chosen to as to maximise the variance of <img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Ctau%7D(X_i)"> for <img src="https://latex.codecogs.com/png.latex?i%5Cin%5Cmathcal%7BJ%7D"> instead.</p>
<p><strong>Wager, S., &amp; Athey, S. (2017). Estimation and inference of heterogeneous treatment effects using random forests. Journal of the American Statistical Association.</strong> <a href="https://doi.org/10.1080/01621459.2017.1319839">Link to paper.</a></p>


</section>

 ]]></description>
  <category>code</category>
  <category>econometrics</category>
  <category>machine-learning</category>
  <category>python</category>
  <guid>https://aeturrell.github.io/markov-wanderer/posts/estimation-heterogeneous-treatment-random-forests/index.html</guid>
  <pubDate>Tue, 27 Mar 2018 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Econometrics in Python Part II - Fixed effects</title>
  <dc:creator>Arthur Turrell</dc:creator>
  <link>https://aeturrell.github.io/markov-wanderer/posts/econometrics-in-python-partii-fixed-effects/index.html</link>
  <description><![CDATA[ 




<p>In this second in a series on econometrics in Python, I’ll look at how to implement fixed effects.</p>
<p>For inspiration, I’ll use a recent NBER working paper by Azar, Marinescu, and Steinbaum on <a href="http://www.nber.org/papers/w24147">Labor Market Concentration</a>. In their paper, they look at the monopsony power of firms to hire staff in over 8,000 geographic-occupational labor markets in the US, finding that “going from the 25th percentile to the 75th percentile in concentration is associated with a 17% decline in posted wages”. I’ll use a vastly simplified version of their model. Their measure of concentration is denoted <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BHHI%7D">, and they look at how this affects <img src="https://latex.codecogs.com/png.latex?%5Cln(w)">, the log of the real wage. The model has hiring observations which are organised by year-quarter, labelled <img src="https://latex.codecogs.com/png.latex?t">, and market (commuting zone-occupation), <img src="https://latex.codecogs.com/png.latex?m">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cln(w_%7Bm,t%7D)%20=%20%5Cbeta%20%5Ccdot%5Ctext%7BHHI%7D+%5Calpha_t+%5Cnu_m+%5Cepsilon%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Calpha_t"> is a fixed year-quarter effect, and <img src="https://latex.codecogs.com/png.latex?%5Cnu_m"> is a fixed market effect.</p>
<section id="the-code" class="level3">
<h3 class="anchored" data-anchor-id="the-code">The code</h3>
<p>The most popular statistics module in Python is <code>statsmodels</code>, but <code>pandas</code> and <code>numpy</code> make data manipulation and creation easy.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> statsmodels.formula.api <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sm</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span></code></pre></div>
<p>As far as I can see the data behind the paper is not available, so the first job is to create some <strong>synthetic data</strong> for which the answer, the value of <img src="https://latex.codecogs.com/png.latex?%5Cbeta">, is known. I took the rough value for <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> from the paper, but the other numbers are made up.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15022018</span>)</span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Synthetic data settings</span></span>
<span id="cb2-3">commZonesNo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span></span>
<span id="cb2-4">yearQuarterNo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span></span>
<span id="cb2-5">numObsPerCommPerYQ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb2-6">beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.04</span></span>
<span id="cb2-7">HHI <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.random.uniform(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.</span>,size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[commZonesNo,</span>
<span id="cb2-8">                            yearQuarterNo,</span>
<span id="cb2-9">                            numObsPerCommPerYQ])</span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Different only in first index (market)</span></span>
<span id="cb2-12">cZeffect <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.tile(np.tile(np.random.uniform(high<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.</span>,</span>
<span id="cb2-13">                                            size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>commZonesNo),</span>
<span id="cb2-14">                           (yearQuarterNo,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)),(numObsPerCommPerYQ,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)).T</span>
<span id="cb2-15">cZnames <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.tile(np.tile([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cZ'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(i) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(commZonesNo)],</span>
<span id="cb2-16">                           (yearQuarterNo,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)),(numObsPerCommPerYQ,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)).T</span>
<span id="cb2-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Different only in second index (year-quarter)</span></span>
<span id="cb2-18">yQeffect <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.tile(np.tile(np.random.uniform(high<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.</span>,</span>
<span id="cb2-19">                                             size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>yearQuarterNo),</span>
<span id="cb2-20">                           (numObsPerCommPerYQ,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)).T,(commZonesNo,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb2-21">yQnames <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.tile(np.tile([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yQ'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(i) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(yearQuarterNo)],</span>
<span id="cb2-22">                           (numObsPerCommPerYQ,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)).T,(commZonesNo,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb2-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># commZonesNo x yearQuarterNo x obs error matrix</span></span>
<span id="cb2-24">HomoErrorMat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[commZonesNo,</span>
<span id="cb2-25">                                      yearQuarterNo,</span>
<span id="cb2-26">                                      numObsPerCommPerYQ])</span>
<span id="cb2-27"></span>
<span id="cb2-28">logrealwage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>HHI<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>cZeffect<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>yQeffect<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>HomoErrorMat</span>
<span id="cb2-29">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logrealwage'</span>:logrealwage.flatten(),</span>
<span id="cb2-30">                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'HHI'</span>:HHI.flatten(),</span>
<span id="cb2-31">                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Cz'</span>:cZnames.flatten(),</span>
<span id="cb2-32">                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yQ'</span>:yQnames.flatten()})</span>
<span id="cb2-33"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(df.head())</span></code></pre></div>
<pre><code>    Cz       HHI  logrealwage   yQ
0  cZ0  5.175476     5.683932  yQ0
1  cZ0  4.829876     4.732797  yQ0
2  cZ0  5.284036     5.261500  yQ0
3  cZ0  4.024909     4.027340  yQ0
4  cZ0  3.674694     3.802822  yQ0</code></pre>
<p>Running the regressions is very easy as statsmodels can use the <a href="https://patsy.readthedocs.io/en/v0.1.0/overview.html">patsy package</a>, which is based on similar equation parsers in R and S. Here’s the normal OLS measure:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">normal_ols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sm.ols(formula<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logrealwage ~ HHI'</span>,</span>
<span id="cb4-2">                          data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df).fit()</span>
<span id="cb4-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(normal_ols.summary())</span></code></pre></div>
<pre><code>                            OLS Regression Results                            
==============================================================================
Dep. Variable:            logrealwage   R-squared:                       0.000
Model:                            OLS   Adj. R-squared:                  0.000
Method:                 Least Squares   F-statistic:                     23.39
Date:                Fri, 16 Feb 2018   Prob (F-statistic):           1.32e-06
Time:                        23:20:13   Log-Likelihood:            -6.3063e+05
No. Observations:              225000   AIC:                         1.261e+06
Df Residuals:                  224998   BIC:                         1.261e+06
Df Model:                           1                                         
Covariance Type:            nonrobust                                         
==============================================================================
                 coef    std err          t      P&gt;|t|      [0.025      0.975]
------------------------------------------------------------------------------
Intercept      9.6828      0.044    217.653      0.000       9.596       9.770
HHI           -0.0470      0.010     -4.837      0.000      -0.066      -0.028
==============================================================================
Omnibus:                     5561.458   Durbin-Watson:                   0.127
Prob(Omnibus):                  0.000   Jarque-Bera (JB):             4713.381
Skew:                           0.289   Prob(JB):                         0.00
Kurtosis:                       2.590   Cond. No.                         25.3
==============================================================================

Warnings:
[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.</code></pre>
<p>As an aside, the intercept can be suppressed by using ‘logrealwage ~ HHI-1’ rather than ‘logrealwage ~ HHI’. The straight OLS approach does not do a terrible job for the point estimate, but the <img src="https://latex.codecogs.com/png.latex?R%5E2"> is terrible. Fixed effects can get us out of the, er, fix…</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">FE_ols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sm.ols(formula<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logrealwage ~ HHI+C(Cz)+C(yQ)-1'</span>,</span>
<span id="cb6-2">                              data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df).fit()</span>
<span id="cb6-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(FE_ols.summary())</span></code></pre></div>
<pre><code>                            OLS Regression Results                            
==============================================================================
Dep. Variable:            logrealwage   R-squared:                       0.937
Model:                            OLS   Adj. R-squared:                  0.937
Method:                 Least Squares   F-statistic:                 1.154e+05
Date:                Fri, 16 Feb 2018   Prob (F-statistic):               0.00
Time:                        23:20:31   Log-Likelihood:            -3.1958e+05
No. Observations:              225000   AIC:                         6.392e+05
Df Residuals:                  224970   BIC:                         6.395e+05
Df Model:                          29                                         
Covariance Type:            nonrobust                                         
=================================================================================
                    coef    std err          t      P&gt;|t|      [0.025      0.975]
---------------------------------------------------------------------------------
C(Cz)[cZ0]        4.4477      0.016    281.428      0.000       4.417       4.479
C(Cz)[cZ1]       10.0441      0.016    636.101      0.000      10.013      10.075
C(Cz)[cZ10]      10.4897      0.016    663.407      0.000      10.459      10.521
C(Cz)[cZ11]      12.2364      0.016    773.920      0.000      12.205      12.267
C(Cz)[cZ12]       8.7909      0.016    556.803      0.000       8.760       8.822
C(Cz)[cZ13]       8.6307      0.016    545.917      0.000       8.600       8.662
C(Cz)[cZ14]      12.1590      0.016    768.937      0.000      12.128      12.190
C(Cz)[cZ2]       11.5722      0.016    733.999      0.000      11.541      11.603
C(Cz)[cZ3]        7.4164      0.016    469.160      0.000       7.385       7.447
C(Cz)[cZ4]       10.4830      0.016    663.719      0.000      10.452      10.514
C(Cz)[cZ5]        6.2675      0.016    396.634      0.000       6.237       6.299
C(Cz)[cZ6]        7.1924      0.016    455.045      0.000       7.161       7.223
C(Cz)[cZ7]        5.2567      0.016    333.177      0.000       5.226       5.288
C(Cz)[cZ8]        6.3380      0.016    401.223      0.000       6.307       6.369
C(Cz)[cZ9]        5.8814      0.016    372.246      0.000       5.850       5.912
C(yQ)[T.yQ1]      0.1484      0.012     12.828      0.000       0.126       0.171
C(yQ)[T.yQ10]    -2.2139      0.012   -191.442      0.000      -2.237      -2.191
C(yQ)[T.yQ11]    -0.2461      0.012    -21.280      0.000      -0.269      -0.223
C(yQ)[T.yQ12]     3.0241      0.012    261.504      0.000       3.001       3.047
C(yQ)[T.yQ13]    -2.0663      0.012   -178.679      0.000      -2.089      -2.044
C(yQ)[T.yQ14]     2.9468      0.012    254.817      0.000       2.924       2.969
C(yQ)[T.yQ2]      2.0992      0.012    181.520      0.000       2.076       2.122
C(yQ)[T.yQ3]      5.0328      0.012    435.196      0.000       5.010       5.055
C(yQ)[T.yQ4]      7.4619      0.012    645.253      0.000       7.439       7.485
C(yQ)[T.yQ5]     -0.9819      0.012    -84.907      0.000      -1.005      -0.959
C(yQ)[T.yQ6]     -2.0630      0.012   -178.396      0.000      -2.086      -2.040
C(yQ)[T.yQ7]      5.4874      0.012    474.502      0.000       5.465       5.510
C(yQ)[T.yQ8]     -1.5476      0.012   -133.824      0.000      -1.570      -1.525
C(yQ)[T.yQ9]      0.2312      0.012     19.989      0.000       0.208       0.254
HHI              -0.0363      0.002    -14.874      0.000      -0.041      -0.031
==============================================================================
Omnibus:                        0.866   Durbin-Watson:                   1.994
Prob(Omnibus):                  0.648   Jarque-Bera (JB):                0.873
Skew:                           0.003   Prob(JB):                        0.646
Kurtosis:                       2.993   Cond. No.                         124.
==============================================================================

Warnings:
[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.</code></pre>
<p>This is much closer to the right answer of <img src="https://latex.codecogs.com/png.latex?%5Cbeta=-0.04">, has half the standard error, and explains much more of the variation in <img src="https://latex.codecogs.com/png.latex?%5Cln(w_%7Bm,t%7D)">.</p>


</section>

 ]]></description>
  <category>code</category>
  <category>econometrics</category>
  <category>python</category>
  <guid>https://aeturrell.github.io/markov-wanderer/posts/econometrics-in-python-partii-fixed-effects/index.html</guid>
  <pubDate>Tue, 20 Feb 2018 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Econometrics in Python part I - Double machine learning</title>
  <dc:creator>Arthur Turrell</dc:creator>
  <link>https://aeturrell.github.io/markov-wanderer/posts/econometrics-in-python-parti-ml/index.html</link>
  <description><![CDATA[ 




<p><em>The idea is that this will be the first in a series of posts covering econometrics in Python.</em></p>
<p>At a conference a couple of years ago, I saw Victor Chernozhukov present his paper on <a href="https://arxiv.org/abs/1608.00060">Double/Debiased Machine Learning for Treatment and Causal Parameters</a>. It really stuck with me because of the way it fruitfully combines econometrics and machine learning. Machine learning is obsessed with prediction, and is getting <a href="https://blog.floydhub.com/Turning-design-mockups-into-code-with-deep-learning/">very good at it</a>. Econometrics is obsessed with causality and identification, and pretty good at it - especially in ‘messy’ real-world situations. Combining the two promises to provide powerful new ways to understand causal relationships.</p>
<p>So, in brief, what does ‘double’ machine learning do? It’s one way to bring the power of machine learning for prediction on non-linear problems into an econometric context in which the asymptotic properties of the estimates of the parameters of interest are known to behave well. The problem is that just applying machine learning to predict outcomes (<img src="https://latex.codecogs.com/png.latex?Y">) from a treatment or variable (<img src="https://latex.codecogs.com/png.latex?D">) in the presence of many controls (<img src="https://latex.codecogs.com/png.latex?X">) will lead to biased estimates of the model parameter (<img src="https://latex.codecogs.com/png.latex?%5Ctheta">). The double machine learning method of Chernozhukov <em>et al.</em> delivers point estimators that have a <img src="https://latex.codecogs.com/png.latex?%5Csqrt%7BN%7D"> rate of convergence for <img src="https://latex.codecogs.com/png.latex?N"> observations and are approximately unbiased and normally distributed.</p>
<p>The clearest example, which I reproduce here from the paper, is of partially linear regression. They take it themselves from <a href="https://www.jstor.org/stable/1912705">Robinson (1988)</a>. The model is</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AY%20=%20D%5Ccdot%5Ctheta%20+%20g(X)%20+%20U,%20%5Cquad%20%5Cquad%20%5Cmathbb%7BE%7D%20%5Cleft%5BU%20%7C%20X,%20D%20%5Cright%5D%20=0%20%5C%5C%0AD%20=%20m(X)%20+%20V,%20%5Cquad%20%5Cquad%20%5Cmathbb%7BE%7D%20%5Cleft%5BV%20%7C%20X%5Cright%5D%20=0%0A"></p>
<p>with <img src="https://latex.codecogs.com/png.latex?X%20=%20(X_1,X_2,%5Cdots,X_p)"> a vector of controls. Here <img src="https://latex.codecogs.com/png.latex?%5Ceta=(m,g)"> can be non-linear.</p>
<p>The naïve machine learning approach would be to estimate <img src="https://latex.codecogs.com/png.latex?D%5Ccdot%5Chat%7B%5Ctheta%7D%20+%20%5Chat%7Bg%7D(X)"> using one of the standard algorithms (random forest, support vector regression, etc). The authors of the paper show that doing this means that <img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Ctheta%7D"> effectively has a slower than root <img src="https://latex.codecogs.com/png.latex?N"> rate of convergence due to the bias in estimating <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bg%7D">.</p>
<p>They suggest overcoming this bias using orthogonalisation and splitting the sample. They obtain <img src="https://latex.codecogs.com/png.latex?%5Chat%7BV%7D%20=%20D%20-%20%5Chat%7Bm%7D(X)"> using machine learning on an auxiliary sample; finding the mean of <img src="https://latex.codecogs.com/png.latex?D"> given <img src="https://latex.codecogs.com/png.latex?X">. With the remaining observations, they define an estimator for <img src="https://latex.codecogs.com/png.latex?%5Ctheta">, <img src="https://latex.codecogs.com/png.latex?%5Ccheck%7B%20%5Ctheta%7D">, which is a function of <img src="https://latex.codecogs.com/png.latex?%5Chat%7BV%7D">, <img src="https://latex.codecogs.com/png.latex?D">, <img src="https://latex.codecogs.com/png.latex?X">, and an estimate of <img src="https://latex.codecogs.com/png.latex?g"> given by <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bg%7D">. As they say (with a slight change in notation),</p>
<blockquote class="blockquote">
<p>By approximately orthogonalizing <img src="https://latex.codecogs.com/png.latex?D"> with respect to <img src="https://latex.codecogs.com/png.latex?X"> and approximately removing the direct effect of confounding by subtracting an estimate of <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bg%7D">, <img src="https://latex.codecogs.com/png.latex?%5Ccheck%7B%20%5Ctheta%7D"> removes the effect of regularization bias … The formulation of <img src="https://latex.codecogs.com/png.latex?%5Ccheck%7B%20%5Ctheta%7D"> also provides direct links to both the classical econometric literature, as the estimator can clearly be interpreted as a linear instrumental variable (IV) estimator, …</p>
</blockquote>
<p>The double comes from estimating <img src="https://latex.codecogs.com/png.latex?%5Chat%7BV%7D"> in the auxiliary problem, as well as <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bg%7D">, before calculating the estimator <img src="https://latex.codecogs.com/png.latex?%5Ccheck%7B%5Ctheta%7D">. In their paper, Chernozhukov <em>et al.</em> also discuss estimating average treatment effects, local average treatment effects, and average treatment effects for the treated using a more general formulation where <img src="https://latex.codecogs.com/png.latex?g"> is a function of both <img src="https://latex.codecogs.com/png.latex?X"> and <img src="https://latex.codecogs.com/png.latex?D">. More on the technical details and other applications can be found in the paper; here we’ll look at an example estimation in the context of a model</p>
<section id="double-machine-learning-in-practice" class="level3">
<h3 class="anchored" data-anchor-id="double-machine-learning-in-practice">Double machine learning in practice</h3>
<p>So how does it work in practice? With the sample split into two sets of size <img src="https://latex.codecogs.com/png.latex?n=N/2"> indexed by <img src="https://latex.codecogs.com/png.latex?i%5Cin%20I"> and <img src="https://latex.codecogs.com/png.latex?i%20%5Cin%20I%5EC">, there are four steps,</p>
<ol type="1">
<li>Estimate <img src="https://latex.codecogs.com/png.latex?%5Chat%7BV%7D%20=%20D%20-%20%5Chat%7Bm%7D(X)"> using <img src="https://latex.codecogs.com/png.latex?I%5EC"></li>
<li>Estimate <img src="https://latex.codecogs.com/png.latex?Y%20=%20%5Chat%7Bg%7D(X)%20+%20%5Chat%7Bu%7D"> using <img src="https://latex.codecogs.com/png.latex?I%5EC"></li>
<li>Estimate <img src="https://latex.codecogs.com/png.latex?%5Ccheck%7B%5Ctheta%7D(I%5EC,I)%20=%20%5Cleft(%5Cfrac%7B1%7D%7Bn%7D%5Cdisplaystyle%5Csum_%7Bi%5Cin%20I%7D%5Chat%7BV%7D_i%20D_i%5Cright)%5E%7B-1%7D%20%5Cfrac%7B1%7D%7Bn%7D%20%5Cdisplaystyle%5Csum_%7Bi%5Cin%20I%7D%20%5Chat%7BV%7D_i%20%5Cleft(Y_i-%5Chat%7Bg%7D(X_i)%5Cright)"></li>
<li>Construct the efficient, cross-fitting estimate: <img src="https://latex.codecogs.com/png.latex?%5Ccheck%7B%5Ctheta%7D_%7B%5Ctext%7Bcf%7D%7D%20=%20%5Cfrac%7B1%7D%7B2%7D%20%5Cleft%5B%5Ccheck%7B%5Ctheta%7D%5Cleft(I%5EC,I%5Cright)+%5Ccheck%7B%5Ctheta%7D%5Cleft(I,I%5EC%5Cright)%20%5Cright%5D"></li>
</ol>
</section>
<section id="simulated-example" class="level3">
<h3 class="anchored" data-anchor-id="simulated-example">Simulated example</h3>
<p>This example was inspired by this <a href="https://www.r-bloggers.com/cross-fitting-double-machine-learning-estimator/">great post</a> by Gabriel Vasconcelos. To make it more exciting, I’ll use a slightly different functional form with <img src="https://latex.codecogs.com/png.latex?g"> as sine squared and <img src="https://latex.codecogs.com/png.latex?m"> as the wrapped Cauchy distribution:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ag(x)=%20%5Csin%5E2(x)%20%5C%5C%0Am(x;%5Cnu,%5Cgamma)=%20%5Cfrac%7B1%7D%7B2%5Cpi%7D%20%5Cfrac%7B%5Csinh(%5Cgamma)%7D%7B%5Ccosh(%5Cgamma)-%5Ccos(x-%5Cnu)%7D%0A"></p>
<p>Let’s keep it simple and set <img src="https://latex.codecogs.com/png.latex?%5Cnu=0"> and <img src="https://latex.codecogs.com/png.latex?%5Cgamma=1">. The wrapped Cauchy looks like this:</p>
<p><img src="https://aeturrell.github.io/markov-wanderer/posts/econometrics-in-python-parti-ml/DoubleMLCauchy.png" class="img-fluid" alt="The wrapped Cauchy distribution"><em>The wrapped Cauchy distribution</em></p>
<p>Our model is</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ay_i%20=%20d_i%5Ctheta%20+%20g(x_i'%5Ccdot%20b)%20+%20u_i,%20%5Cquad%20%5Cquad%20%20%5C%5C%0Ad_i%20=%20m(x_i'%5Ccdot%20b)%20+%20v_i%20%5Cquad%20%5Cquad%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?x_i"> has length <img src="https://latex.codecogs.com/png.latex?K=10"> and will be generated from a multivariate normal distribution, the true value of the causal parameter will be <img src="https://latex.codecogs.com/png.latex?%5Ctheta=0.5">, and <img src="https://latex.codecogs.com/png.latex?b_k=1/k">. The errors will be</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Au_i,%20v_i%20%5Cthicksim%20%5Cmathcal%7BN%7D(0,1)%0A"></p>
<p>and I’m going to use the <a href="http://scikit-learn.org/stable/index.html">scikit learn</a> implementation of the <a href="https://en.wikipedia.org/wiki/Random_forest">random forest regressor</a> to do the machine learning.</p>
<p>Note that I’m using a scalar <img src="https://latex.codecogs.com/png.latex?D"> in the example below but, in the original paper, it’s a binary treatment - thanks to <a href="https://twitter.com/KyleCSN">Kyle Carlson</a> for pointing out that this could cause some confusion!</p>
<p>The code, using Python 3, is</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> make_spd_matrix</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> statsmodels.api <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sm <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for OLS</span></span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.ensemble <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RandomForestRegressor <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Our ML algorithm</span></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set up the environment</span></span>
<span id="cb1-7">randomseednumber <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11022018</span></span>
<span id="cb1-8">np.random.seed(randomseednumber)</span>
<span id="cb1-9">N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># No. obs</span></span>
<span id="cb1-10">k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># = No. variables in x_i</span></span>
<span id="cb1-11">theta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Structural parameter</span></span>
<span id="cb1-12">b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>k <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>)] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x weights</span></span>
<span id="cb1-13">sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_spd_matrix(k,randomseednumber) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># NUmber of simulations</span></span>
<span id="cb1-15">MC_no <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span></span>
<span id="cb1-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> g(x):</span>
<span id="cb1-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> np.power(np.sin(x),<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> m(x,nu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>,gamma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>):</span>
<span id="cb1-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>math.pi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(np.sinh(gamma))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(np.cosh(gamma)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>np.cos(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>nu))</span>
<span id="cb1-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Array of estimated thetas to store results</span></span>
<span id="cb1-21">theta_est <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros(shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[MC_no,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb1-22"></span>
<span id="cb1-23"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(MC_no):</span>
<span id="cb1-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate data: no. obs x no. variables in x_i</span></span>
<span id="cb1-25">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.multivariate_normal(np.ones(k),sigma,size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[N,])</span>
<span id="cb1-26">    G <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> g(np.dot(X,b))</span>
<span id="cb1-27">    M <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m(np.dot(X,b))</span>
<span id="cb1-28">    D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> M<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>np.random.standard_normal(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>,])</span>
<span id="cb1-29">    Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.dot(theta,D)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>G<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>np.random.standard_normal(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>,])</span>
<span id="cb1-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb1-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Now run the different methods</span></span>
<span id="cb1-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb1-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># OLS --------------------------------------------------</span></span>
<span id="cb1-34">    OLS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sm.OLS(Y,D)</span>
<span id="cb1-35">    results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OLS.fit()</span>
<span id="cb1-36">    theta_est[i][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> results.params[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb1-37"></span>
<span id="cb1-38">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Naive double machine Learning ------------------------</span></span>
<span id="cb1-39">    naiveDMLg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>RandomForestRegressor(max_depth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-40">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute ghat</span></span>
<span id="cb1-41">    naiveDMLg.fit(X,Y)</span>
<span id="cb1-42">    Ghat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> naiveDMLg.predict(X)</span>
<span id="cb1-43">    naiveDMLm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>RandomForestRegressor(max_depth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-44">    naiveDMLm.fit(X,D)</span>
<span id="cb1-45">    Mhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> naiveDMLm.predict(X)</span>
<span id="cb1-46">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># vhat as residual</span></span>
<span id="cb1-47">    Vhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Mhat</span>
<span id="cb1-48">    theta_est[i][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(np.dot(Vhat,Y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Ghat))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>np.mean(np.dot(Vhat,D))</span>
<span id="cb1-49"></span>
<span id="cb1-50">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  Cross-fitting DML -----------------------------------</span></span>
<span id="cb1-51">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Split the sample</span></span>
<span id="cb1-52">    I <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(N,np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),replace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb1-53">    I_C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [x <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> np.arange(N) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> I]</span>
<span id="cb1-54">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ghat for both</span></span>
<span id="cb1-55">    Ghat_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomForestRegressor(max_depth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).fit(X[I],Y[I]).predict(X[I_C])</span>
<span id="cb1-56">    Ghat_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomForestRegressor(max_depth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).fit(X[I_C],Y[I_C]).predict(X[I])</span>
<span id="cb1-57">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Mhat and vhat for both</span></span>
<span id="cb1-58">    Mhat_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomForestRegressor(max_depth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).fit(X[I],D[I]).predict(X[I_C])</span>
<span id="cb1-59">    Mhat_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomForestRegressor(max_depth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).fit(X[I_C],D[I_C]).predict(X[I])</span>
<span id="cb1-60">    Vhat_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> D[I_C]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Mhat_1</span>
<span id="cb1-61">    Vhat_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> D[I] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> Mhat_2</span>
<span id="cb1-62">    theta_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(np.dot(Vhat_1,(Y[I_C]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Ghat_1)))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>np.mean(np.dot(Vhat_1,D[I_C]))</span>
<span id="cb1-63">    theta_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(np.dot(Vhat_2,(Y[I]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Ghat_2)))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>np.mean(np.dot(Vhat_2,D[I]))</span>
<span id="cb1-64">    theta_est[i][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(theta_1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>theta_2)</span></code></pre></div>
<p>Below is a plot of the kernel density estimates of <img src="https://latex.codecogs.com/png.latex?%5Ctheta"> using <a href="https://seaborn.pydata.org/">seaborn</a>. The peak of the distributions for OLS and double ML without cross-fitting are off the true value, but the cross-fitted double ML procedure gets much closer.</p>
<p><img src="https://aeturrell.github.io/markov-wanderer/posts/econometrics-in-python-parti-ml/DoubleMLEsts.png" class="img-fluid" alt="The estimates of theta"><em>The estimates of <img src="https://latex.codecogs.com/png.latex?%5Ctheta"></em></p>
<p>So there it is: double machine learning is a useful technique at the intersection of machine learning and econometrics which can produce approximately unbiased and normally distributed point estimates in semi-parametric settings.</p>


</section>

 ]]></description>
  <category>code</category>
  <category>econometrics</category>
  <category>python</category>
  <guid>https://aeturrell.github.io/markov-wanderer/posts/econometrics-in-python-parti-ml/index.html</guid>
  <pubDate>Sat, 10 Feb 2018 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
