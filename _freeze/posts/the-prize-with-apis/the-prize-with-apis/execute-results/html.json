{
  "hash": "4c5d368f664dba95415dc7f96a85de06",
  "result": {
    "markdown": "---\necho: false\ndate: '2022-12-18'\nlayout: post\ntitle: In praise of APIs (application programming interfaces)\ncategories:\n  - code\n  - data\n---\n\n\n\nIn this blog, I look at some of reasons why APIs are such a great way to share data.\n\nAPIs make it possible for users to plug data directly into software, dashboards, websites, reports, and analysis in a consistent, machine readable format that favours automation. They are the best practice way to share data between expert users and organisations, and are an important intermediary for enabling data to reach a wider audience—giving a path to significantly increased impact for data that anyone has decided to share. Leading statistical institutes provide their data via APIs, and UK government departments increasingly [share](https://www.api.gov.uk/#uk-government-apis) data through APIs too.\n\nIn a previous post, I looked at one API in particular—the [ONS API](../ons-api/index.md).\n\n## What is an API?\n\nAPIs, or application programming interfaces, are a set of rules and protocols that enable communication between different software systems. They allow different systems to exchange data and functionality programmatically. They are programming language agnostic, and sometimes make data available in several formats.\n\nIn the context of data and statistics, APIs are particularly useful because they allow organisations to access and use data from a variety of sources in a consistent and controlled manner. For example, a government department might wish to use APIs to reproducibly and reliably access data from a national statistical office.\n\nIt's easiest to show how APIs work with an example. Let's pull down CO2 emissions per capita by country from the World Bank using the [**pandas_datareader**](https://pandas-datareader.readthedocs.io/) package in Python. **pandas_datareader** provides convenient access to a wide range of APIs including those serving up data from the [US Federal Reserve (FRED)](https://fred.stlouisfed.org/docs/api/fred/), the [World Bank](https://datahelpdesk.worldbank.org/knowledgebase/articles/889392-about-the-indicators-api-documentation), the [OECD](https://data.oecd.org/api/), the [Bank of Canada](https://www.bankofcanada.ca/valet/docs), [Eurostat](https://ec.europa.eu/eurostat/data/web-services), and more.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport textwrap\nfrom pandas_datareader import wb\n\ndf = wb.download(                              # download the data from the world bank\n    indicator=\"EN.ATM.CO2E.PC\",                # indicator code\n    country=[\"US\", \"CHN\", \"IND\", \"Z4\", \"Z7\"],  # country codes\n    start=2019,                                # start year\n    end=2019,                                  # end year\n)\ndf = df.reset_index()                          # remove country as index\ndf[\"country\"] = df[\"country\"].apply(lambda x: textwrap.fill(x, 10))  # wrap long names\ndf = df.sort_values(\"EN.ATM.CO2E.PC\")          # re-order\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>country</th>\n      <th>year</th>\n      <th>EN.ATM.CO2E.PC</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>3</th>\n      <td>India</td>\n      <td>2019</td>\n      <td>1.797620</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>East Asia\\n&amp; Pacific</td>\n      <td>2019</td>\n      <td>6.497258</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Europe &amp;\\nCentral\\nAsia</td>\n      <td>2019</td>\n      <td>6.576734</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>China</td>\n      <td>2019</td>\n      <td>7.605937</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>United\\nStates</td>\n      <td>2019</td>\n      <td>14.673411</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThere are several features of note:\n\n- we only pulled down the data we needed\n- we were able to get data straight into our analytical tool (here, Python)\n- getting the data for the period we want is as simple as changing the year\n\nHaving downloaded the data, let's now plot it:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nimport seaborn as sns\n\nfig, ax = plt.subplots()\nsns.barplot(x=\"country\", y=\"EN.ATM.CO2E.PC\", data=df.reset_index(), ax=ax)\nax.set_title(r\"CO$_2$ (metric tons per capita)\", loc=\"right\")\nplt.suptitle(\"The USA leads the world on per-capita emissions\", y=1.01)\nfor key, spine in ax.spines.items():\n    spine.set_visible(False)\nax.set_ylabel(\"\")\nax.set_xlabel(\"\")\nax.yaxis.tick_right()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](the-prize-with-apis_files/figure-html/cell-4-output-1.svg){}\n:::\n:::\n\n\nThis shows how data can be pulled straight down into analytical tools, reports, forecasts, and so on; any output or analysis you can think of.\n\n## Why are APIs brilliant?\n\nProgrammatic access to data has a number of clear benefits:\n\n- Data are provided in a consistent, machine readable format—this can save hours of work for each file and enables automation\n- users can build other tools on top of APIs and APIs integrate directly into analytical tools\n- APIs are accessible by a range of open source (and free) software\n- APIs can provide only the data that the user needs (they enable filtering)\n- APIs can provide a data provider with more granular information on what data have been requested than a bulk download can\n- an organisation can provide data to itself (eg across teams) without one team having to bother another; teams within the organisation can also consume the API\n- the date of the ingestion of data can be easily including in the metadata that the API send—this is really useful to anyone working with real-time data applications (eg nowcasting) or if a mistake is subsequently found in a series\n- using APIs to serve data encourages the use of consistent taxonomies (eg country names) that will ultimately aid end-users by enabling them to more easily link data\n- secure APIs allow organisations to share sensitive data in a programmatic way and, while no method of data transfer can ever be 100% secure, APIs that follow the best practices for security are thought to involve less risk than emailing files\n\nDirectly integrating with analytical tools has a number of benefits for auditability and accountability given that analytical tools can be used with code, and code can be put under version control—which means to-the-second, to-the-line auditing of who changed what when and easy-to-reverse changes should errors be discovered.\n\nAdditionally, when data are shared only as files, it's so often as Microsoft Excel files, which can go wrong in some pretty serious ways:\n\n- Excel is a proprietary format that is harder to use without buying software from a particular vendor\n- Excel mixes analysis and data storage (which is bad practice)\n- Excel changes data\n- Excel is limited in storage size and file-types it can handle\n- Excel is not easily auditable (code-first approaches allow for to-the-second, to-the-line audit).\n\nThat said, you can improve the provision of data through Excel by making it machine readable or by making it consistent, perhaps making use of the excellent [GPTables](https://gptables.readthedocs.io/) (good practice tables) package created by the UK's Office for National Statistics (full disclosure: I didn't work on this package, but some colleagues did).\n\nIt's also important to note that providing a downloadable file and an API is not mutually exclusive—to serve the widest range of users, it's a good idea to provide both. But it's important that they feed off the same underlying database in the same way and so are 100% consistent.\n\nThe main downside of APIs is that they are more difficult to use for all but expert users (though this category has expanded in recent years as the world becomes more code-savvy and it now arguably includes everyone from academics to data journalists to data enthusiasts). This is why it's important to make APIs available *alongside* other ways to access the data.\n\nTo lower the barrier to using an API, there are a couple of options. They can be integrated into easier-to-use tools (like the **pandas_datareader** package) or they can be provided alongside an API 'query builder' that gives rapid feedback on whether a query is valid or not ([open street map API's 'overpass turbo' is a good example](https://overpass-turbo.eu/)).\n\n## API Best Practice\n\nThere are a number of API standards out there, and the best one depends on the context. In the UK, there is [gov.uk guidance](https://www.gov.uk/guidance/gds-api-technical-and-data-standards) on APIs.\n\nThe approach followed for open data APIs across a [wide range of international and national statistical organisations](https://sdmx.org/?page_id=2705)[^1] is a standard called SDMX: [Statistical Data and Metadata eXchange](https://sdmx.org/?page_id=2555). It's an ISO (International Organization for Standardization) standard designed to describe statistical data and metadata, normalise their exchange, and improve their efficient sharing across statistical and similar organisations.\n\n[^1]: The BIS (Bank for International Settlements), ECB (European Central Bank), EUROSTAT (Statistical Office of the European Union), IMF (International Monetary Fund), OECD (Organisation for Economic Co-operation and Development), UN (United Nations), and the World Bank.\n\n",
    "supporting": [
      "the-prize-with-apis_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}